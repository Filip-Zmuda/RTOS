
second.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007474  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007704  08007704  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007704  08007704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800770c  0800770c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800770c  0800770c  0001770c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007710  08007710  00017710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b88  20000074  08007788  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008bfc  08007788  00028bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc53  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004036  00000000  00000000  0003ccf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  00040d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  000424e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002525a  00000000  00000000  00043b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8d0  00000000  00000000  00068d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deac4  00000000  00000000  0008564a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016410e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006558  00000000  00000000  00164160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800762c 	.word	0x0800762c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800762c 	.word	0x0800762c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <vApplicationMallocFailedHook>:

/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <vApplicationGetIdleTaskMemory+0x2c>)
 8000548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <vApplicationGetIdleTaskMemory+0x30>)
 800054e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	200000a0 	.word	0x200000a0
 8000568:	20000160 	.word	0x20000160

0800056c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetTimerTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetTimerTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800058a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	20000360 	.word	0x20000360
 800059c:	20000420 	.word	0x20000420

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af02      	add	r7, sp, #8
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
	xTimer1 = xTimerCreate("TIM14",10,pdTRUE,NULL,vTimerCallback);
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_FREERTOS_Init+0x68>)
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2201      	movs	r2, #1
 80005ae:	210a      	movs	r1, #10
 80005b0:	4816      	ldr	r0, [pc, #88]	; (800060c <MX_FREERTOS_Init+0x6c>)
 80005b2:	f005 ffb9 	bl	8006528 <xTimerCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a15      	ldr	r2, [pc, #84]	; (8000610 <MX_FREERTOS_Init+0x70>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

	xQueue1 = xQueueCreate(1,sizeof(float));
 80005bc:	2200      	movs	r2, #0
 80005be:	2104      	movs	r1, #4
 80005c0:	2001      	movs	r0, #1
 80005c2:	f004 fba9 	bl	8004d18 <xQueueGenericCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_FREERTOS_Init+0x74>)
 80005ca:	6013      	str	r3, [r2, #0]
	xQueue2 = xQueueCreate(10,sizeof(float));
 80005cc:	2200      	movs	r2, #0
 80005ce:	2104      	movs	r1, #4
 80005d0:	200a      	movs	r0, #10
 80005d2:	f004 fba1 	bl	8004d18 <xQueueGenericCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <MX_FREERTOS_Init+0x78>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_FREERTOS_Init+0x7c>)
 80005de:	1d3c      	adds	r4, r7, #4
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 f99b 	bl	800492e <osThreadCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <MX_FREERTOS_Init+0x80>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bdb0      	pop	{r4, r5, r7, pc}
 8000606:	bf00      	nop
 8000608:	08000635 	.word	0x08000635
 800060c:	08007650 	.word	0x08007650
 8000610:	20000098 	.word	0x20000098
 8000614:	20000090 	.word	0x20000090
 8000618:	20000094 	.word	0x20000094
 800061c:	08007658 	.word	0x08007658
 8000620:	2000009c 	.word	0x2000009c

08000624 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f004 f9ca 	bl	80049c6 <osDelay>
 8000632:	e7fb      	b.n	800062c <StartDefaultTask+0x8>

08000634 <vTimerCallback>:
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vTimerCallback( TimerHandle_t xTimer ){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_WritePin(GPIOA,LD1_Pin,GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <vTimerCallback+0x30>)
 8000642:	f000 ff41 	bl	80014c8 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f005 f95f 	bl	800590c <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA,LD1_Pin,GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2120      	movs	r1, #32
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <vTimerCallback+0x30>)
 8000654:	f000 ff38 	bl	80014c8 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f005 f956 	bl	800590c <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA,LD1_Pin,GPIO_PIN_SET);
 8000660:	e7ec      	b.n	800063c <vTimerCallback+0x8>
 8000662:	bf00      	nop
 8000664:	40020000 	.word	0x40020000

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <MX_GPIO_Init+0xd4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a2d      	ldr	r2, [pc, #180]	; (800073c <MX_GPIO_Init+0xd4>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_GPIO_Init+0xd4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_GPIO_Init+0xd4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a26      	ldr	r2, [pc, #152]	; (800073c <MX_GPIO_Init+0xd4>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_GPIO_Init+0xd4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_GPIO_Init+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a1f      	ldr	r2, [pc, #124]	; (800073c <MX_GPIO_Init+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_GPIO_Init+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0xd4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_GPIO_Init+0xd4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_GPIO_Init+0xd4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_GPIO_Init+0xd8>)
 80006f6:	f000 fee7 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000700:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_GPIO_Init+0xdc>)
 8000712:	f000 fd45 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000716:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0xd8>)
 8000730:	f000 fd36 	bl	80011a0 <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000
 8000744:	40020800 	.word	0x40020800

08000748 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f000 feb9 	bl	80014fc <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 f98c 	bl	8000aac <Error_Handler>
  /* USER CODE BEGIN I2C1_Init 2 */


  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000820 	.word	0x20000820
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <MX_I2C2_Init+0x54>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_I2C2_Init+0x58>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 238;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007bc:	22ee      	movs	r2, #238	; 0xee
 80007be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007e2:	f000 fe8b 	bl	80014fc <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 f95e 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000874 	.word	0x20000874
 80007f8:	40005800 	.word	0x40005800
 80007fc:	000186a0 	.word	0x000186a0

08000800 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a52      	ldr	r2, [pc, #328]	; (8000968 <HAL_I2C_MspInit+0x168>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d13c      	bne.n	800089c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b51      	ldr	r3, [pc, #324]	; (800096c <HAL_I2C_MspInit+0x16c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a50      	ldr	r2, [pc, #320]	; (800096c <HAL_I2C_MspInit+0x16c>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b4e      	ldr	r3, [pc, #312]	; (800096c <HAL_I2C_MspInit+0x16c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083e:	23c0      	movs	r3, #192	; 0xc0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000842:	2312      	movs	r3, #18
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084e:	2304      	movs	r3, #4
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4845      	ldr	r0, [pc, #276]	; (8000970 <HAL_I2C_MspInit+0x170>)
 800085a:	f000 fca1 	bl	80011a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b42      	ldr	r3, [pc, #264]	; (800096c <HAL_I2C_MspInit+0x16c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a41      	ldr	r2, [pc, #260]	; (800096c <HAL_I2C_MspInit+0x16c>)
 8000868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b3f      	ldr	r3, [pc, #252]	; (800096c <HAL_I2C_MspInit+0x16c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2105      	movs	r1, #5
 800087e:	201f      	movs	r0, #31
 8000880:	f000 fc34 	bl	80010ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000884:	201f      	movs	r0, #31
 8000886:	f000 fc4d 	bl	8001124 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2105      	movs	r1, #5
 800088e:	2020      	movs	r0, #32
 8000890:	f000 fc2c 	bl	80010ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000894:	2020      	movs	r0, #32
 8000896:	f000 fc45 	bl	8001124 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800089a:	e060      	b.n	800095e <HAL_I2C_MspInit+0x15e>
  else if(i2cHandle->Instance==I2C2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a34      	ldr	r2, [pc, #208]	; (8000974 <HAL_I2C_MspInit+0x174>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d15b      	bne.n	800095e <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <HAL_I2C_MspInit+0x16c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a2f      	ldr	r2, [pc, #188]	; (800096c <HAL_I2C_MspInit+0x16c>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <HAL_I2C_MspInit+0x16c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <HAL_I2C_MspInit+0x16c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <HAL_I2C_MspInit+0x16c>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <HAL_I2C_MspInit+0x16c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e4:	2312      	movs	r3, #18
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008f0:	2304      	movs	r3, #4
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481d      	ldr	r0, [pc, #116]	; (8000970 <HAL_I2C_MspInit+0x170>)
 80008fc:	f000 fc50 	bl	80011a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000912:	2304      	movs	r3, #4
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4816      	ldr	r0, [pc, #88]	; (8000978 <HAL_I2C_MspInit+0x178>)
 800091e:	f000 fc3f 	bl	80011a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_I2C_MspInit+0x16c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_I2C_MspInit+0x16c>)
 800092c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_I2C_MspInit+0x16c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2105      	movs	r1, #5
 8000942:	2021      	movs	r0, #33	; 0x21
 8000944:	f000 fbd2 	bl	80010ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000948:	2021      	movs	r0, #33	; 0x21
 800094a:	f000 fbeb 	bl	8001124 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2105      	movs	r1, #5
 8000952:	2022      	movs	r0, #34	; 0x22
 8000954:	f000 fbca 	bl	80010ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000958:	2022      	movs	r0, #34	; 0x22
 800095a:	f000 fbe3 	bl	8001124 <HAL_NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40005400 	.word	0x40005400
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400
 8000974:	40005800 	.word	0x40005800
 8000978:	40020800 	.word	0x40020800

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 faba 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f80e 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f7ff fe6e 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800098c:	f000 f996 	bl	8000cbc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000990:	f7ff feda 	bl	8000748 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000994:	f7ff ff06 	bl	80007a4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000998:	f7ff fe02 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800099c:	f003 ffc0 	bl	8004920 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <main+0x24>
	...

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2234      	movs	r2, #52	; 0x34
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f006 fd70 	bl	8007498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <SystemClock_Config+0xdc>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a2b      	ldr	r2, [pc, #172]	; (8000a80 <SystemClock_Config+0xdc>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <SystemClock_Config+0xdc>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <SystemClock_Config+0xe0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <SystemClock_Config+0xe0>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <SystemClock_Config+0xe0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a18:	23b4      	movs	r3, #180	; 0xb4
 8000a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 ff51 	bl	80038d4 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a38:	f000 f838 	bl	8000aac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a3c:	f002 fb7e 	bl	800313c <HAL_PWREx_EnableOverDrive>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a46:	f000 f831 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2105      	movs	r1, #5
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 fbb7 	bl	80031dc <HAL_RCC_ClockConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a74:	f000 f81a 	bl	8000aac <Error_Handler>
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3750      	adds	r7, #80	; 0x50
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40007000 	.word	0x40007000

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 fa4f 	bl	8000f3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40002000 	.word	0x40002000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_MspInit+0x54>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <HAL_MspInit+0x54>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x54>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_MspInit+0x54>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_MspInit+0x54>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_MspInit+0x54>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	210f      	movs	r1, #15
 8000afa:	f06f 0001 	mvn.w	r0, #1
 8000afe:	f000 faf5 	bl	80010ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <HAL_InitTick+0xe4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a32      	ldr	r2, [pc, #200]	; (8000bf4 <HAL_InitTick+0xe4>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <HAL_InitTick+0xe4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b3c:	f107 0210 	add.w	r2, r7, #16
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fc62 	bl	8003410 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d103      	bne.n	8000b5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b56:	f002 fc33 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8000b5a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b5c:	e004      	b.n	8000b68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b5e:	f002 fc2f 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8000b62:	4603      	mov	r3, r0
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6a:	4a23      	ldr	r2, [pc, #140]	; (8000bf8 <HAL_InitTick+0xe8>)
 8000b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b70:	0c9b      	lsrs	r3, r3, #18
 8000b72:	3b01      	subs	r3, #1
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_InitTick+0xec>)
 8000b78:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <HAL_InitTick+0xf0>)
 8000b7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_InitTick+0xec>)
 8000b7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b82:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b84:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <HAL_InitTick+0xec>)
 8000b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b88:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_InitTick+0xec>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_InitTick+0xec>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_InitTick+0xec>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b9c:	4817      	ldr	r0, [pc, #92]	; (8000bfc <HAL_InitTick+0xec>)
 8000b9e:	f003 f937 	bl	8003e10 <HAL_TIM_Base_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d11b      	bne.n	8000be8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000bb0:	4812      	ldr	r0, [pc, #72]	; (8000bfc <HAL_InitTick+0xec>)
 8000bb2:	f003 f987 	bl	8003ec4 <HAL_TIM_Base_Start_IT>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d111      	bne.n	8000be8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000bc4:	202d      	movs	r0, #45	; 0x2d
 8000bc6:	f000 faad 	bl	8001124 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d808      	bhi.n	8000be2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	202d      	movs	r0, #45	; 0x2d
 8000bd6:	f000 fa89 	bl	80010ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_InitTick+0xf4>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	e002      	b.n	8000be8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3738      	adds	r7, #56	; 0x38
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	200008c8 	.word	0x200008c8
 8000c00:	40002000 	.word	0x40002000
 8000c04:	20000004 	.word	0x20000004

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <I2C1_EV_IRQHandler+0x10>)
 8000c3a:	f000 fda3 	bl	8001784 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000820 	.word	0x20000820

08000c48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <I2C1_ER_IRQHandler+0x10>)
 8000c4e:	f000 ff0a 	bl	8001a66 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000820 	.word	0x20000820

08000c5c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <I2C2_EV_IRQHandler+0x10>)
 8000c62:	f000 fd8f 	bl	8001784 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000874 	.word	0x20000874

08000c70 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <I2C2_ER_IRQHandler+0x10>)
 8000c76:	f000 fef6 	bl	8001a66 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000874 	.word	0x20000874

08000c84 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c8a:	f003 f98b 	bl	8003fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200008c8 	.word	0x200008c8

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_USART2_UART_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	f003 fb3a 	bl	800436c <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f7ff fed5 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000910 	.word	0x20000910
 8000d0c:	40004400 	.word	0x40004400

08000d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_UART_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_UART_MspInit+0x8c>)
 8000d86:	f000 fa0b 	bl	80011a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da6:	490e      	ldr	r1, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dbc:	4c0b      	ldr	r4, [pc, #44]	; (8000dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ff65 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f006 fb31 	bl	8007434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fdd3 	bl	800097c <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000de4:	08007714 	.word	0x08007714
  ldr r2, =_sbss
 8000de8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dec:	20008bfc 	.word	0x20008bfc

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>

08000df2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d104      	bne.n	8000e0a <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
 8000e04:	f7ff fe52 	bl	8000aac <Error_Handler>
 8000e08:	e7fe      	b.n	8000e08 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7a1b      	ldrb	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d904      	bls.n	8000e1c <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e12:	b672      	cpsid	i
}
 8000e14:	bf00      	nop
 8000e16:	f7ff fe49 	bl	8000aac <Error_Handler>
 8000e1a:	e7fe      	b.n	8000e1a <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7a1b      	ldrb	r3, [r3, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	b2d1      	uxtb	r1, r2
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	7211      	strb	r1, [r2, #8]
 8000e28:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8000e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e32:	f383 8811 	msr	BASEPRI, r3
 8000e36:	f3bf 8f6f 	isb	sy
 8000e3a:	f3bf 8f4f 	dsb	sy
 8000e3e:	60fa      	str	r2, [r7, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d104      	bne.n	8000e6a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
 8000e64:	f7ff fe22 	bl	8000aac <Error_Handler>
 8000e68:	e7fe      	b.n	8000e68 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7a1b      	ldrb	r3, [r3, #8]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7a1b      	ldrb	r3, [r3, #8]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d904      	bls.n	8000e88 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7e:	b672      	cpsid	i
}
 8000e80:	bf00      	nop
 8000e82:	f7ff fe13 	bl	8000aac <Error_Handler>
 8000e86:	e7fe      	b.n	8000e86 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7a1b      	ldrb	r3, [r3, #8]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e94:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000e9c:	bf00      	nop
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d104      	bne.n	8000ebe <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
 8000eb8:	f7ff fdf8 	bl	8000aac <Error_Handler>
 8000ebc:	e7fe      	b.n	8000ebc <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff96 	bl	8000df2 <stm32_lock_acquire>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d104      	bne.n	8000ee6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
 8000ee0:	f7ff fde4 	bl	8000aac <Error_Handler>
 8000ee4:	e7fe      	b.n	8000ee4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ffb2 	bl	8000e52 <stm32_lock_release>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f8d8 	bl	80010d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	200f      	movs	r0, #15
 8000f28:	f7ff fdf2 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fdc4 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000960 	.word	0x20000960

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000960 	.word	0x20000960

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff4c 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fe:	f7ff ff61 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001102:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff ffb1 	bl	8001070 <NVIC_EncodePriority>
 800110e:	4602      	mov	r2, r0
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff80 	bl	800101c <__NVIC_SetPriority>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff54 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d004      	beq.n	800115e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00c      	b.n	8001178 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2205      	movs	r2, #5
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001192:	b2db      	uxtb	r3, r3
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e165      	b.n	8001488 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8154 	bne.w	8001482 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d005      	beq.n	80011f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b03      	cmp	r3, #3
 800125e:	d017      	beq.n	8001290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d123      	bne.n	80012e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	69b9      	ldr	r1, [r7, #24]
 80012e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0203 	and.w	r2, r3, #3
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80ae 	beq.w	8001482 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_GPIO_Init+0x300>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a5c      	ldr	r2, [pc, #368]	; (80014a0 <HAL_GPIO_Init+0x300>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b5a      	ldr	r3, [pc, #360]	; (80014a0 <HAL_GPIO_Init+0x300>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001342:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <HAL_GPIO_Init+0x304>)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <HAL_GPIO_Init+0x308>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d025      	beq.n	80013ba <HAL_GPIO_Init+0x21a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4e      	ldr	r2, [pc, #312]	; (80014ac <HAL_GPIO_Init+0x30c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01f      	beq.n	80013b6 <HAL_GPIO_Init+0x216>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4d      	ldr	r2, [pc, #308]	; (80014b0 <HAL_GPIO_Init+0x310>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d019      	beq.n	80013b2 <HAL_GPIO_Init+0x212>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <HAL_GPIO_Init+0x314>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x20e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_GPIO_Init+0x318>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x20a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4a      	ldr	r2, [pc, #296]	; (80014bc <HAL_GPIO_Init+0x31c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x206>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <HAL_GPIO_Init+0x320>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x202>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00c      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00a      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x304>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <HAL_GPIO_Init+0x324>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <HAL_GPIO_Init+0x324>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_GPIO_Init+0x324>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_GPIO_Init+0x324>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f ae96 	bls.w	80011bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e12b      	b.n	8001766 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff f96c 	bl	8000800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2224      	movs	r2, #36	; 0x24
 800152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800154e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800155e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001560:	f001 ff2e 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8001564:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4a81      	ldr	r2, [pc, #516]	; (8001770 <HAL_I2C_Init+0x274>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d807      	bhi.n	8001580 <HAL_I2C_Init+0x84>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4a80      	ldr	r2, [pc, #512]	; (8001774 <HAL_I2C_Init+0x278>)
 8001574:	4293      	cmp	r3, r2
 8001576:	bf94      	ite	ls
 8001578:	2301      	movls	r3, #1
 800157a:	2300      	movhi	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	e006      	b.n	800158e <HAL_I2C_Init+0x92>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4a7d      	ldr	r2, [pc, #500]	; (8001778 <HAL_I2C_Init+0x27c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	bf94      	ite	ls
 8001588:	2301      	movls	r3, #1
 800158a:	2300      	movhi	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0e7      	b.n	8001766 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4a78      	ldr	r2, [pc, #480]	; (800177c <HAL_I2C_Init+0x280>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	0c9b      	lsrs	r3, r3, #18
 80015a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <HAL_I2C_Init+0x274>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d802      	bhi.n	80015d0 <HAL_I2C_Init+0xd4>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	3301      	adds	r3, #1
 80015ce:	e009      	b.n	80015e4 <HAL_I2C_Init+0xe8>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	4a69      	ldr	r2, [pc, #420]	; (8001780 <HAL_I2C_Init+0x284>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	099b      	lsrs	r3, r3, #6
 80015e2:	3301      	adds	r3, #1
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	430b      	orrs	r3, r1
 80015ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	495c      	ldr	r1, [pc, #368]	; (8001770 <HAL_I2C_Init+0x274>)
 8001600:	428b      	cmp	r3, r1
 8001602:	d819      	bhi.n	8001638 <HAL_I2C_Init+0x13c>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1e59      	subs	r1, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001618:	400b      	ands	r3, r1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00a      	beq.n	8001634 <HAL_I2C_Init+0x138>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1e59      	subs	r1, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fbb1 f3f3 	udiv	r3, r1, r3
 800162c:	3301      	adds	r3, #1
 800162e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001632:	e051      	b.n	80016d8 <HAL_I2C_Init+0x1dc>
 8001634:	2304      	movs	r3, #4
 8001636:	e04f      	b.n	80016d8 <HAL_I2C_Init+0x1dc>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d111      	bne.n	8001664 <HAL_I2C_Init+0x168>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	440b      	add	r3, r1
 800164e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf0c      	ite	eq
 800165c:	2301      	moveq	r3, #1
 800165e:	2300      	movne	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	e012      	b.n	800168a <HAL_I2C_Init+0x18e>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e58      	subs	r0, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	0099      	lsls	r1, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	fbb0 f3f3 	udiv	r3, r0, r3
 800167a:	3301      	adds	r3, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Init+0x196>
 800168e:	2301      	movs	r3, #1
 8001690:	e022      	b.n	80016d8 <HAL_I2C_Init+0x1dc>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10e      	bne.n	80016b8 <HAL_I2C_Init+0x1bc>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1e58      	subs	r0, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6859      	ldr	r1, [r3, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	440b      	add	r3, r1
 80016a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b6:	e00f      	b.n	80016d8 <HAL_I2C_Init+0x1dc>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1e58      	subs	r0, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	0099      	lsls	r1, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	6809      	ldr	r1, [r1, #0]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69da      	ldr	r2, [r3, #28]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6911      	ldr	r1, [r2, #16]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68d2      	ldr	r2, [r2, #12]
 8001712:	4311      	orrs	r1, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	430b      	orrs	r3, r1
 800171a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2220      	movs	r2, #32
 8001752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	000186a0 	.word	0x000186a0
 8001774:	001e847f 	.word	0x001e847f
 8001778:	003d08ff 	.word	0x003d08ff
 800177c:	431bde83 	.word	0x431bde83
 8001780:	10624dd3 	.word	0x10624dd3

08001784 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d003      	beq.n	80017bc <HAL_I2C_EV_IRQHandler+0x38>
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b40      	cmp	r3, #64	; 0x40
 80017b8:	f040 80c1 	bne.w	800193e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80017dc:	d003      	beq.n	80017e6 <HAL_I2C_EV_IRQHandler+0x62>
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80017e4:	d101      	bne.n	80017ea <HAL_I2C_EV_IRQHandler+0x66>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_I2C_EV_IRQHandler+0x68>
 80017ea:	2300      	movs	r3, #0
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	f000 8132 	beq.w	8001a56 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00c      	beq.n	8001816 <HAL_I2C_EV_IRQHandler+0x92>
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	0a5b      	lsrs	r3, r3, #9
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f001 fc7b 	bl	8003104 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fd83 	bl	800231a <I2C_Master_SB>
 8001814:	e092      	b.n	800193c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	08db      	lsrs	r3, r3, #3
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_I2C_EV_IRQHandler+0xb2>
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	0a5b      	lsrs	r3, r3, #9
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fdf9 	bl	8002426 <I2C_Master_ADD10>
 8001834:	e082      	b.n	800193c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <HAL_I2C_EV_IRQHandler+0xd2>
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	0a5b      	lsrs	r3, r3, #9
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fe13 	bl	800247a <I2C_Master_ADDR>
 8001854:	e072      	b.n	800193c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d03b      	beq.n	80018da <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800186c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001870:	f000 80f3 	beq.w	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	09db      	lsrs	r3, r3, #7
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00f      	beq.n	80018a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	0a9b      	lsrs	r3, r3, #10
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f9f3 	bl	8001c84 <I2C_MasterTransmit_TXE>
 800189e:	e04d      	b.n	800193c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80d6 	beq.w	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	0a5b      	lsrs	r3, r3, #9
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 80cf 	beq.w	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80018bc:	7bbb      	ldrb	r3, [r7, #14]
 80018be:	2b21      	cmp	r3, #33	; 0x21
 80018c0:	d103      	bne.n	80018ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fa7a 	bl	8001dbc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018c8:	e0c7      	b.n	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b40      	cmp	r3, #64	; 0x40
 80018ce:	f040 80c4 	bne.w	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fae8 	bl	8001ea8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d8:	e0bf      	b.n	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e8:	f000 80b7 	beq.w	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00f      	beq.n	8001918 <HAL_I2C_EV_IRQHandler+0x194>
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <HAL_I2C_EV_IRQHandler+0x194>
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d103      	bne.n	8001918 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 fb5d 	bl	8001fd0 <I2C_MasterReceive_RXNE>
 8001916:	e011      	b.n	800193c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 809a 	beq.w	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	0a5b      	lsrs	r3, r3, #9
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8093 	beq.w	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fc06 	bl	8002146 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800193a:	e08e      	b.n	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
 800193c:	e08d      	b.n	8001a5a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e007      	b.n	8001960 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d012      	beq.n	8001992 <HAL_I2C_EV_IRQHandler+0x20e>
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	0a5b      	lsrs	r3, r3, #9
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001988:	69b9      	ldr	r1, [r7, #24]
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 ffc4 	bl	8002918 <I2C_Slave_ADDR>
 8001990:	e066      	b.n	8001a60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_I2C_EV_IRQHandler+0x22e>
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	0a5b      	lsrs	r3, r3, #9
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fffe 	bl	80029ac <I2C_Slave_STOPF>
 80019b0:	e056      	b.n	8001a60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019b2:	7bbb      	ldrb	r3, [r7, #14]
 80019b4:	2b21      	cmp	r3, #33	; 0x21
 80019b6:	d002      	beq.n	80019be <HAL_I2C_EV_IRQHandler+0x23a>
 80019b8:	7bbb      	ldrb	r3, [r7, #14]
 80019ba:	2b29      	cmp	r3, #41	; 0x29
 80019bc:	d125      	bne.n	8001a0a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	09db      	lsrs	r3, r3, #7
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00f      	beq.n	80019ea <HAL_I2C_EV_IRQHandler+0x266>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	0a9b      	lsrs	r3, r3, #10
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_I2C_EV_IRQHandler+0x266>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 feda 	bl	800279c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019e8:	e039      	b.n	8001a5e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d033      	beq.n	8001a5e <HAL_I2C_EV_IRQHandler+0x2da>
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	0a5b      	lsrs	r3, r3, #9
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d02d      	beq.n	8001a5e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 ff07 	bl	8002816 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a08:	e029      	b.n	8001a5e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00f      	beq.n	8001a36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	0a9b      	lsrs	r3, r3, #10
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 ff12 	bl	8002858 <I2C_SlaveReceive_RXNE>
 8001a34:	e014      	b.n	8001a60 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00e      	beq.n	8001a60 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	0a5b      	lsrs	r3, r3, #9
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 ff40 	bl	80028d4 <I2C_SlaveReceive_BTF>
 8001a54:	e004      	b.n	8001a60 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001a56:	bf00      	nop
 8001a58:	e002      	b.n	8001a60 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a5a:	bf00      	nop
 8001a5c:	e000      	b.n	8001a60 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a5e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b08a      	sub	sp, #40	; 0x28
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a88:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00e      	beq.n	8001ab4 <HAL_I2C_ER_IRQHandler+0x4e>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ab2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	0a5b      	lsrs	r3, r3, #9
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00e      	beq.n	8001ade <HAL_I2C_ER_IRQHandler+0x78>
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001adc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	0a9b      	lsrs	r3, r3, #10
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03f      	beq.n	8001b6a <HAL_I2C_ER_IRQHandler+0x104>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d039      	beq.n	8001b6a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001af6:	7efb      	ldrb	r3, [r7, #27]
 8001af8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b08:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b10:	7ebb      	ldrb	r3, [r7, #26]
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d112      	bne.n	8001b3c <HAL_I2C_ER_IRQHandler+0xd6>
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10f      	bne.n	8001b3c <HAL_I2C_ER_IRQHandler+0xd6>
 8001b1c:	7cfb      	ldrb	r3, [r7, #19]
 8001b1e:	2b21      	cmp	r3, #33	; 0x21
 8001b20:	d008      	beq.n	8001b34 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b22:	7cfb      	ldrb	r3, [r7, #19]
 8001b24:	2b29      	cmp	r3, #41	; 0x29
 8001b26:	d005      	beq.n	8001b34 <HAL_I2C_ER_IRQHandler+0xce>
 8001b28:	7cfb      	ldrb	r3, [r7, #19]
 8001b2a:	2b28      	cmp	r3, #40	; 0x28
 8001b2c:	d106      	bne.n	8001b3c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b21      	cmp	r3, #33	; 0x21
 8001b32:	d103      	bne.n	8001b3c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f001 f869 	bl	8002c0c <I2C_Slave_AF>
 8001b3a:	e016      	b.n	8001b6a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b44:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b4e:	7efb      	ldrb	r3, [r7, #27]
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d002      	beq.n	8001b5a <HAL_I2C_ER_IRQHandler+0xf4>
 8001b54:	7efb      	ldrb	r3, [r7, #27]
 8001b56:	2b40      	cmp	r3, #64	; 0x40
 8001b58:	d107      	bne.n	8001b6a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b68:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	0adb      	lsrs	r3, r3, #11
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00e      	beq.n	8001b94 <HAL_I2C_ER_IRQHandler+0x12e>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	f043 0308 	orr.w	r3, r3, #8
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001b92:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f001 f8a0 	bl	8002cec <I2C_ITError>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
 8001c10:	4613      	mov	r3, r2
 8001c12:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d150      	bne.n	8001d4c <I2C_MasterTransmit_TXE+0xc8>
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b21      	cmp	r3, #33	; 0x21
 8001cae:	d14d      	bne.n	8001d4c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d01d      	beq.n	8001cf2 <I2C_MasterTransmit_TXE+0x6e>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d01a      	beq.n	8001cf2 <I2C_MasterTransmit_TXE+0x6e>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cc2:	d016      	beq.n	8001cf2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cd2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2211      	movs	r2, #17
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff62 	bl	8001bb4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cf0:	e060      	b.n	8001db4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d00:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d10:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b40      	cmp	r3, #64	; 0x40
 8001d2a:	d107      	bne.n	8001d3c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff7d 	bl	8001c34 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d3a:	e03b      	b.n	8001db4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff35 	bl	8001bb4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d4a:	e033      	b.n	8001db4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	2b21      	cmp	r3, #33	; 0x21
 8001d50:	d005      	beq.n	8001d5e <I2C_MasterTransmit_TXE+0xda>
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	2b40      	cmp	r3, #64	; 0x40
 8001d56:	d12d      	bne.n	8001db4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b22      	cmp	r3, #34	; 0x22
 8001d5c:	d12a      	bne.n	8001db4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d108      	bne.n	8001d7a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d76:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001d78:	e01c      	b.n	8001db4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b40      	cmp	r3, #64	; 0x40
 8001d84:	d103      	bne.n	8001d8e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f88e 	bl	8001ea8 <I2C_MemoryTransmit_TXE_BTF>
}
 8001d8c:	e012      	b.n	8001db4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001db2:	e7ff      	b.n	8001db4 <I2C_MasterTransmit_TXE+0x130>
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b21      	cmp	r3, #33	; 0x21
 8001dd4:	d164      	bne.n	8001ea0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d012      	beq.n	8001e06 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e04:	e04c      	b.n	8001ea0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d01d      	beq.n	8001e48 <I2C_MasterTransmit_BTF+0x8c>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d01a      	beq.n	8001e48 <I2C_MasterTransmit_BTF+0x8c>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e18:	d016      	beq.n	8001e48 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e28:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2211      	movs	r2, #17
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff feb7 	bl	8001bb4 <HAL_I2C_MasterTxCpltCallback>
}
 8001e46:	e02b      	b.n	8001ea0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e56:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b40      	cmp	r3, #64	; 0x40
 8001e80:	d107      	bne.n	8001e92 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fed2 	bl	8001c34 <HAL_I2C_MemTxCpltCallback>
}
 8001e90:	e006      	b.n	8001ea0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fe8a 	bl	8001bb4 <HAL_I2C_MasterTxCpltCallback>
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11d      	bne.n	8001efc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10b      	bne.n	8001ee0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed8:	1c9a      	adds	r2, r3, #2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001ede:	e073      	b.n	8001fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	121b      	asrs	r3, r3, #8
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001efa:	e065      	b.n	8001fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d10b      	bne.n	8001f1c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f1a:	e055      	b.n	8001fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d151      	bne.n	8001fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b22      	cmp	r3, #34	; 0x22
 8001f28:	d10d      	bne.n	8001f46 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f38:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f44:	e040      	b.n	8001fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d015      	beq.n	8001f7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b21      	cmp	r3, #33	; 0x21
 8001f54:	d112      	bne.n	8001f7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	781a      	ldrb	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f7a:	e025      	b.n	8001fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d120      	bne.n	8001fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b21      	cmp	r3, #33	; 0x21
 8001f8a:	d11d      	bne.n	8001fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f9a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001faa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fe36 	bl	8001c34 <HAL_I2C_MemTxCpltCallback>
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b22      	cmp	r3, #34	; 0x22
 8001fe2:	f040 80ac 	bne.w	800213e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d921      	bls.n	8002038 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b03      	cmp	r3, #3
 8002022:	f040 808c 	bne.w	800213e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002034:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002036:	e082      	b.n	800213e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	2b02      	cmp	r3, #2
 800203e:	d075      	beq.n	800212c <I2C_MasterReceive_RXNE+0x15c>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d002      	beq.n	800204c <I2C_MasterReceive_RXNE+0x7c>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d16f      	bne.n	800212c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f001 f827 	bl	80030a0 <I2C_WaitOnSTOPRequestThroughIT>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d142      	bne.n	80020de <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002066:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002076:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b40      	cmp	r3, #64	; 0x40
 80020b0:	d10a      	bne.n	80020c8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fdc1 	bl	8001c48 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020c6:	e03a      	b.n	800213e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2212      	movs	r2, #18
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fd76 	bl	8001bc8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020dc:	e02f      	b.n	800213e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff fd99 	bl	8001c5c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800212a:	e008      	b.n	800213e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213a:	605a      	str	r2, [r3, #4]
}
 800213c:	e7ff      	b.n	800213e <I2C_MasterReceive_RXNE+0x16e>
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b04      	cmp	r3, #4
 800215c:	d11b      	bne.n	8002196 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002194:	e0bd      	b.n	8002312 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b03      	cmp	r3, #3
 800219e:	d129      	bne.n	80021f4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d00a      	beq.n	80021cc <I2C_MasterReceive_BTF+0x86>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d007      	beq.n	80021cc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021f2:	e08e      	b.n	8002312 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d176      	bne.n	80022ec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d002      	beq.n	800220a <I2C_MasterReceive_BTF+0xc4>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d108      	bne.n	800221c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e019      	b.n	8002250 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d002      	beq.n	8002228 <I2C_MasterReceive_BTF+0xe2>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d108      	bne.n	800223a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e00a      	b.n	8002250 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b10      	cmp	r3, #16
 800223e:	d007      	beq.n	8002250 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	d10a      	bne.n	80022d6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fcba 	bl	8001c48 <HAL_I2C_MemRxCpltCallback>
}
 80022d4:	e01d      	b.n	8002312 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2212      	movs	r2, #18
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fc6f 	bl	8001bc8 <HAL_I2C_MasterRxCpltCallback>
}
 80022ea:	e012      	b.n	8002312 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d117      	bne.n	800235e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002346:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002348:	e067      	b.n	800241a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	611a      	str	r2, [r3, #16]
}
 800235c:	e05d      	b.n	800241a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002366:	d133      	bne.n	80023d0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b21      	cmp	r3, #33	; 0x21
 8002372:	d109      	bne.n	8002388 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	e008      	b.n	800239a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <I2C_Master_SB+0x92>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d108      	bne.n	80023be <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d032      	beq.n	800241a <I2C_Master_SB+0x100>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02d      	beq.n	800241a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023cc:	605a      	str	r2, [r3, #4]
}
 80023ce:	e024      	b.n	800241a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10e      	bne.n	80023f6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	b29b      	uxth	r3, r3
 80023de:	11db      	asrs	r3, r3, #7
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f003 0306 	and.w	r3, r3, #6
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f063 030f 	orn	r3, r3, #15
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	611a      	str	r2, [r3, #16]
}
 80023f4:	e011      	b.n	800241a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10d      	bne.n	800241a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	b29b      	uxth	r3, r3
 8002404:	11db      	asrs	r3, r3, #7
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f003 0306 	and.w	r3, r3, #6
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f063 030e 	orn	r3, r3, #14
 8002412:	b2da      	uxtb	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	611a      	str	r2, [r3, #16]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	b2da      	uxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <I2C_Master_ADD10+0x26>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d108      	bne.n	800245e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00c      	beq.n	800246e <I2C_Master_ADD10+0x48>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246c:	605a      	str	r2, [r3, #4]
  }
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800247a:	b480      	push	{r7}
 800247c:	b091      	sub	sp, #68	; 0x44
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002488:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b22      	cmp	r3, #34	; 0x22
 80024a2:	f040 8169 	bne.w	8002778 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <I2C_Master_ADDR+0x54>
 80024ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024b2:	2b40      	cmp	r3, #64	; 0x40
 80024b4:	d10b      	bne.n	80024ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	e160      	b.n	8002790 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11d      	bne.n	8002512 <I2C_Master_ADDR+0x98>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024de:	d118      	bne.n	8002512 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002504:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	651a      	str	r2, [r3, #80]	; 0x50
 8002510:	e13e      	b.n	8002790 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d113      	bne.n	8002544 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e115      	b.n	8002770 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	f040 808a 	bne.w	8002664 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002552:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002556:	d137      	bne.n	80025c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002566:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002576:	d113      	bne.n	80025a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002586:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	e0e7      	b.n	8002770 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	623b      	str	r3, [r7, #32]
 80025b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e0d3      	b.n	8002770 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d02e      	beq.n	800262c <I2C_Master_ADDR+0x1b2>
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d02b      	beq.n	800262c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	2b12      	cmp	r3, #18
 80025d8:	d102      	bne.n	80025e0 <I2C_Master_ADDR+0x166>
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d125      	bne.n	800262c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d00e      	beq.n	8002604 <I2C_Master_ADDR+0x18a>
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d00b      	beq.n	8002604 <I2C_Master_ADDR+0x18a>
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d008      	beq.n	8002604 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e007      	b.n	8002614 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002612:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	e0a1      	b.n	8002770 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e085      	b.n	8002770 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d14d      	bne.n	800270a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	2b04      	cmp	r3, #4
 8002672:	d016      	beq.n	80026a2 <I2C_Master_ADDR+0x228>
 8002674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002676:	2b02      	cmp	r3, #2
 8002678:	d013      	beq.n	80026a2 <I2C_Master_ADDR+0x228>
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	2b10      	cmp	r3, #16
 800267e:	d010      	beq.n	80026a2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e007      	b.n	80026b2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026b0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c0:	d117      	bne.n	80026f2 <I2C_Master_ADDR+0x278>
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026c8:	d00b      	beq.n	80026e2 <I2C_Master_ADDR+0x268>
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d008      	beq.n	80026e2 <I2C_Master_ADDR+0x268>
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d005      	beq.n	80026e2 <I2C_Master_ADDR+0x268>
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d002      	beq.n	80026e2 <I2C_Master_ADDR+0x268>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d107      	bne.n	80026f2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	e032      	b.n	8002770 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002718:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002728:	d117      	bne.n	800275a <I2C_Master_ADDR+0x2e0>
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002730:	d00b      	beq.n	800274a <I2C_Master_ADDR+0x2d0>
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	2b01      	cmp	r3, #1
 8002736:	d008      	beq.n	800274a <I2C_Master_ADDR+0x2d0>
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	2b08      	cmp	r3, #8
 800273c:	d005      	beq.n	800274a <I2C_Master_ADDR+0x2d0>
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	2b10      	cmp	r3, #16
 8002742:	d002      	beq.n	800274a <I2C_Master_ADDR+0x2d0>
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	2b20      	cmp	r3, #32
 8002748:	d107      	bne.n	800275a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002758:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002776:	e00b      	b.n	8002790 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
}
 800278e:	e7ff      	b.n	8002790 <I2C_Master_ADDR+0x316>
 8002790:	bf00      	nop
 8002792:	3744      	adds	r7, #68	; 0x44
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d02b      	beq.n	800280e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d114      	bne.n	800280e <I2C_SlaveTransmit_TXE+0x72>
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b29      	cmp	r3, #41	; 0x29
 80027e8:	d111      	bne.n	800280e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2221      	movs	r2, #33	; 0x21
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2228      	movs	r2, #40	; 0x28
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff f9e7 	bl	8001bdc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d011      	beq.n	800284c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002866:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d02c      	beq.n	80028cc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d114      	bne.n	80028cc <I2C_SlaveReceive_RXNE+0x74>
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b2a      	cmp	r3, #42	; 0x2a
 80028a6:	d111      	bne.n	80028cc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2222      	movs	r2, #34	; 0x22
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2228      	movs	r2, #40	; 0x28
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff f992 	bl	8001bf0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002932:	2b28      	cmp	r3, #40	; 0x28
 8002934:	d127      	bne.n	8002986 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002944:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	09db      	lsrs	r3, r3, #7
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	81bb      	strh	r3, [r7, #12]
 8002968:	e002      	b.n	8002970 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002978:	89ba      	ldrh	r2, [r7, #12]
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff f940 	bl	8001c04 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002984:	e00e      	b.n	80029a4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a08:	d172      	bne.n	8002af0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b22      	cmp	r3, #34	; 0x22
 8002a0e:	d002      	beq.n	8002a16 <I2C_Slave_STOPF+0x6a>
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b2a      	cmp	r3, #42	; 0x2a
 8002a14:	d135      	bne.n	8002a82 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0204 	orr.w	r2, r3, #4
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fb98 	bl	8001184 <HAL_DMA_GetState>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d049      	beq.n	8002aee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	4a69      	ldr	r2, [pc, #420]	; (8002c04 <I2C_Slave_STOPF+0x258>)
 8002a60:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fb6a 	bl	8001140 <HAL_DMA_Abort_IT>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d03d      	beq.n	8002aee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a80:	e035      	b.n	8002aee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0204 	orr.w	r2, r3, #4
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fb62 	bl	8001184 <HAL_DMA_GetState>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d014      	beq.n	8002af0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	4a4e      	ldr	r2, [pc, #312]	; (8002c04 <I2C_Slave_STOPF+0x258>)
 8002acc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fb34 	bl	8001140 <HAL_DMA_Abort_IT>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4798      	blx	r3
 8002aec:	e000      	b.n	8002af0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002aee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d03e      	beq.n	8002b78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d112      	bne.n	8002b2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d112      	bne.n	8002b62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8b3 	bl	8002cec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b86:	e039      	b.n	8002bfc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b8c:	d109      	bne.n	8002ba2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2228      	movs	r2, #40	; 0x28
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff f827 	bl	8001bf0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b28      	cmp	r3, #40	; 0x28
 8002bac:	d111      	bne.n	8002bd2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <I2C_Slave_STOPF+0x25c>)
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff f828 	bl	8001c20 <HAL_I2C_ListenCpltCallback>
}
 8002bd0:	e014      	b.n	8002bfc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	2b22      	cmp	r3, #34	; 0x22
 8002bd8:	d002      	beq.n	8002be0 <I2C_Slave_STOPF+0x234>
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b22      	cmp	r3, #34	; 0x22
 8002bde:	d10d      	bne.n	8002bfc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fffa 	bl	8001bf0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	08002f51 	.word	0x08002f51
 8002c08:	ffff0000 	.word	0xffff0000

08002c0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d002      	beq.n	8002c2e <I2C_Slave_AF+0x22>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d129      	bne.n	8002c82 <I2C_Slave_AF+0x76>
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b28      	cmp	r3, #40	; 0x28
 8002c32:	d126      	bne.n	8002c82 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a2c      	ldr	r2, [pc, #176]	; (8002ce8 <I2C_Slave_AF+0xdc>)
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c48:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c52:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe ffd0 	bl	8001c20 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c80:	e02e      	b.n	8002ce0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b21      	cmp	r3, #33	; 0x21
 8002c86:	d126      	bne.n	8002cd6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <I2C_Slave_AF+0xdc>)
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2221      	movs	r2, #33	; 0x21
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cb2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cbc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ccc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fe ff84 	bl	8001bdc <HAL_I2C_SlaveTxCpltCallback>
}
 8002cd4:	e004      	b.n	8002ce0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cde:	615a      	str	r2, [r3, #20]
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	ffff0000 	.word	0xffff0000

08002cec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d04:	7bbb      	ldrb	r3, [r7, #14]
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d002      	beq.n	8002d10 <I2C_ITError+0x24>
 8002d0a:	7bbb      	ldrb	r3, [r7, #14]
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d10a      	bne.n	8002d26 <I2C_ITError+0x3a>
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b22      	cmp	r3, #34	; 0x22
 8002d14:	d107      	bne.n	8002d26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d2c:	2b28      	cmp	r3, #40	; 0x28
 8002d2e:	d107      	bne.n	8002d40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2228      	movs	r2, #40	; 0x28
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d3e:	e015      	b.n	8002d6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d4e:	d00a      	beq.n	8002d66 <I2C_ITError+0x7a>
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b60      	cmp	r3, #96	; 0x60
 8002d54:	d007      	beq.n	8002d66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7a:	d162      	bne.n	8002e42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d020      	beq.n	8002ddc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	4a6a      	ldr	r2, [pc, #424]	; (8002f48 <I2C_ITError+0x25c>)
 8002da0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe f9ca 	bl	8001140 <HAL_DMA_Abort_IT>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8089 	beq.w	8002ec6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4798      	blx	r3
 8002dda:	e074      	b.n	8002ec6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	4a59      	ldr	r2, [pc, #356]	; (8002f48 <I2C_ITError+0x25c>)
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe f9a9 	bl	8001140 <HAL_DMA_Abort_IT>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d068      	beq.n	8002ec6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d10b      	bne.n	8002e1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4798      	blx	r3
 8002e40:	e041      	b.n	8002ec6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b60      	cmp	r3, #96	; 0x60
 8002e4c:	d125      	bne.n	8002e9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d10b      	bne.n	8002e82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe feec 	bl	8001c70 <HAL_I2C_AbortCpltCallback>
 8002e98:	e015      	b.n	8002ec6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d10b      	bne.n	8002ec0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fe fecb 	bl	8001c5c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10e      	bne.n	8002ef4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d113      	bne.n	8002f40 <I2C_ITError+0x254>
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b28      	cmp	r3, #40	; 0x28
 8002f1c:	d110      	bne.n	8002f40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <I2C_ITError+0x260>)
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe fe70 	bl	8001c20 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	08002f51 	.word	0x08002f51
 8002f4c:	ffff0000 	.word	0xffff0000

08002f50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f6a:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <I2C_DMAAbort+0x148>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	08db      	lsrs	r3, r3, #3
 8002f70:	4a4a      	ldr	r2, [pc, #296]	; (800309c <I2C_DMAAbort+0x14c>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0a1a      	lsrs	r2, r3, #8
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00da      	lsls	r2, r3, #3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f043 0220 	orr.w	r2, r3, #32
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002f96:	e00a      	b.n	8002fae <I2C_DMAAbort+0x5e>
    }
    count--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fac:	d0ea      	beq.n	8002f84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	2200      	movs	r2, #0
 8002fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	2200      	movs	r2, #0
 8002fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	2200      	movs	r2, #0
 8003002:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b60      	cmp	r3, #96	; 0x60
 800301e:	d10e      	bne.n	800303e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003036:	6978      	ldr	r0, [r7, #20]
 8003038:	f7fe fe1a 	bl	8001c70 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800303c:	e027      	b.n	800308e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003044:	2b28      	cmp	r3, #40	; 0x28
 8003046:	d117      	bne.n	8003078 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003066:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2228      	movs	r2, #40	; 0x28
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003076:	e007      	b.n	8003088 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003088:	6978      	ldr	r0, [r7, #20]
 800308a:	f7fe fde7 	bl	8001c5c <HAL_I2C_ErrorCallback>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000000 	.word	0x20000000
 800309c:	14f8b589 	.word	0x14f8b589

080030a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	0a1a      	lsrs	r2, r3, #8
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d107      	bne.n	80030de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f043 0220 	orr.w	r2, r3, #32
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e008      	b.n	80030f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ec:	d0e9      	beq.n	80030c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20000000 	.word	0x20000000
 8003100:	14f8b589 	.word	0x14f8b589

08003104 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003114:	d103      	bne.n	800311e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800311c:	e007      	b.n	800312e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003126:	d102      	bne.n	800312e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2208      	movs	r2, #8
 800312c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_PWREx_EnableOverDrive+0x90>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003168:	f7fd fefc 	bl	8000f64 <HAL_GetTick>
 800316c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800316e:	e009      	b.n	8003184 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003170:	f7fd fef8 	bl	8000f64 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800317e:	d901      	bls.n	8003184 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e01f      	b.n	80031c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d1ee      	bne.n	8003170 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003198:	f7fd fee4 	bl	8000f64 <HAL_GetTick>
 800319c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800319e:	e009      	b.n	80031b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031a0:	f7fd fee0 	bl	8000f64 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ae:	d901      	bls.n	80031b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e007      	b.n	80031c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031c0:	d1ee      	bne.n	80031a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	420e0040 	.word	0x420e0040
 80031d4:	40007000 	.word	0x40007000
 80031d8:	420e0044 	.word	0x420e0044

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0cc      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d90c      	bls.n	8003218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d044      	beq.n	80032fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d119      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003296:	2b03      	cmp	r3, #3
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032aa:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e067      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4934      	ldr	r1, [pc, #208]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032cc:	f7fd fe4a 	bl	8000f64 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fd fe46 	bl	8000f64 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e04f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d20c      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f887 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fbc4 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	0800768c 	.word	0x0800768c
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	0800769c 	.word	0x0800769c

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffdc 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0b5b      	lsrs	r3, r3, #13
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	0800769c 	.word	0x0800769c

08003410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	220f      	movs	r2, #15
 800341e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_RCC_GetClockConfig+0x60>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40023c00 	.word	0x40023c00

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b0ae      	sub	sp, #184	; 0xb8
 800347a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349a:	4bcb      	ldr	r3, [pc, #812]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	f200 8206 	bhi.w	80038b4 <HAL_RCC_GetSysClockFreq+0x440>
 80034a8:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034e5 	.word	0x080034e5
 80034b4:	080038b5 	.word	0x080038b5
 80034b8:	080038b5 	.word	0x080038b5
 80034bc:	080038b5 	.word	0x080038b5
 80034c0:	080034ed 	.word	0x080034ed
 80034c4:	080038b5 	.word	0x080038b5
 80034c8:	080038b5 	.word	0x080038b5
 80034cc:	080038b5 	.word	0x080038b5
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	080038b5 	.word	0x080038b5
 80034d8:	080038b5 	.word	0x080038b5
 80034dc:	080038b5 	.word	0x080038b5
 80034e0:	080036e5 	.word	0x080036e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4bb9      	ldr	r3, [pc, #740]	; (80037cc <HAL_RCC_GetSysClockFreq+0x358>)
 80034e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80034ea:	e1e7      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ec:	4bb8      	ldr	r3, [pc, #736]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034f2:	e1e3      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f4:	4bb4      	ldr	r3, [pc, #720]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003500:	4bb1      	ldr	r3, [pc, #708]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d071      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350c:	4bae      	ldr	r3, [pc, #696]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	2200      	movs	r2, #0
 8003514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003518:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800351c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003528:	2300      	movs	r3, #0
 800352a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800352e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	f04f 0000 	mov.w	r0, #0
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	0159      	lsls	r1, r3, #5
 8003540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003544:	0150      	lsls	r0, r2, #5
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4621      	mov	r1, r4
 800354c:	1a51      	subs	r1, r2, r1
 800354e:	6439      	str	r1, [r7, #64]	; 0x40
 8003550:	4629      	mov	r1, r5
 8003552:	eb63 0301 	sbc.w	r3, r3, r1
 8003556:	647b      	str	r3, [r7, #68]	; 0x44
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003564:	4649      	mov	r1, r9
 8003566:	018b      	lsls	r3, r1, #6
 8003568:	4641      	mov	r1, r8
 800356a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800356e:	4641      	mov	r1, r8
 8003570:	018a      	lsls	r2, r1, #6
 8003572:	4641      	mov	r1, r8
 8003574:	1a51      	subs	r1, r2, r1
 8003576:	63b9      	str	r1, [r7, #56]	; 0x38
 8003578:	4649      	mov	r1, r9
 800357a:	eb63 0301 	sbc.w	r3, r3, r1
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800358c:	4649      	mov	r1, r9
 800358e:	00cb      	lsls	r3, r1, #3
 8003590:	4641      	mov	r1, r8
 8003592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003596:	4641      	mov	r1, r8
 8003598:	00ca      	lsls	r2, r1, #3
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	4622      	mov	r2, r4
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
 80035a6:	462b      	mov	r3, r5
 80035a8:	460a      	mov	r2, r1
 80035aa:	eb42 0303 	adc.w	r3, r2, r3
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035bc:	4629      	mov	r1, r5
 80035be:	024b      	lsls	r3, r1, #9
 80035c0:	4621      	mov	r1, r4
 80035c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035c6:	4621      	mov	r1, r4
 80035c8:	024a      	lsls	r2, r1, #9
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035e0:	f7fc fe16 	bl	8000210 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4613      	mov	r3, r2
 80035ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035ee:	e067      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f0:	4b75      	ldr	r3, [pc, #468]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003600:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003608:	67bb      	str	r3, [r7, #120]	; 0x78
 800360a:	2300      	movs	r3, #0
 800360c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800360e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	0159      	lsls	r1, r3, #5
 8003620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003624:	0150      	lsls	r0, r2, #5
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4621      	mov	r1, r4
 800362c:	1a51      	subs	r1, r2, r1
 800362e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003630:	4629      	mov	r1, r5
 8003632:	eb63 0301 	sbc.w	r3, r3, r1
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003644:	4649      	mov	r1, r9
 8003646:	018b      	lsls	r3, r1, #6
 8003648:	4641      	mov	r1, r8
 800364a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364e:	4641      	mov	r1, r8
 8003650:	018a      	lsls	r2, r1, #6
 8003652:	4641      	mov	r1, r8
 8003654:	ebb2 0a01 	subs.w	sl, r2, r1
 8003658:	4649      	mov	r1, r9
 800365a:	eb63 0b01 	sbc.w	fp, r3, r1
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800366a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800366e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003672:	4692      	mov	sl, r2
 8003674:	469b      	mov	fp, r3
 8003676:	4623      	mov	r3, r4
 8003678:	eb1a 0303 	adds.w	r3, sl, r3
 800367c:	623b      	str	r3, [r7, #32]
 800367e:	462b      	mov	r3, r5
 8003680:	eb4b 0303 	adc.w	r3, fp, r3
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003692:	4629      	mov	r1, r5
 8003694:	028b      	lsls	r3, r1, #10
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800369c:	4621      	mov	r1, r4
 800369e:	028a      	lsls	r2, r1, #10
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036a8:	2200      	movs	r2, #0
 80036aa:	673b      	str	r3, [r7, #112]	; 0x70
 80036ac:	677a      	str	r2, [r7, #116]	; 0x74
 80036ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80036b2:	f7fc fdad 	bl	8000210 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4613      	mov	r3, r2
 80036bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036c0:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80036d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036e2:	e0eb      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e4:	4b38      	ldr	r3, [pc, #224]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f0:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d06b      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fc:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	2200      	movs	r2, #0
 8003704:	66bb      	str	r3, [r7, #104]	; 0x68
 8003706:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800370a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370e:	663b      	str	r3, [r7, #96]	; 0x60
 8003710:	2300      	movs	r3, #0
 8003712:	667b      	str	r3, [r7, #100]	; 0x64
 8003714:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003718:	4622      	mov	r2, r4
 800371a:	462b      	mov	r3, r5
 800371c:	f04f 0000 	mov.w	r0, #0
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	0159      	lsls	r1, r3, #5
 8003726:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800372a:	0150      	lsls	r0, r2, #5
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4621      	mov	r1, r4
 8003732:	1a51      	subs	r1, r2, r1
 8003734:	61b9      	str	r1, [r7, #24]
 8003736:	4629      	mov	r1, r5
 8003738:	eb63 0301 	sbc.w	r3, r3, r1
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800374a:	4659      	mov	r1, fp
 800374c:	018b      	lsls	r3, r1, #6
 800374e:	4651      	mov	r1, sl
 8003750:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003754:	4651      	mov	r1, sl
 8003756:	018a      	lsls	r2, r1, #6
 8003758:	4651      	mov	r1, sl
 800375a:	ebb2 0801 	subs.w	r8, r2, r1
 800375e:	4659      	mov	r1, fp
 8003760:	eb63 0901 	sbc.w	r9, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003770:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003774:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003778:	4690      	mov	r8, r2
 800377a:	4699      	mov	r9, r3
 800377c:	4623      	mov	r3, r4
 800377e:	eb18 0303 	adds.w	r3, r8, r3
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	462b      	mov	r3, r5
 8003786:	eb49 0303 	adc.w	r3, r9, r3
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003798:	4629      	mov	r1, r5
 800379a:	024b      	lsls	r3, r1, #9
 800379c:	4621      	mov	r1, r4
 800379e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037a2:	4621      	mov	r1, r4
 80037a4:	024a      	lsls	r2, r1, #9
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037ae:	2200      	movs	r2, #0
 80037b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80037b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037b8:	f7fc fd2a 	bl	8000210 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037c6:	e065      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x420>
 80037c8:	40023800 	.word	0x40023800
 80037cc:	00f42400 	.word	0x00f42400
 80037d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d4:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_RCC_GetSysClockFreq+0x458>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	099b      	lsrs	r3, r3, #6
 80037da:	2200      	movs	r2, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	4611      	mov	r1, r2
 80037e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037e4:	653b      	str	r3, [r7, #80]	; 0x50
 80037e6:	2300      	movs	r3, #0
 80037e8:	657b      	str	r3, [r7, #84]	; 0x54
 80037ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80037ee:	4642      	mov	r2, r8
 80037f0:	464b      	mov	r3, r9
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	0159      	lsls	r1, r3, #5
 80037fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003800:	0150      	lsls	r0, r2, #5
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4641      	mov	r1, r8
 8003808:	1a51      	subs	r1, r2, r1
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	4649      	mov	r1, r9
 800380e:	eb63 0301 	sbc.w	r3, r3, r1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003820:	4659      	mov	r1, fp
 8003822:	018b      	lsls	r3, r1, #6
 8003824:	4651      	mov	r1, sl
 8003826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800382a:	4651      	mov	r1, sl
 800382c:	018a      	lsls	r2, r1, #6
 800382e:	4651      	mov	r1, sl
 8003830:	1a54      	subs	r4, r2, r1
 8003832:	4659      	mov	r1, fp
 8003834:	eb63 0501 	sbc.w	r5, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	00eb      	lsls	r3, r5, #3
 8003842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003846:	00e2      	lsls	r2, r4, #3
 8003848:	4614      	mov	r4, r2
 800384a:	461d      	mov	r5, r3
 800384c:	4643      	mov	r3, r8
 800384e:	18e3      	adds	r3, r4, r3
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	464b      	mov	r3, r9
 8003854:	eb45 0303 	adc.w	r3, r5, r3
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003866:	4629      	mov	r1, r5
 8003868:	028b      	lsls	r3, r1, #10
 800386a:	4621      	mov	r1, r4
 800386c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003870:	4621      	mov	r1, r4
 8003872:	028a      	lsls	r2, r1, #10
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800387c:	2200      	movs	r2, #0
 800387e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003880:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003882:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003886:	f7fc fcc3 	bl	8000210 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4613      	mov	r3, r2
 8003890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <HAL_RCC_GetSysClockFreq+0x458>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	0f1b      	lsrs	r3, r3, #28
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80038a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038b2:	e003      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	37b8      	adds	r7, #184	; 0xb8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	00f42400 	.word	0x00f42400

080038d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e28d      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8083 	beq.w	80039fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038f4:	4b94      	ldr	r3, [pc, #592]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d019      	beq.n	8003934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003900:	4b91      	ldr	r3, [pc, #580]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003908:	2b08      	cmp	r3, #8
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800390c:	4b8e      	ldr	r3, [pc, #568]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003918:	d00c      	beq.n	8003934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391a:	4b8b      	ldr	r3, [pc, #556]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d112      	bne.n	800394c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003926:	4b88      	ldr	r3, [pc, #544]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003932:	d10b      	bne.n	800394c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	4b84      	ldr	r3, [pc, #528]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d05b      	beq.n	80039f8 <HAL_RCC_OscConfig+0x124>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d157      	bne.n	80039f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e25a      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d106      	bne.n	8003964 <HAL_RCC_OscConfig+0x90>
 8003956:	4b7c      	ldr	r3, [pc, #496]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a7b      	ldr	r2, [pc, #492]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e01d      	b.n	80039a0 <HAL_RCC_OscConfig+0xcc>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0xb4>
 800396e:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a75      	ldr	r2, [pc, #468]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b73      	ldr	r3, [pc, #460]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a72      	ldr	r2, [pc, #456]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0xcc>
 8003988:	4b6f      	ldr	r3, [pc, #444]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6e      	ldr	r2, [pc, #440]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 800398e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b6c      	ldr	r3, [pc, #432]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a6b      	ldr	r2, [pc, #428]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 800399a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd fadc 	bl	8000f64 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd fad8 	bl	8000f64 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e21f      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0xdc>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd fac8 	bl	8000f64 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fd fac4 	bl	8000f64 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e20b      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ea:	4b57      	ldr	r3, [pc, #348]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x104>
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06f      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a06:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d017      	beq.n	8003a42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a12:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d105      	bne.n	8003a2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d11c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_RCC_OscConfig+0x186>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e1d3      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4937      	ldr	r1, [pc, #220]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	e03a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a78:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_OscConfig+0x278>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fa71 	bl	8000f64 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fd fa6d 	bl	8000f64 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e1b4      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4925      	ldr	r1, [pc, #148]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCC_OscConfig+0x278>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fa50 	bl	8000f64 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fa4c 	bl	8000f64 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e193      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d036      	beq.n	8003b60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd fa30 	bl	8000f64 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fd fa2c 	bl	8000f64 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e173      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x234>
 8003b26:	e01b      	b.n	8003b60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fa19 	bl	8000f64 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	e00e      	b.n	8003b54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fd fa15 	bl	8000f64 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d907      	bls.n	8003b54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e15c      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	42470000 	.word	0x42470000
 8003b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	4b8a      	ldr	r3, [pc, #552]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ea      	bne.n	8003b36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8097 	beq.w	8003c9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b72:	4b83      	ldr	r3, [pc, #524]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	4b7f      	ldr	r3, [pc, #508]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	4a7e      	ldr	r2, [pc, #504]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8e:	4b7c      	ldr	r3, [pc, #496]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b79      	ldr	r3, [pc, #484]	; (8003d84 <HAL_RCC_OscConfig+0x4b0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d118      	bne.n	8003bdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003baa:	4b76      	ldr	r3, [pc, #472]	; (8003d84 <HAL_RCC_OscConfig+0x4b0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a75      	ldr	r2, [pc, #468]	; (8003d84 <HAL_RCC_OscConfig+0x4b0>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb6:	f7fd f9d5 	bl	8000f64 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbe:	f7fd f9d1 	bl	8000f64 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e118      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	4b6c      	ldr	r3, [pc, #432]	; (8003d84 <HAL_RCC_OscConfig+0x4b0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x31e>
 8003be4:	4b66      	ldr	r3, [pc, #408]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	4a65      	ldr	r2, [pc, #404]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf0:	e01c      	b.n	8003c2c <HAL_RCC_OscConfig+0x358>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x340>
 8003bfa:	4b61      	ldr	r3, [pc, #388]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a60      	ldr	r2, [pc, #384]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	4b5e      	ldr	r3, [pc, #376]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a5d      	ldr	r2, [pc, #372]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0x358>
 8003c14:	4b5a      	ldr	r3, [pc, #360]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4a59      	ldr	r2, [pc, #356]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c20:	4b57      	ldr	r3, [pc, #348]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a56      	ldr	r2, [pc, #344]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c26:	f023 0304 	bic.w	r3, r3, #4
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d015      	beq.n	8003c60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd f996 	bl	8000f64 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd f992 	bl	8000f64 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0d7      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ee      	beq.n	8003c3c <HAL_RCC_OscConfig+0x368>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd f980 	bl	8000f64 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fd f97c 	bl	8000f64 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0c1      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7e:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ee      	bne.n	8003c68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	4a3a      	ldr	r2, [pc, #232]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80ad 	beq.w	8003e00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca6:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d060      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d145      	bne.n	8003d46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b33      	ldr	r3, [pc, #204]	; (8003d88 <HAL_RCC_OscConfig+0x4b4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd f950 	bl	8000f64 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd f94c 	bl	8000f64 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e093      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	071b      	lsls	r3, r3, #28
 8003d12:	491b      	ldr	r1, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_OscConfig+0x4b4>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fd f921 	bl	8000f64 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fd f91d 	bl	8000f64 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e064      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x452>
 8003d44:	e05c      	b.n	8003e00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_RCC_OscConfig+0x4b4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd f90a 	bl	8000f64 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd f906 	bl	8000f64 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04d      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_RCC_OscConfig+0x4ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x480>
 8003d72:	e045      	b.n	8003e00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e040      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <HAL_RCC_OscConfig+0x538>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d030      	beq.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d129      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d122      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d119      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d10f      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800

08003e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e041      	b.n	8003ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f839 	bl	8003eae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f000 f9d8 	bl	8004204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d001      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e04e      	b.n	8003f7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d01d      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x80>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d111      	bne.n	8003f68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d010      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f66:	e007      	b.n	8003f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40001800 	.word	0x40001800

08003fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d122      	bne.n	8004000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0202 	mvn.w	r2, #2
 8003fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8ee 	bl	80041c8 <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8e0 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8f1 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b04      	cmp	r3, #4
 800400c:	d122      	bne.n	8004054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b04      	cmp	r3, #4
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0204 	mvn.w	r2, #4
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8c4 	bl	80041c8 <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8b6 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8c7 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b08      	cmp	r3, #8
 8004060:	d122      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b08      	cmp	r3, #8
 800406e:	d11b      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0208 	mvn.w	r2, #8
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2204      	movs	r2, #4
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f89a 	bl	80041c8 <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f88c 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f89d 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d122      	bne.n	80040fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d11b      	bne.n	80040fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0210 	mvn.w	r2, #16
 80040cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2208      	movs	r2, #8
 80040d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f870 	bl	80041c8 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f862 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f873 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b01      	cmp	r3, #1
 8004108:	d10e      	bne.n	8004128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d107      	bne.n	8004128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0201 	mvn.w	r2, #1
 8004120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fc fcb0 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d10e      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d107      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f902 	bl	8004358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b40      	cmp	r3, #64	; 0x40
 8004160:	d10e      	bne.n	8004180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d107      	bne.n	8004180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f838 	bl	80041f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b20      	cmp	r3, #32
 800418c:	d10e      	bne.n	80041ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b20      	cmp	r3, #32
 800419a:	d107      	bne.n	80041ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0220 	mvn.w	r2, #32
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8cc 	bl	8004344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a40      	ldr	r2, [pc, #256]	; (8004318 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004222:	d00f      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3d      	ldr	r2, [pc, #244]	; (800431c <TIM_Base_SetConfig+0x118>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <TIM_Base_SetConfig+0x120>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <TIM_Base_SetConfig+0x114>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d02b      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d027      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2c      	ldr	r2, [pc, #176]	; (800431c <TIM_Base_SetConfig+0x118>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d023      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01f      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <TIM_Base_SetConfig+0x120>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01b      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d017      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a28      	ldr	r2, [pc, #160]	; (800432c <TIM_Base_SetConfig+0x128>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <TIM_Base_SetConfig+0x12c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00f      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <TIM_Base_SetConfig+0x130>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00b      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a25      	ldr	r2, [pc, #148]	; (8004338 <TIM_Base_SetConfig+0x134>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d007      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a24      	ldr	r2, [pc, #144]	; (800433c <TIM_Base_SetConfig+0x138>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a23      	ldr	r2, [pc, #140]	; (8004340 <TIM_Base_SetConfig+0x13c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d108      	bne.n	80042c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <TIM_Base_SetConfig+0x114>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0c      	ldr	r2, [pc, #48]	; (8004328 <TIM_Base_SetConfig+0x124>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40010000 	.word	0x40010000
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40010400 	.word	0x40010400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	40001800 	.word	0x40001800
 800433c:	40001c00 	.word	0x40001c00
 8004340:	40002000 	.word	0x40002000

08004344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e03f      	b.n	80043fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fcbc 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	; 0x24
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f829 	bl	8004408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800440c:	b0c0      	sub	sp, #256	; 0x100
 800440e:	af00      	add	r7, sp, #0
 8004410:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	68d9      	ldr	r1, [r3, #12]
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	ea40 0301 	orr.w	r3, r0, r1
 8004430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	431a      	orrs	r2, r3
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004460:	f021 010c 	bic.w	r1, r1, #12
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800446e:	430b      	orrs	r3, r1
 8004470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	6999      	ldr	r1, [r3, #24]
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	ea40 0301 	orr.w	r3, r0, r1
 800448e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b8f      	ldr	r3, [pc, #572]	; (80046d4 <UART_SetConfig+0x2cc>)
 8004498:	429a      	cmp	r2, r3
 800449a:	d005      	beq.n	80044a8 <UART_SetConfig+0xa0>
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b8d      	ldr	r3, [pc, #564]	; (80046d8 <UART_SetConfig+0x2d0>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d104      	bne.n	80044b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7fe ff9e 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 80044ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044b0:	e003      	b.n	80044ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b2:	f7fe ff85 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80044b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c4:	f040 810c 	bne.w	80046e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044da:	4622      	mov	r2, r4
 80044dc:	462b      	mov	r3, r5
 80044de:	1891      	adds	r1, r2, r2
 80044e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80044e2:	415b      	adcs	r3, r3
 80044e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ea:	4621      	mov	r1, r4
 80044ec:	eb12 0801 	adds.w	r8, r2, r1
 80044f0:	4629      	mov	r1, r5
 80044f2:	eb43 0901 	adc.w	r9, r3, r1
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800450a:	4690      	mov	r8, r2
 800450c:	4699      	mov	r9, r3
 800450e:	4623      	mov	r3, r4
 8004510:	eb18 0303 	adds.w	r3, r8, r3
 8004514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004518:	462b      	mov	r3, r5
 800451a:	eb49 0303 	adc.w	r3, r9, r3
 800451e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800452e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004536:	460b      	mov	r3, r1
 8004538:	18db      	adds	r3, r3, r3
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
 800453c:	4613      	mov	r3, r2
 800453e:	eb42 0303 	adc.w	r3, r2, r3
 8004542:	657b      	str	r3, [r7, #84]	; 0x54
 8004544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800454c:	f7fb fe60 	bl	8000210 <__aeabi_uldivmod>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4b61      	ldr	r3, [pc, #388]	; (80046dc <UART_SetConfig+0x2d4>)
 8004556:	fba3 2302 	umull	r2, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	011c      	lsls	r4, r3, #4
 800455e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004568:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800456c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	1891      	adds	r1, r2, r2
 8004576:	64b9      	str	r1, [r7, #72]	; 0x48
 8004578:	415b      	adcs	r3, r3
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004580:	4641      	mov	r1, r8
 8004582:	eb12 0a01 	adds.w	sl, r2, r1
 8004586:	4649      	mov	r1, r9
 8004588:	eb43 0b01 	adc.w	fp, r3, r1
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800459c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045a0:	4692      	mov	sl, r2
 80045a2:	469b      	mov	fp, r3
 80045a4:	4643      	mov	r3, r8
 80045a6:	eb1a 0303 	adds.w	r3, sl, r3
 80045aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ae:	464b      	mov	r3, r9
 80045b0:	eb4b 0303 	adc.w	r3, fp, r3
 80045b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045cc:	460b      	mov	r3, r1
 80045ce:	18db      	adds	r3, r3, r3
 80045d0:	643b      	str	r3, [r7, #64]	; 0x40
 80045d2:	4613      	mov	r3, r2
 80045d4:	eb42 0303 	adc.w	r3, r2, r3
 80045d8:	647b      	str	r3, [r7, #68]	; 0x44
 80045da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045e2:	f7fb fe15 	bl	8000210 <__aeabi_uldivmod>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4611      	mov	r1, r2
 80045ec:	4b3b      	ldr	r3, [pc, #236]	; (80046dc <UART_SetConfig+0x2d4>)
 80045ee:	fba3 2301 	umull	r2, r3, r3, r1
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2264      	movs	r2, #100	; 0x64
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	1acb      	subs	r3, r1, r3
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <UART_SetConfig+0x2d4>)
 8004604:	fba3 2302 	umull	r2, r3, r3, r2
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004610:	441c      	add	r4, r3
 8004612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800461c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	1891      	adds	r1, r2, r2
 800462a:	63b9      	str	r1, [r7, #56]	; 0x38
 800462c:	415b      	adcs	r3, r3
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004634:	4641      	mov	r1, r8
 8004636:	1851      	adds	r1, r2, r1
 8004638:	6339      	str	r1, [r7, #48]	; 0x30
 800463a:	4649      	mov	r1, r9
 800463c:	414b      	adcs	r3, r1
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800464c:	4659      	mov	r1, fp
 800464e:	00cb      	lsls	r3, r1, #3
 8004650:	4651      	mov	r1, sl
 8004652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004656:	4651      	mov	r1, sl
 8004658:	00ca      	lsls	r2, r1, #3
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	4603      	mov	r3, r0
 8004660:	4642      	mov	r2, r8
 8004662:	189b      	adds	r3, r3, r2
 8004664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004668:	464b      	mov	r3, r9
 800466a:	460a      	mov	r2, r1
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004680:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004688:	460b      	mov	r3, r1
 800468a:	18db      	adds	r3, r3, r3
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
 800468e:	4613      	mov	r3, r2
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800469a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800469e:	f7fb fdb7 	bl	8000210 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <UART_SetConfig+0x2d4>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	2164      	movs	r1, #100	; 0x64
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	3332      	adds	r3, #50	; 0x32
 80046ba:	4a08      	ldr	r2, [pc, #32]	; (80046dc <UART_SetConfig+0x2d4>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	f003 0207 	and.w	r2, r3, #7
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4422      	add	r2, r4
 80046ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046d0:	e105      	b.n	80048de <UART_SetConfig+0x4d6>
 80046d2:	bf00      	nop
 80046d4:	40011000 	.word	0x40011000
 80046d8:	40011400 	.word	0x40011400
 80046dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046f2:	4642      	mov	r2, r8
 80046f4:	464b      	mov	r3, r9
 80046f6:	1891      	adds	r1, r2, r2
 80046f8:	6239      	str	r1, [r7, #32]
 80046fa:	415b      	adcs	r3, r3
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
 80046fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004702:	4641      	mov	r1, r8
 8004704:	1854      	adds	r4, r2, r1
 8004706:	4649      	mov	r1, r9
 8004708:	eb43 0501 	adc.w	r5, r3, r1
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	00eb      	lsls	r3, r5, #3
 8004716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800471a:	00e2      	lsls	r2, r4, #3
 800471c:	4614      	mov	r4, r2
 800471e:	461d      	mov	r5, r3
 8004720:	4643      	mov	r3, r8
 8004722:	18e3      	adds	r3, r4, r3
 8004724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004728:	464b      	mov	r3, r9
 800472a:	eb45 0303 	adc.w	r3, r5, r3
 800472e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800473e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800474e:	4629      	mov	r1, r5
 8004750:	008b      	lsls	r3, r1, #2
 8004752:	4621      	mov	r1, r4
 8004754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004758:	4621      	mov	r1, r4
 800475a:	008a      	lsls	r2, r1, #2
 800475c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004760:	f7fb fd56 	bl	8000210 <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4b60      	ldr	r3, [pc, #384]	; (80048ec <UART_SetConfig+0x4e4>)
 800476a:	fba3 2302 	umull	r2, r3, r3, r2
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	011c      	lsls	r4, r3, #4
 8004772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004776:	2200      	movs	r2, #0
 8004778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800477c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004784:	4642      	mov	r2, r8
 8004786:	464b      	mov	r3, r9
 8004788:	1891      	adds	r1, r2, r2
 800478a:	61b9      	str	r1, [r7, #24]
 800478c:	415b      	adcs	r3, r3
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004794:	4641      	mov	r1, r8
 8004796:	1851      	adds	r1, r2, r1
 8004798:	6139      	str	r1, [r7, #16]
 800479a:	4649      	mov	r1, r9
 800479c:	414b      	adcs	r3, r1
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047ac:	4659      	mov	r1, fp
 80047ae:	00cb      	lsls	r3, r1, #3
 80047b0:	4651      	mov	r1, sl
 80047b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b6:	4651      	mov	r1, sl
 80047b8:	00ca      	lsls	r2, r1, #3
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	4642      	mov	r2, r8
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c8:	464b      	mov	r3, r9
 80047ca:	460a      	mov	r2, r1
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80047de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047ec:	4649      	mov	r1, r9
 80047ee:	008b      	lsls	r3, r1, #2
 80047f0:	4641      	mov	r1, r8
 80047f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f6:	4641      	mov	r1, r8
 80047f8:	008a      	lsls	r2, r1, #2
 80047fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047fe:	f7fb fd07 	bl	8000210 <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <UART_SetConfig+0x4e4>)
 8004808:	fba3 1302 	umull	r1, r3, r3, r2
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	2164      	movs	r1, #100	; 0x64
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	3332      	adds	r3, #50	; 0x32
 800481a:	4a34      	ldr	r2, [pc, #208]	; (80048ec <UART_SetConfig+0x4e4>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004826:	441c      	add	r4, r3
 8004828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482c:	2200      	movs	r2, #0
 800482e:	673b      	str	r3, [r7, #112]	; 0x70
 8004830:	677a      	str	r2, [r7, #116]	; 0x74
 8004832:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004836:	4642      	mov	r2, r8
 8004838:	464b      	mov	r3, r9
 800483a:	1891      	adds	r1, r2, r2
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	415b      	adcs	r3, r3
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004846:	4641      	mov	r1, r8
 8004848:	1851      	adds	r1, r2, r1
 800484a:	6039      	str	r1, [r7, #0]
 800484c:	4649      	mov	r1, r9
 800484e:	414b      	adcs	r3, r1
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800485e:	4659      	mov	r1, fp
 8004860:	00cb      	lsls	r3, r1, #3
 8004862:	4651      	mov	r1, sl
 8004864:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004868:	4651      	mov	r1, sl
 800486a:	00ca      	lsls	r2, r1, #3
 800486c:	4610      	mov	r0, r2
 800486e:	4619      	mov	r1, r3
 8004870:	4603      	mov	r3, r0
 8004872:	4642      	mov	r2, r8
 8004874:	189b      	adds	r3, r3, r2
 8004876:	66bb      	str	r3, [r7, #104]	; 0x68
 8004878:	464b      	mov	r3, r9
 800487a:	460a      	mov	r2, r1
 800487c:	eb42 0303 	adc.w	r3, r2, r3
 8004880:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	663b      	str	r3, [r7, #96]	; 0x60
 800488c:	667a      	str	r2, [r7, #100]	; 0x64
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800489a:	4649      	mov	r1, r9
 800489c:	008b      	lsls	r3, r1, #2
 800489e:	4641      	mov	r1, r8
 80048a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a4:	4641      	mov	r1, r8
 80048a6:	008a      	lsls	r2, r1, #2
 80048a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048ac:	f7fb fcb0 	bl	8000210 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <UART_SetConfig+0x4e4>)
 80048b6:	fba3 1302 	umull	r1, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	2164      	movs	r1, #100	; 0x64
 80048be:	fb01 f303 	mul.w	r3, r1, r3
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	3332      	adds	r3, #50	; 0x32
 80048c8:	4a08      	ldr	r2, [pc, #32]	; (80048ec <UART_SetConfig+0x4e4>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	f003 020f 	and.w	r2, r3, #15
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4422      	add	r2, r4
 80048dc:	609a      	str	r2, [r3, #8]
}
 80048de:	bf00      	nop
 80048e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048e4:	46bd      	mov	sp, r7
 80048e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ea:	bf00      	nop
 80048ec:	51eb851f 	.word	0x51eb851f

080048f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80048fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004902:	2b84      	cmp	r3, #132	; 0x84
 8004904:	d005      	beq.n	8004912 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004906:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	3303      	adds	r3, #3
 8004910:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004912:	68fb      	ldr	r3, [r7, #12]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004924:	f001 f826 	bl	8005974 <vTaskStartScheduler>
  
  return osOK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	bd80      	pop	{r7, pc}

0800492e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800492e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004930:	b089      	sub	sp, #36	; 0x24
 8004932:	af04      	add	r7, sp, #16
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d020      	beq.n	8004982 <osThreadCreate+0x54>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01c      	beq.n	8004982 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685c      	ldr	r4, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681d      	ldr	r5, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691e      	ldr	r6, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ffc8 	bl	80048f0 <makeFreeRtosPriority>
 8004960:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800496a:	9202      	str	r2, [sp, #8]
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	9100      	str	r1, [sp, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	4632      	mov	r2, r6
 8004974:	4629      	mov	r1, r5
 8004976:	4620      	mov	r0, r4
 8004978:	f000 fe10 	bl	800559c <xTaskCreateStatic>
 800497c:	4603      	mov	r3, r0
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e01c      	b.n	80049bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685c      	ldr	r4, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800498e:	b29e      	uxth	r6, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff ffaa 	bl	80048f0 <makeFreeRtosPriority>
 800499c:	4602      	mov	r2, r0
 800499e:	f107 030c 	add.w	r3, r7, #12
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	9200      	str	r2, [sp, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	4632      	mov	r2, r6
 80049aa:	4629      	mov	r1, r5
 80049ac:	4620      	mov	r0, r4
 80049ae:	f000 fe52 	bl	8005656 <xTaskCreate>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d001      	beq.n	80049bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e000      	b.n	80049be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049bc:	68fb      	ldr	r3, [r7, #12]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <osDelay+0x16>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	e000      	b.n	80049de <osDelay+0x18>
 80049dc:	2301      	movs	r3, #1
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 ff94 	bl	800590c <vTaskDelay>
  
  return osOK;
 80049e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f103 0208 	add.w	r2, r3, #8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f103 0208 	add.w	r2, r3, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f103 0208 	add.w	r2, r3, #8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aa6:	d103      	bne.n	8004ab0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e00c      	b.n	8004aca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e002      	b.n	8004abe <vListInsert+0x2e>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d2f6      	bcs.n	8004ab8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	601a      	str	r2, [r3, #0]
}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6892      	ldr	r2, [r2, #8]
 8004b18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6852      	ldr	r2, [r2, #4]
 8004b22:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d103      	bne.n	8004b36 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	1e5a      	subs	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xQueueGenericReset+0x2a>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60bb      	str	r3, [r7, #8]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b82:	f002 f947 	bl	8006e14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	441a      	add	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	68f9      	ldr	r1, [r7, #12]
 8004bb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	441a      	add	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	22ff      	movs	r2, #255	; 0xff
 8004bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d114      	bne.n	8004c02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01a      	beq.n	8004c16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3310      	adds	r3, #16
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 f98d 	bl	8005f04 <xTaskRemoveFromEventList>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d012      	beq.n	8004c16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <xQueueGenericReset+0xcc>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	e009      	b.n	8004c16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3310      	adds	r3, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fef1 	bl	80049ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3324      	adds	r3, #36	; 0x24
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff feec 	bl	80049ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c16:	f002 f92d 	bl	8006e74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c1a:	2301      	movs	r3, #1
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	e000ed04 	.word	0xe000ed04

08004c28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08e      	sub	sp, #56	; 0x38
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <xQueueGenericCreateStatic+0x52>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <xQueueGenericCreateStatic+0x56>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <xQueueGenericCreateStatic+0x58>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	623b      	str	r3, [r7, #32]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <xQueueGenericCreateStatic+0x7e>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <xQueueGenericCreateStatic+0x82>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <xQueueGenericCreateStatic+0x84>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	61fb      	str	r3, [r7, #28]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cc6:	2348      	movs	r3, #72	; 0x48
 8004cc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b48      	cmp	r3, #72	; 0x48
 8004cce:	d00a      	beq.n	8004ce6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	61bb      	str	r3, [r7, #24]
}
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ce6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4613      	mov	r3, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f83f 	bl	8004d8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3730      	adds	r7, #48	; 0x30
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	613b      	str	r3, [r7, #16]
}
 8004d3e:	bf00      	nop
 8004d40:	e7fe      	b.n	8004d40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3348      	adds	r3, #72	; 0x48
 8004d50:	4618      	mov	r0, r3
 8004d52:	f002 f981 	bl	8007058 <pvPortMalloc>
 8004d56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d011      	beq.n	8004d82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	3348      	adds	r3, #72	; 0x48
 8004d66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d70:	79fa      	ldrb	r2, [r7, #7]
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	4613      	mov	r3, r2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f805 	bl	8004d8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d82:	69bb      	ldr	r3, [r7, #24]
	}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d103      	bne.n	8004da8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e002      	b.n	8004dae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dba:	2101      	movs	r1, #1
 8004dbc:	69b8      	ldr	r0, [r7, #24]
 8004dbe:	f7ff fecb 	bl	8004b58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08e      	sub	sp, #56	; 0x38
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <xQueueGenericSend+0x32>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <xQueueGenericSend+0x40>
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <xQueueGenericSend+0x44>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <xQueueGenericSend+0x46>
 8004e10:	2300      	movs	r3, #0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <xQueueGenericSend+0x60>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d103      	bne.n	8004e3a <xQueueGenericSend+0x6e>
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <xQueueGenericSend+0x72>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <xQueueGenericSend+0x74>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <xQueueGenericSend+0x8e>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	623b      	str	r3, [r7, #32]
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e5a:	f001 fa13 	bl	8006284 <xTaskGetSchedulerState>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d102      	bne.n	8004e6a <xQueueGenericSend+0x9e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueGenericSend+0xa2>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueGenericSend+0xa4>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <xQueueGenericSend+0xbe>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61fb      	str	r3, [r7, #28]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e8a:	f001 ffc3 	bl	8006e14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <xQueueGenericSend+0xd4>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d129      	bne.n	8004ef4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea6:	f000 fa0b 	bl	80052c0 <prvCopyDataToQueue>
 8004eaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d010      	beq.n	8004ed6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	3324      	adds	r3, #36	; 0x24
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f001 f823 	bl	8005f04 <xTaskRemoveFromEventList>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ec4:	4b3f      	ldr	r3, [pc, #252]	; (8004fc4 <xQueueGenericSend+0x1f8>)
 8004ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	e00a      	b.n	8004eec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004edc:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <xQueueGenericSend+0x1f8>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004eec:	f001 ffc2 	bl	8006e74 <vPortExitCritical>
				return pdPASS;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e063      	b.n	8004fbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004efa:	f001 ffbb 	bl	8006e74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e05c      	b.n	8004fbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f08:	f107 0314 	add.w	r3, r7, #20
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 f85b 	bl	8005fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f12:	2301      	movs	r3, #1
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f16:	f001 ffad 	bl	8006e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f1a:	f000 fd9b 	bl	8005a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f1e:	f001 ff79 	bl	8006e14 <vPortEnterCritical>
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f2e:	d103      	bne.n	8004f38 <xQueueGenericSend+0x16c>
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f44:	d103      	bne.n	8004f4e <xQueueGenericSend+0x182>
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f4e:	f001 ff91 	bl	8006e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f52:	1d3a      	adds	r2, r7, #4
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f001 f84a 	bl	8005ff4 <xTaskCheckForTimeOut>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d124      	bne.n	8004fb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f68:	f000 faa2 	bl	80054b0 <prvIsQueueFull>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d018      	beq.n	8004fa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	3310      	adds	r3, #16
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 ff72 	bl	8005e64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f82:	f000 fa2d 	bl	80053e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f86:	f000 fd73 	bl	8005a70 <xTaskResumeAll>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f47f af7c 	bne.w	8004e8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <xQueueGenericSend+0x1f8>)
 8004f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	e772      	b.n	8004e8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fa6:	f000 fa1b 	bl	80053e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004faa:	f000 fd61 	bl	8005a70 <xTaskResumeAll>
 8004fae:	e76c      	b.n	8004e8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fb2:	f000 fa15 	bl	80053e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fb6:	f000 fd5b 	bl	8005a70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3738      	adds	r7, #56	; 0x38
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b090      	sub	sp, #64	; 0x40
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d103      	bne.n	8005004 <xQueueGenericSendFromISR+0x3c>
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <xQueueGenericSendFromISR+0x40>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <xQueueGenericSendFromISR+0x42>
 8005008:	2300      	movs	r3, #0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d103      	bne.n	8005032 <xQueueGenericSendFromISR+0x6a>
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <xQueueGenericSendFromISR+0x6e>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <xQueueGenericSendFromISR+0x70>
 8005036:	2300      	movs	r3, #0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	623b      	str	r3, [r7, #32]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005052:	f001 ffc1 	bl	8006fd8 <vPortValidateInterruptPriority>
	__asm volatile
 8005056:	f3ef 8211 	mrs	r2, BASEPRI
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	61fa      	str	r2, [r7, #28]
 800506c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800506e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <xQueueGenericSendFromISR+0xbc>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d12f      	bne.n	80050e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800508a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800509a:	f000 f911 	bl	80052c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800509e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a6:	d112      	bne.n	80050ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d016      	beq.n	80050de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	3324      	adds	r3, #36	; 0x24
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 ff25 	bl	8005f04 <xTaskRemoveFromEventList>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00e      	beq.n	80050de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e007      	b.n	80050de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050d2:	3301      	adds	r3, #1
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	b25a      	sxtb	r2, r3
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050de:	2301      	movs	r3, #1
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80050e2:	e001      	b.n	80050e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ea:	617b      	str	r3, [r7, #20]
	__asm volatile
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f383 8811 	msr	BASEPRI, r3
}
 80050f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3740      	adds	r7, #64	; 0x40
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08c      	sub	sp, #48	; 0x30
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800510c:	2300      	movs	r3, #0
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <xQueueReceive+0x30>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	623b      	str	r3, [r7, #32]
}
 800512c:	bf00      	nop
 800512e:	e7fe      	b.n	800512e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <xQueueReceive+0x3e>
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <xQueueReceive+0x42>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <xQueueReceive+0x44>
 8005142:	2300      	movs	r3, #0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xQueueReceive+0x5e>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	61fb      	str	r3, [r7, #28]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800515e:	f001 f891 	bl	8006284 <xTaskGetSchedulerState>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <xQueueReceive+0x6e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <xQueueReceive+0x72>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <xQueueReceive+0x74>
 8005172:	2300      	movs	r3, #0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xQueueReceive+0x8e>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	61bb      	str	r3, [r7, #24]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800518e:	f001 fe41 	bl	8006e14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01f      	beq.n	80051de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a2:	f000 f8f7 	bl	8005394 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00f      	beq.n	80051d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	3310      	adds	r3, #16
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fea2 	bl	8005f04 <xTaskRemoveFromEventList>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051c6:	4b3d      	ldr	r3, [pc, #244]	; (80052bc <xQueueReceive+0x1bc>)
 80051c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051d6:	f001 fe4d 	bl	8006e74 <vPortExitCritical>
				return pdPASS;
 80051da:	2301      	movs	r3, #1
 80051dc:	e069      	b.n	80052b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051e4:	f001 fe46 	bl	8006e74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e062      	b.n	80052b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051f2:	f107 0310 	add.w	r3, r7, #16
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fee6 	bl	8005fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051fc:	2301      	movs	r3, #1
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005200:	f001 fe38 	bl	8006e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005204:	f000 fc26 	bl	8005a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005208:	f001 fe04 	bl	8006e14 <vPortEnterCritical>
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005212:	b25b      	sxtb	r3, r3
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005218:	d103      	bne.n	8005222 <xQueueReceive+0x122>
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005228:	b25b      	sxtb	r3, r3
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800522e:	d103      	bne.n	8005238 <xQueueReceive+0x138>
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005238:	f001 fe1c 	bl	8006e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800523c:	1d3a      	adds	r2, r7, #4
 800523e:	f107 0310 	add.w	r3, r7, #16
 8005242:	4611      	mov	r1, r2
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fed5 	bl	8005ff4 <xTaskCheckForTimeOut>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d123      	bne.n	8005298 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005252:	f000 f917 	bl	8005484 <prvIsQueueEmpty>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d017      	beq.n	800528c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	3324      	adds	r3, #36	; 0x24
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4611      	mov	r1, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fdfd 	bl	8005e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800526a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526c:	f000 f8b8 	bl	80053e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005270:	f000 fbfe 	bl	8005a70 <xTaskResumeAll>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d189      	bne.n	800518e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800527a:	4b10      	ldr	r3, [pc, #64]	; (80052bc <xQueueReceive+0x1bc>)
 800527c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	e780      	b.n	800518e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800528c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800528e:	f000 f8a7 	bl	80053e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005292:	f000 fbed 	bl	8005a70 <xTaskResumeAll>
 8005296:	e77a      	b.n	800518e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529a:	f000 f8a1 	bl	80053e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800529e:	f000 fbe7 	bl	8005a70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a4:	f000 f8ee 	bl	8005484 <prvIsQueueEmpty>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f43f af6f 	beq.w	800518e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	; 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	e000ed04 	.word	0xe000ed04

080052c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10d      	bne.n	80052fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d14d      	bne.n	8005382 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 ffe8 	bl	80062c0 <xTaskPriorityDisinherit>
 80052f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	e043      	b.n	8005382 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d119      	bne.n	8005334 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6858      	ldr	r0, [r3, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	461a      	mov	r2, r3
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	f002 f8b6 	bl	800747c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	441a      	add	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d32b      	bcc.n	8005382 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	e026      	b.n	8005382 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68d8      	ldr	r0, [r3, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	461a      	mov	r2, r3
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	f002 f89c 	bl	800747c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	425b      	negs	r3, r3
 800534e:	441a      	add	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d207      	bcs.n	8005370 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	425b      	negs	r3, r3
 800536a:	441a      	add	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d105      	bne.n	8005382 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	3b01      	subs	r3, #1
 8005380:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800538a:	697b      	ldr	r3, [r7, #20]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d018      	beq.n	80053d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	441a      	add	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d303      	bcc.n	80053c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68d9      	ldr	r1, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	461a      	mov	r2, r3
 80053d2:	6838      	ldr	r0, [r7, #0]
 80053d4:	f002 f852 	bl	800747c <memcpy>
	}
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053e8:	f001 fd14 	bl	8006e14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053f4:	e011      	b.n	800541a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d012      	beq.n	8005424 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3324      	adds	r3, #36	; 0x24
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fd7e 	bl	8005f04 <xTaskRemoveFromEventList>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800540e:	f000 fe53 	bl	80060b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	3b01      	subs	r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800541a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	dce9      	bgt.n	80053f6 <prvUnlockQueue+0x16>
 8005422:	e000      	b.n	8005426 <prvUnlockQueue+0x46>
					break;
 8005424:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	22ff      	movs	r2, #255	; 0xff
 800542a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800542e:	f001 fd21 	bl	8006e74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005432:	f001 fcef 	bl	8006e14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800543c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800543e:	e011      	b.n	8005464 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d012      	beq.n	800546e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3310      	adds	r3, #16
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fd59 	bl	8005f04 <xTaskRemoveFromEventList>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005458:	f000 fe2e 	bl	80060b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	3b01      	subs	r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005468:	2b00      	cmp	r3, #0
 800546a:	dce9      	bgt.n	8005440 <prvUnlockQueue+0x60>
 800546c:	e000      	b.n	8005470 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800546e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	22ff      	movs	r2, #255	; 0xff
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005478:	f001 fcfc 	bl	8006e74 <vPortExitCritical>
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800548c:	f001 fcc2 	bl	8006e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e001      	b.n	80054a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054a2:	f001 fce7 	bl	8006e74 <vPortExitCritical>

	return xReturn;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054b8:	f001 fcac 	bl	8006e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d102      	bne.n	80054ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	e001      	b.n	80054d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054d2:	f001 fccf 	bl	8006e74 <vPortExitCritical>

	return xReturn;
 80054d6:	68fb      	ldr	r3, [r7, #12]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	e014      	b.n	800551a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054f0:	4a0f      	ldr	r2, [pc, #60]	; (8005530 <vQueueAddToRegistry+0x50>)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054fc:	490c      	ldr	r1, [pc, #48]	; (8005530 <vQueueAddToRegistry+0x50>)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005506:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <vQueueAddToRegistry+0x50>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	4413      	add	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005512:	e006      	b.n	8005522 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3301      	adds	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b07      	cmp	r3, #7
 800551e:	d9e7      	bls.n	80054f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20000964 	.word	0x20000964

08005534 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005544:	f001 fc66 	bl	8006e14 <vPortEnterCritical>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800554e:	b25b      	sxtb	r3, r3
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005554:	d103      	bne.n	800555e <vQueueWaitForMessageRestricted+0x2a>
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005564:	b25b      	sxtb	r3, r3
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800556a:	d103      	bne.n	8005574 <vQueueWaitForMessageRestricted+0x40>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005574:	f001 fc7e 	bl	8006e74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	3324      	adds	r3, #36	; 0x24
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fc8f 	bl	8005eac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800558e:	6978      	ldr	r0, [r7, #20]
 8005590:	f7ff ff26 	bl	80053e0 <prvUnlockQueue>
	}
 8005594:	bf00      	nop
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08e      	sub	sp, #56	; 0x38
 80055a0:	af04      	add	r7, sp, #16
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	623b      	str	r3, [r7, #32]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	61fb      	str	r3, [r7, #28]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055e2:	23c0      	movs	r3, #192	; 0xc0
 80055e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2bc0      	cmp	r3, #192	; 0xc0
 80055ea:	d00a      	beq.n	8005602 <xTaskCreateStatic+0x66>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	61bb      	str	r3, [r7, #24]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005602:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01e      	beq.n	8005648 <xTaskCreateStatic+0xac>
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01b      	beq.n	8005648 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005618:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	2202      	movs	r2, #2
 800561e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005622:	2300      	movs	r3, #0
 8005624:	9303      	str	r3, [sp, #12]
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	9302      	str	r3, [sp, #8]
 800562a:	f107 0314 	add.w	r3, r7, #20
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f850 	bl	80056e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005642:	f000 f8f9 	bl	8005838 <prvAddNewTaskToReadyList>
 8005646:	e001      	b.n	800564c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800564c:	697b      	ldr	r3, [r7, #20]
	}
 800564e:	4618      	mov	r0, r3
 8005650:	3728      	adds	r7, #40	; 0x28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005656:	b580      	push	{r7, lr}
 8005658:	b08c      	sub	sp, #48	; 0x30
 800565a:	af04      	add	r7, sp, #16
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	603b      	str	r3, [r7, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005666:	88fb      	ldrh	r3, [r7, #6]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4618      	mov	r0, r3
 800566c:	f001 fcf4 	bl	8007058 <pvPortMalloc>
 8005670:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005678:	20c0      	movs	r0, #192	; 0xc0
 800567a:	f001 fced 	bl	8007058 <pvPortMalloc>
 800567e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
 800568c:	e005      	b.n	800569a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	f001 fdb2 	bl	80071f8 <vPortFree>
 8005694:	e001      	b.n	800569a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d017      	beq.n	80056d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9303      	str	r3, [sp, #12]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	9302      	str	r3, [sp, #8]
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f80e 	bl	80056e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056c4:	69f8      	ldr	r0, [r7, #28]
 80056c6:	f000 f8b7 	bl	8005838 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056ca:	2301      	movs	r3, #1
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	e002      	b.n	80056d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056d6:	69bb      	ldr	r3, [r7, #24]
	}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	461a      	mov	r2, r3
 80056f8:	21a5      	movs	r1, #165	; 0xa5
 80056fa:	f001 fecd 	bl	8007498 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005708:	3b01      	subs	r3, #1
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f023 0307 	bic.w	r3, r3, #7
 8005716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	617b      	str	r3, [r7, #20]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01f      	beq.n	8005784 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e012      	b.n	8005770 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	7819      	ldrb	r1, [r3, #0]
 8005752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	3334      	adds	r3, #52	; 0x34
 800575a:	460a      	mov	r2, r1
 800575c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	d9e9      	bls.n	800574a <prvInitialiseNewTask+0x6a>
 8005776:	e000      	b.n	800577a <prvInitialiseNewTask+0x9a>
			{
				break;
 8005778:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005782:	e003      	b.n	800578c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b06      	cmp	r3, #6
 8005790:	d901      	bls.n	8005796 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005792:	2306      	movs	r3, #6
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2200      	movs	r2, #0
 80057a6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	3304      	adds	r3, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff f93e 	bl	8004a2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	3318      	adds	r3, #24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff f939 	bl	8004a2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	f1c3 0207 	rsb	r2, r3, #7
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2200      	movs	r2, #0
 80057d6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	3354      	adds	r3, #84	; 0x54
 80057ec:	2260      	movs	r2, #96	; 0x60
 80057ee:	2100      	movs	r1, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 fe51 	bl	8007498 <memset>
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	4a0c      	ldr	r2, [pc, #48]	; (800582c <prvInitialiseNewTask+0x14c>)
 80057fa:	659a      	str	r2, [r3, #88]	; 0x58
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	4a0c      	ldr	r2, [pc, #48]	; (8005830 <prvInitialiseNewTask+0x150>)
 8005800:	65da      	str	r2, [r3, #92]	; 0x5c
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <prvInitialiseNewTask+0x154>)
 8005806:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	69b8      	ldr	r0, [r7, #24]
 800580e:	f001 f9d1 	bl	8006bb4 <pxPortInitialiseStack>
 8005812:	4602      	mov	r2, r0
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005822:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005824:	bf00      	nop
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	080076c4 	.word	0x080076c4
 8005830:	080076e4 	.word	0x080076e4
 8005834:	080076a4 	.word	0x080076a4

08005838 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005840:	f001 fae8 	bl	8006e14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005844:	4b2a      	ldr	r3, [pc, #168]	; (80058f0 <prvAddNewTaskToReadyList+0xb8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	4a29      	ldr	r2, [pc, #164]	; (80058f0 <prvAddNewTaskToReadyList+0xb8>)
 800584c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800584e:	4b29      	ldr	r3, [pc, #164]	; (80058f4 <prvAddNewTaskToReadyList+0xbc>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005856:	4a27      	ldr	r2, [pc, #156]	; (80058f4 <prvAddNewTaskToReadyList+0xbc>)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800585c:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <prvAddNewTaskToReadyList+0xb8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d110      	bne.n	8005886 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005864:	f000 fc4c 	bl	8006100 <prvInitialiseTaskLists>
 8005868:	e00d      	b.n	8005886 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800586a:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <prvAddNewTaskToReadyList+0xc0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005872:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <prvAddNewTaskToReadyList+0xbc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	429a      	cmp	r2, r3
 800587e:	d802      	bhi.n	8005886 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005880:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <prvAddNewTaskToReadyList+0xbc>)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <prvAddNewTaskToReadyList+0xc4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3301      	adds	r3, #1
 800588c:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <prvAddNewTaskToReadyList+0xc4>)
 800588e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	2201      	movs	r2, #1
 8005896:	409a      	lsls	r2, r3
 8005898:	4b19      	ldr	r3, [pc, #100]	; (8005900 <prvAddNewTaskToReadyList+0xc8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4313      	orrs	r3, r2
 800589e:	4a18      	ldr	r2, [pc, #96]	; (8005900 <prvAddNewTaskToReadyList+0xc8>)
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4a15      	ldr	r2, [pc, #84]	; (8005904 <prvAddNewTaskToReadyList+0xcc>)
 80058b0:	441a      	add	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f7ff f8c5 	bl	8004a48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058be:	f001 fad9 	bl	8006e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <prvAddNewTaskToReadyList+0xc0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00e      	beq.n	80058e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <prvAddNewTaskToReadyList+0xbc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d207      	bcs.n	80058e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058d8:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <prvAddNewTaskToReadyList+0xd0>)
 80058da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058e8:	bf00      	nop
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000aa8 	.word	0x20000aa8
 80058f4:	200009a4 	.word	0x200009a4
 80058f8:	20000ab4 	.word	0x20000ab4
 80058fc:	20000ac4 	.word	0x20000ac4
 8005900:	20000ab0 	.word	0x20000ab0
 8005904:	200009a8 	.word	0x200009a8
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d017      	beq.n	800594e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800591e:	4b13      	ldr	r3, [pc, #76]	; (800596c <vTaskDelay+0x60>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <vTaskDelay+0x30>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60bb      	str	r3, [r7, #8]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800593c:	f000 f88a 	bl	8005a54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005940:	2100      	movs	r1, #0
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fd42 	bl	80063cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005948:	f000 f892 	bl	8005a70 <xTaskResumeAll>
 800594c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <vTaskDelay+0x64>)
 8005956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000ad0 	.word	0x20000ad0
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	; 0x28
 8005978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005982:	463a      	mov	r2, r7
 8005984:	1d39      	adds	r1, r7, #4
 8005986:	f107 0308 	add.w	r3, r7, #8
 800598a:	4618      	mov	r0, r3
 800598c:	f7fa fdd4 	bl	8000538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	9202      	str	r2, [sp, #8]
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	2300      	movs	r3, #0
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	460a      	mov	r2, r1
 80059a2:	4924      	ldr	r1, [pc, #144]	; (8005a34 <vTaskStartScheduler+0xc0>)
 80059a4:	4824      	ldr	r0, [pc, #144]	; (8005a38 <vTaskStartScheduler+0xc4>)
 80059a6:	f7ff fdf9 	bl	800559c <xTaskCreateStatic>
 80059aa:	4603      	mov	r3, r0
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <vTaskStartScheduler+0xc8>)
 80059ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059b0:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <vTaskStartScheduler+0xc8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e001      	b.n	80059c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d102      	bne.n	80059ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059c8:	f000 fd66 	bl	8006498 <xTimerCreateTimerTask>
 80059cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d11b      	bne.n	8005a0c <vTaskStartScheduler+0x98>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	613b      	str	r3, [r7, #16]
}
 80059e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059e8:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <vTaskStartScheduler+0xcc>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3354      	adds	r3, #84	; 0x54
 80059ee:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <vTaskStartScheduler+0xd0>)
 80059f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059f2:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <vTaskStartScheduler+0xd4>)
 80059f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059fa:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <vTaskStartScheduler+0xd8>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a00:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <vTaskStartScheduler+0xdc>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a06:	f001 f963 	bl	8006cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a0a:	e00e      	b.n	8005a2a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a12:	d10a      	bne.n	8005a2a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	60fb      	str	r3, [r7, #12]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <vTaskStartScheduler+0xb4>
}
 8005a2a:	bf00      	nop
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	08007674 	.word	0x08007674
 8005a38:	080060d1 	.word	0x080060d1
 8005a3c:	20000acc 	.word	0x20000acc
 8005a40:	200009a4 	.word	0x200009a4
 8005a44:	20000010 	.word	0x20000010
 8005a48:	20000ac8 	.word	0x20000ac8
 8005a4c:	20000ab4 	.word	0x20000ab4
 8005a50:	20000aac 	.word	0x20000aac

08005a54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <vTaskSuspendAll+0x18>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	4a03      	ldr	r2, [pc, #12]	; (8005a6c <vTaskSuspendAll+0x18>)
 8005a60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a62:	bf00      	nop
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20000ad0 	.word	0x20000ad0

08005a70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a7e:	4b41      	ldr	r3, [pc, #260]	; (8005b84 <xTaskResumeAll+0x114>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <xTaskResumeAll+0x2c>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	603b      	str	r3, [r7, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a9c:	f001 f9ba 	bl	8006e14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005aa0:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <xTaskResumeAll+0x114>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	4a37      	ldr	r2, [pc, #220]	; (8005b84 <xTaskResumeAll+0x114>)
 8005aa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aaa:	4b36      	ldr	r3, [pc, #216]	; (8005b84 <xTaskResumeAll+0x114>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d161      	bne.n	8005b76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ab2:	4b35      	ldr	r3, [pc, #212]	; (8005b88 <xTaskResumeAll+0x118>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d05d      	beq.n	8005b76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aba:	e02e      	b.n	8005b1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005abc:	4b33      	ldr	r3, [pc, #204]	; (8005b8c <xTaskResumeAll+0x11c>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3318      	adds	r3, #24
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff f81a 	bl	8004b02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff f815 	bl	8004b02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	2201      	movs	r2, #1
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <xTaskResumeAll+0x120>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <xTaskResumeAll+0x120>)
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <xTaskResumeAll+0x124>)
 8005af8:	441a      	add	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f7fe ffa1 	bl	8004a48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <xTaskResumeAll+0x128>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d302      	bcc.n	8005b1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005b14:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <xTaskResumeAll+0x12c>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b1a:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <xTaskResumeAll+0x11c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1cc      	bne.n	8005abc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b28:	f000 fb8c 	bl	8006244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ba0 <xTaskResumeAll+0x130>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d010      	beq.n	8005b5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b38:	f000 f846 	bl	8005bc8 <xTaskIncrementTick>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005b42:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <xTaskResumeAll+0x12c>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f1      	bne.n	8005b38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005b54:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <xTaskResumeAll+0x130>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b5a:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <xTaskResumeAll+0x12c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d009      	beq.n	8005b76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b66:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <xTaskResumeAll+0x134>)
 8005b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b76:	f001 f97d 	bl	8006e74 <vPortExitCritical>

	return xAlreadyYielded;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20000ad0 	.word	0x20000ad0
 8005b88:	20000aa8 	.word	0x20000aa8
 8005b8c:	20000a64 	.word	0x20000a64
 8005b90:	20000ab0 	.word	0x20000ab0
 8005b94:	200009a8 	.word	0x200009a8
 8005b98:	200009a4 	.word	0x200009a4
 8005b9c:	20000abc 	.word	0x20000abc
 8005ba0:	20000ab8 	.word	0x20000ab8
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <xTaskGetTickCount+0x1c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005bb4:	687b      	ldr	r3, [r7, #4]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000aac 	.word	0x20000aac

08005bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bd2:	4b4e      	ldr	r3, [pc, #312]	; (8005d0c <xTaskIncrementTick+0x144>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f040 808e 	bne.w	8005cf8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bdc:	4b4c      	ldr	r3, [pc, #304]	; (8005d10 <xTaskIncrementTick+0x148>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005be4:	4a4a      	ldr	r2, [pc, #296]	; (8005d10 <xTaskIncrementTick+0x148>)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d120      	bne.n	8005c32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bf0:	4b48      	ldr	r3, [pc, #288]	; (8005d14 <xTaskIncrementTick+0x14c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <xTaskIncrementTick+0x48>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	603b      	str	r3, [r7, #0]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <xTaskIncrementTick+0x46>
 8005c10:	4b40      	ldr	r3, [pc, #256]	; (8005d14 <xTaskIncrementTick+0x14c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	4b40      	ldr	r3, [pc, #256]	; (8005d18 <xTaskIncrementTick+0x150>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a3e      	ldr	r2, [pc, #248]	; (8005d14 <xTaskIncrementTick+0x14c>)
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	4a3e      	ldr	r2, [pc, #248]	; (8005d18 <xTaskIncrementTick+0x150>)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	4b3d      	ldr	r3, [pc, #244]	; (8005d1c <xTaskIncrementTick+0x154>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4a3c      	ldr	r2, [pc, #240]	; (8005d1c <xTaskIncrementTick+0x154>)
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	f000 fb09 	bl	8006244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c32:	4b3b      	ldr	r3, [pc, #236]	; (8005d20 <xTaskIncrementTick+0x158>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d348      	bcc.n	8005cce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c3c:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <xTaskIncrementTick+0x14c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c46:	4b36      	ldr	r3, [pc, #216]	; (8005d20 <xTaskIncrementTick+0x158>)
 8005c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c4c:	601a      	str	r2, [r3, #0]
					break;
 8005c4e:	e03e      	b.n	8005cce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c50:	4b30      	ldr	r3, [pc, #192]	; (8005d14 <xTaskIncrementTick+0x14c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d203      	bcs.n	8005c70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c68:	4a2d      	ldr	r2, [pc, #180]	; (8005d20 <xTaskIncrementTick+0x158>)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c6e:	e02e      	b.n	8005cce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fe ff44 	bl	8004b02 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	3318      	adds	r3, #24
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe ff3b 	bl	8004b02 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	2201      	movs	r2, #1
 8005c92:	409a      	lsls	r2, r3
 8005c94:	4b23      	ldr	r3, [pc, #140]	; (8005d24 <xTaskIncrementTick+0x15c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	4a22      	ldr	r2, [pc, #136]	; (8005d24 <xTaskIncrementTick+0x15c>)
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a1f      	ldr	r2, [pc, #124]	; (8005d28 <xTaskIncrementTick+0x160>)
 8005cac:	441a      	add	r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f7fe fec7 	bl	8004a48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	4b1b      	ldr	r3, [pc, #108]	; (8005d2c <xTaskIncrementTick+0x164>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d3b9      	bcc.n	8005c3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ccc:	e7b6      	b.n	8005c3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cce:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <xTaskIncrementTick+0x164>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	4914      	ldr	r1, [pc, #80]	; (8005d28 <xTaskIncrementTick+0x160>)
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d901      	bls.n	8005cea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005cea:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <xTaskIncrementTick+0x168>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	e004      	b.n	8005d02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <xTaskIncrementTick+0x16c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <xTaskIncrementTick+0x16c>)
 8005d00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d02:	697b      	ldr	r3, [r7, #20]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000ad0 	.word	0x20000ad0
 8005d10:	20000aac 	.word	0x20000aac
 8005d14:	20000a5c 	.word	0x20000a5c
 8005d18:	20000a60 	.word	0x20000a60
 8005d1c:	20000ac0 	.word	0x20000ac0
 8005d20:	20000ac8 	.word	0x20000ac8
 8005d24:	20000ab0 	.word	0x20000ab0
 8005d28:	200009a8 	.word	0x200009a8
 8005d2c:	200009a4 	.word	0x200009a4
 8005d30:	20000abc 	.word	0x20000abc
 8005d34:	20000ab8 	.word	0x20000ab8

08005d38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d3e:	4b42      	ldr	r3, [pc, #264]	; (8005e48 <vTaskSwitchContext+0x110>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d46:	4b41      	ldr	r3, [pc, #260]	; (8005e4c <vTaskSwitchContext+0x114>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d4c:	e077      	b.n	8005e3e <vTaskSwitchContext+0x106>
		xYieldPending = pdFALSE;
 8005d4e:	4b3f      	ldr	r3, [pc, #252]	; (8005e4c <vTaskSwitchContext+0x114>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005d54:	4b3e      	ldr	r3, [pc, #248]	; (8005e50 <vTaskSwitchContext+0x118>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d111      	bne.n	8005d90 <vTaskSwitchContext+0x58>
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d10b      	bne.n	8005d90 <vTaskSwitchContext+0x58>
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d105      	bne.n	8005d90 <vTaskSwitchContext+0x58>
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	330c      	adds	r3, #12
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d008      	beq.n	8005da2 <vTaskSwitchContext+0x6a>
 8005d90:	4b2f      	ldr	r3, [pc, #188]	; (8005e50 <vTaskSwitchContext+0x118>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b2e      	ldr	r3, [pc, #184]	; (8005e50 <vTaskSwitchContext+0x118>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3334      	adds	r3, #52	; 0x34
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f7fa fbb9 	bl	8000514 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8005da2:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <vTaskSwitchContext+0x118>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a2b      	ldr	r2, [pc, #172]	; (8005e54 <vTaskSwitchContext+0x11c>)
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dae:	4b2a      	ldr	r3, [pc, #168]	; (8005e58 <vTaskSwitchContext+0x120>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	fab3 f383 	clz	r3, r3
 8005dba:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	f1c3 031f 	rsb	r3, r3, #31
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	4925      	ldr	r1, [pc, #148]	; (8005e5c <vTaskSwitchContext+0x124>)
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <vTaskSwitchContext+0xb6>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	607b      	str	r3, [r7, #4]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <vTaskSwitchContext+0xb4>
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <vTaskSwitchContext+0x124>)
 8005dfa:	4413      	add	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d104      	bne.n	8005e1e <vTaskSwitchContext+0xe6>
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <vTaskSwitchContext+0x118>)
 8005e26:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8005e28:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <vTaskSwitchContext+0x118>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e30:	4a08      	ldr	r2, [pc, #32]	; (8005e54 <vTaskSwitchContext+0x11c>)
 8005e32:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <vTaskSwitchContext+0x118>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3354      	adds	r3, #84	; 0x54
 8005e3a:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <vTaskSwitchContext+0x128>)
 8005e3c:	6013      	str	r3, [r2, #0]
}
 8005e3e:	bf00      	nop
 8005e40:	3720      	adds	r7, #32
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000ad0 	.word	0x20000ad0
 8005e4c:	20000abc 	.word	0x20000abc
 8005e50:	200009a4 	.word	0x200009a4
 8005e54:	20000aa4 	.word	0x20000aa4
 8005e58:	20000ab0 	.word	0x20000ab0
 8005e5c:	200009a8 	.word	0x200009a8
 8005e60:	20000010 	.word	0x20000010

08005e64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	60fb      	str	r3, [r7, #12]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <vTaskPlaceOnEventList+0x44>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3318      	adds	r3, #24
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fe fdfc 	bl	8004a90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e98:	2101      	movs	r1, #1
 8005e9a:	6838      	ldr	r0, [r7, #0]
 8005e9c:	f000 fa96 	bl	80063cc <prvAddCurrentTaskToDelayedList>
}
 8005ea0:	bf00      	nop
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	200009a4 	.word	0x200009a4

08005eac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10a      	bne.n	8005ed4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	617b      	str	r3, [r7, #20]
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3318      	adds	r3, #24
 8005eda:	4619      	mov	r1, r3
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7fe fdb3 	bl	8004a48 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	68b8      	ldr	r0, [r7, #8]
 8005ef2:	f000 fa6b 	bl	80063cc <prvAddCurrentTaskToDelayedList>
	}
 8005ef6:	bf00      	nop
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200009a4 	.word	0x200009a4

08005f04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	60fb      	str	r3, [r7, #12]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	3318      	adds	r3, #24
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe fde4 	bl	8004b02 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <xTaskRemoveFromEventList+0xac>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11c      	bne.n	8005f7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3304      	adds	r3, #4
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe fddb 	bl	8004b02 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	2201      	movs	r2, #1
 8005f52:	409a      	lsls	r2, r3
 8005f54:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <xTaskRemoveFromEventList+0xb0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <xTaskRemoveFromEventList+0xb0>)
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <xTaskRemoveFromEventList+0xb4>)
 8005f6c:	441a      	add	r2, r3
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f7fe fd67 	bl	8004a48 <vListInsertEnd>
 8005f7a:	e005      	b.n	8005f88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	3318      	adds	r3, #24
 8005f80:	4619      	mov	r1, r3
 8005f82:	480e      	ldr	r0, [pc, #56]	; (8005fbc <xTaskRemoveFromEventList+0xb8>)
 8005f84:	f7fe fd60 	bl	8004a48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <xTaskRemoveFromEventList+0xbc>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d905      	bls.n	8005fa2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f96:	2301      	movs	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <xTaskRemoveFromEventList+0xc0>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e001      	b.n	8005fa6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fa6:	697b      	ldr	r3, [r7, #20]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20000ad0 	.word	0x20000ad0
 8005fb4:	20000ab0 	.word	0x20000ab0
 8005fb8:	200009a8 	.word	0x200009a8
 8005fbc:	20000a64 	.word	0x20000a64
 8005fc0:	200009a4 	.word	0x200009a4
 8005fc4:	20000abc 	.word	0x20000abc

08005fc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <vTaskInternalSetTimeOutState+0x24>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <vTaskInternalSetTimeOutState+0x28>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	605a      	str	r2, [r3, #4]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	20000ac0 	.word	0x20000ac0
 8005ff0:	20000aac 	.word	0x20000aac

08005ff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	613b      	str	r3, [r7, #16]
}
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60fb      	str	r3, [r7, #12]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006036:	f000 feed 	bl	8006e14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800603a:	4b1d      	ldr	r3, [pc, #116]	; (80060b0 <xTaskCheckForTimeOut+0xbc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006052:	d102      	bne.n	800605a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006054:	2300      	movs	r3, #0
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	e023      	b.n	80060a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b15      	ldr	r3, [pc, #84]	; (80060b4 <xTaskCheckForTimeOut+0xc0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d007      	beq.n	8006076 <xTaskCheckForTimeOut+0x82>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	429a      	cmp	r2, r3
 800606e:	d302      	bcc.n	8006076 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	e015      	b.n	80060a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	429a      	cmp	r2, r3
 800607e:	d20b      	bcs.n	8006098 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1ad2      	subs	r2, r2, r3
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff ff9b 	bl	8005fc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	e004      	b.n	80060a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800609e:	2301      	movs	r3, #1
 80060a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060a2:	f000 fee7 	bl	8006e74 <vPortExitCritical>

	return xReturn;
 80060a6:	69fb      	ldr	r3, [r7, #28]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000aac 	.word	0x20000aac
 80060b4:	20000ac0 	.word	0x20000ac0

080060b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060bc:	4b03      	ldr	r3, [pc, #12]	; (80060cc <vTaskMissedYield+0x14>)
 80060be:	2201      	movs	r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
}
 80060c2:	bf00      	nop
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	20000abc 	.word	0x20000abc

080060d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060d8:	f000 f852 	bl	8006180 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <prvIdleTask+0x28>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d9f9      	bls.n	80060d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <prvIdleTask+0x2c>)
 80060e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060f4:	e7f0      	b.n	80060d8 <prvIdleTask+0x8>
 80060f6:	bf00      	nop
 80060f8:	200009a8 	.word	0x200009a8
 80060fc:	e000ed04 	.word	0xe000ed04

08006100 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006106:	2300      	movs	r3, #0
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	e00c      	b.n	8006126 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4a12      	ldr	r2, [pc, #72]	; (8006160 <prvInitialiseTaskLists+0x60>)
 8006118:	4413      	add	r3, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe fc67 	bl	80049ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3301      	adds	r3, #1
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b06      	cmp	r3, #6
 800612a:	d9ef      	bls.n	800610c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800612c:	480d      	ldr	r0, [pc, #52]	; (8006164 <prvInitialiseTaskLists+0x64>)
 800612e:	f7fe fc5e 	bl	80049ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006132:	480d      	ldr	r0, [pc, #52]	; (8006168 <prvInitialiseTaskLists+0x68>)
 8006134:	f7fe fc5b 	bl	80049ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006138:	480c      	ldr	r0, [pc, #48]	; (800616c <prvInitialiseTaskLists+0x6c>)
 800613a:	f7fe fc58 	bl	80049ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800613e:	480c      	ldr	r0, [pc, #48]	; (8006170 <prvInitialiseTaskLists+0x70>)
 8006140:	f7fe fc55 	bl	80049ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006144:	480b      	ldr	r0, [pc, #44]	; (8006174 <prvInitialiseTaskLists+0x74>)
 8006146:	f7fe fc52 	bl	80049ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800614a:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <prvInitialiseTaskLists+0x78>)
 800614c:	4a05      	ldr	r2, [pc, #20]	; (8006164 <prvInitialiseTaskLists+0x64>)
 800614e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <prvInitialiseTaskLists+0x7c>)
 8006152:	4a05      	ldr	r2, [pc, #20]	; (8006168 <prvInitialiseTaskLists+0x68>)
 8006154:	601a      	str	r2, [r3, #0]
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	200009a8 	.word	0x200009a8
 8006164:	20000a34 	.word	0x20000a34
 8006168:	20000a48 	.word	0x20000a48
 800616c:	20000a64 	.word	0x20000a64
 8006170:	20000a78 	.word	0x20000a78
 8006174:	20000a90 	.word	0x20000a90
 8006178:	20000a5c 	.word	0x20000a5c
 800617c:	20000a60 	.word	0x20000a60

08006180 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006186:	e019      	b.n	80061bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006188:	f000 fe44 	bl	8006e14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800618c:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <prvCheckTasksWaitingTermination+0x50>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fcb2 	bl	8004b02 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800619e:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <prvCheckTasksWaitingTermination+0x54>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	4a0b      	ldr	r2, [pc, #44]	; (80061d4 <prvCheckTasksWaitingTermination+0x54>)
 80061a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <prvCheckTasksWaitingTermination+0x58>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <prvCheckTasksWaitingTermination+0x58>)
 80061b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061b2:	f000 fe5f 	bl	8006e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f810 	bl	80061dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061bc:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <prvCheckTasksWaitingTermination+0x58>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e1      	bne.n	8006188 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000a78 	.word	0x20000a78
 80061d4:	20000aa8 	.word	0x20000aa8
 80061d8:	20000a8c 	.word	0x20000a8c

080061dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3354      	adds	r3, #84	; 0x54
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 f9b7 	bl	800755c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fffb 	bl	80071f8 <vPortFree>
				vPortFree( pxTCB );
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fff8 	bl	80071f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006208:	e018      	b.n	800623c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006210:	2b01      	cmp	r3, #1
 8006212:	d103      	bne.n	800621c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 ffef 	bl	80071f8 <vPortFree>
	}
 800621a:	e00f      	b.n	800623c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006222:	2b02      	cmp	r3, #2
 8006224:	d00a      	beq.n	800623c <prvDeleteTCB+0x60>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	60fb      	str	r3, [r7, #12]
}
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <prvDeleteTCB+0x5e>
	}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <prvResetNextTaskUnblockTime+0x38>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <prvResetNextTaskUnblockTime+0x3c>)
 8006256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800625a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800625c:	e008      	b.n	8006270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625e:	4b07      	ldr	r3, [pc, #28]	; (800627c <prvResetNextTaskUnblockTime+0x38>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4a04      	ldr	r2, [pc, #16]	; (8006280 <prvResetNextTaskUnblockTime+0x3c>)
 800626e:	6013      	str	r3, [r2, #0]
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	20000a5c 	.word	0x20000a5c
 8006280:	20000ac8 	.word	0x20000ac8

08006284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <xTaskGetSchedulerState+0x34>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006292:	2301      	movs	r3, #1
 8006294:	607b      	str	r3, [r7, #4]
 8006296:	e008      	b.n	80062aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006298:	4b08      	ldr	r3, [pc, #32]	; (80062bc <xTaskGetSchedulerState+0x38>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062a0:	2302      	movs	r3, #2
 80062a2:	607b      	str	r3, [r7, #4]
 80062a4:	e001      	b.n	80062aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062aa:	687b      	ldr	r3, [r7, #4]
	}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	20000ab4 	.word	0x20000ab4
 80062bc:	20000ad0 	.word	0x20000ad0

080062c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d06e      	beq.n	80063b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062d6:	4b3a      	ldr	r3, [pc, #232]	; (80063c0 <xTaskPriorityDisinherit+0x100>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d00a      	beq.n	80062f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60fb      	str	r3, [r7, #12]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10a      	bne.n	8006314 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	60bb      	str	r3, [r7, #8]
}
 8006310:	bf00      	nop
 8006312:	e7fe      	b.n	8006312 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006318:	1e5a      	subs	r2, r3, #1
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006326:	429a      	cmp	r2, r3
 8006328:	d044      	beq.n	80063b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d140      	bne.n	80063b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fbe3 	bl	8004b02 <uxListRemove>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d115      	bne.n	800636e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006346:	491f      	ldr	r1, [pc, #124]	; (80063c4 <xTaskPriorityDisinherit+0x104>)
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <xTaskPriorityDisinherit+0xae>
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	2201      	movs	r2, #1
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	43da      	mvns	r2, r3
 8006364:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <xTaskPriorityDisinherit+0x108>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4013      	ands	r3, r2
 800636a:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <xTaskPriorityDisinherit+0x108>)
 800636c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	f1c3 0207 	rsb	r2, r3, #7
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	2201      	movs	r2, #1
 8006388:	409a      	lsls	r2, r3
 800638a:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <xTaskPriorityDisinherit+0x108>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4313      	orrs	r3, r2
 8006390:	4a0d      	ldr	r2, [pc, #52]	; (80063c8 <xTaskPriorityDisinherit+0x108>)
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <xTaskPriorityDisinherit+0x104>)
 80063a2:	441a      	add	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fe fb4c 	bl	8004a48 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063b4:	697b      	ldr	r3, [r7, #20]
	}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200009a4 	.word	0x200009a4
 80063c4:	200009a8 	.word	0x200009a8
 80063c8:	20000ab0 	.word	0x20000ab0

080063cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063d6:	4b29      	ldr	r3, [pc, #164]	; (800647c <prvAddCurrentTaskToDelayedList+0xb0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063dc:	4b28      	ldr	r3, [pc, #160]	; (8006480 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fb8d 	bl	8004b02 <uxListRemove>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80063ee:	4b24      	ldr	r3, [pc, #144]	; (8006480 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	2201      	movs	r2, #1
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43da      	mvns	r2, r3
 80063fc:	4b21      	ldr	r3, [pc, #132]	; (8006484 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4013      	ands	r3, r2
 8006402:	4a20      	ldr	r2, [pc, #128]	; (8006484 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006404:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640c:	d10a      	bne.n	8006424 <prvAddCurrentTaskToDelayedList+0x58>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006414:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3304      	adds	r3, #4
 800641a:	4619      	mov	r1, r3
 800641c:	481a      	ldr	r0, [pc, #104]	; (8006488 <prvAddCurrentTaskToDelayedList+0xbc>)
 800641e:	f7fe fb13 	bl	8004a48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006422:	e026      	b.n	8006472 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4413      	add	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800642c:	4b14      	ldr	r3, [pc, #80]	; (8006480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d209      	bcs.n	8006450 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800643c:	4b13      	ldr	r3, [pc, #76]	; (800648c <prvAddCurrentTaskToDelayedList+0xc0>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fe fb21 	bl	8004a90 <vListInsert>
}
 800644e:	e010      	b.n	8006472 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006450:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3304      	adds	r3, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f7fe fb17 	bl	8004a90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006462:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	429a      	cmp	r2, r3
 800646a:	d202      	bcs.n	8006472 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800646c:	4a09      	ldr	r2, [pc, #36]	; (8006494 <prvAddCurrentTaskToDelayedList+0xc8>)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6013      	str	r3, [r2, #0]
}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000aac 	.word	0x20000aac
 8006480:	200009a4 	.word	0x200009a4
 8006484:	20000ab0 	.word	0x20000ab0
 8006488:	20000a90 	.word	0x20000a90
 800648c:	20000a60 	.word	0x20000a60
 8006490:	20000a5c 	.word	0x20000a5c
 8006494:	20000ac8 	.word	0x20000ac8

08006498 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064a2:	f000 fb47 	bl	8006b34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064a6:	4b1c      	ldr	r3, [pc, #112]	; (8006518 <xTimerCreateTimerTask+0x80>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d021      	beq.n	80064f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064b6:	1d3a      	adds	r2, r7, #4
 80064b8:	f107 0108 	add.w	r1, r7, #8
 80064bc:	f107 030c 	add.w	r3, r7, #12
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fa f853 	bl	800056c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	9202      	str	r2, [sp, #8]
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	2302      	movs	r3, #2
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2300      	movs	r3, #0
 80064d6:	460a      	mov	r2, r1
 80064d8:	4910      	ldr	r1, [pc, #64]	; (800651c <xTimerCreateTimerTask+0x84>)
 80064da:	4811      	ldr	r0, [pc, #68]	; (8006520 <xTimerCreateTimerTask+0x88>)
 80064dc:	f7ff f85e 	bl	800559c <xTaskCreateStatic>
 80064e0:	4603      	mov	r3, r0
 80064e2:	4a10      	ldr	r2, [pc, #64]	; (8006524 <xTimerCreateTimerTask+0x8c>)
 80064e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064e6:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <xTimerCreateTimerTask+0x8c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064ee:	2301      	movs	r3, #1
 80064f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	613b      	str	r3, [r7, #16]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800650e:	697b      	ldr	r3, [r7, #20]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000b04 	.word	0x20000b04
 800651c:	0800767c 	.word	0x0800767c
 8006520:	08006715 	.word	0x08006715
 8006524:	20000b08 	.word	0x20000b08

08006528 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006536:	2028      	movs	r0, #40	; 0x28
 8006538:	f000 fd8e 	bl	8007058 <pvPortMalloc>
 800653c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00d      	beq.n	8006560 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f805 	bl	800656a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006560:	697b      	ldr	r3, [r7, #20]
	}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b086      	sub	sp, #24
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	607a      	str	r2, [r7, #4]
 8006576:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	617b      	str	r3, [r7, #20]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d01e      	beq.n	80065d8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800659a:	f000 facb 	bl	8006b34 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	6a3a      	ldr	r2, [r7, #32]
 80065b4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	3304      	adds	r3, #4
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fa37 	bl	8004a2e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065cc:	f043 0304 	orr.w	r3, r3, #4
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80065d8:	bf00      	nop
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <xTimerGenericCommand+0x2e>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	623b      	str	r3, [r7, #32]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800660e:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <xTimerGenericCommand+0x98>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d02a      	beq.n	800666c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b05      	cmp	r3, #5
 8006626:	dc18      	bgt.n	800665a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006628:	f7ff fe2c 	bl	8006284 <xTaskGetSchedulerState>
 800662c:	4603      	mov	r3, r0
 800662e:	2b02      	cmp	r3, #2
 8006630:	d109      	bne.n	8006646 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <xTimerGenericCommand+0x98>)
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	f107 0114 	add.w	r1, r7, #20
 800663a:	2300      	movs	r3, #0
 800663c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800663e:	f7fe fbc5 	bl	8004dcc <xQueueGenericSend>
 8006642:	6278      	str	r0, [r7, #36]	; 0x24
 8006644:	e012      	b.n	800666c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <xTimerGenericCommand+0x98>)
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	f107 0114 	add.w	r1, r7, #20
 800664e:	2300      	movs	r3, #0
 8006650:	2200      	movs	r2, #0
 8006652:	f7fe fbbb 	bl	8004dcc <xQueueGenericSend>
 8006656:	6278      	str	r0, [r7, #36]	; 0x24
 8006658:	e008      	b.n	800666c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <xTimerGenericCommand+0x98>)
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	f107 0114 	add.w	r1, r7, #20
 8006662:	2300      	movs	r3, #0
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	f7fe fcaf 	bl	8004fc8 <xQueueGenericSendFromISR>
 800666a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800666e:	4618      	mov	r0, r3
 8006670:	3728      	adds	r7, #40	; 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000b04 	.word	0x20000b04

0800667c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af02      	add	r7, sp, #8
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006686:	4b22      	ldr	r3, [pc, #136]	; (8006710 <prvProcessExpiredTimer+0x94>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	3304      	adds	r3, #4
 8006694:	4618      	mov	r0, r3
 8006696:	f7fe fa34 	bl	8004b02 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d022      	beq.n	80066ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	699a      	ldr	r2, [r3, #24]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	18d1      	adds	r1, r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	6978      	ldr	r0, [r7, #20]
 80066b6:	f000 f8d1 	bl	800685c <prvInsertTimerInActiveList>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01f      	beq.n	8006700 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066c0:	2300      	movs	r3, #0
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	2100      	movs	r1, #0
 80066ca:	6978      	ldr	r0, [r7, #20]
 80066cc:	f7ff ff88 	bl	80065e0 <xTimerGenericCommand>
 80066d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d113      	bne.n	8006700 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	60fb      	str	r3, [r7, #12]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	6978      	ldr	r0, [r7, #20]
 8006706:	4798      	blx	r3
}
 8006708:	bf00      	nop
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000afc 	.word	0x20000afc

08006714 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f857 	bl	80067d4 <prvGetNextExpireTime>
 8006726:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4619      	mov	r1, r3
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f803 	bl	8006738 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006732:	f000 f8d5 	bl	80068e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006736:	e7f1      	b.n	800671c <prvTimerTask+0x8>

08006738 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006742:	f7ff f987 	bl	8005a54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006746:	f107 0308 	add.w	r3, r7, #8
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f866 	bl	800681c <prvSampleTimeNow>
 8006750:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d130      	bne.n	80067ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <prvProcessTimerOrBlockTask+0x3c>
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	429a      	cmp	r2, r3
 8006764:	d806      	bhi.n	8006774 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006766:	f7ff f983 	bl	8005a70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800676a:	68f9      	ldr	r1, [r7, #12]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff ff85 	bl	800667c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006772:	e024      	b.n	80067be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d008      	beq.n	800678c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800677a:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <prvProcessTimerOrBlockTask+0x90>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <prvProcessTimerOrBlockTask+0x50>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <prvProcessTimerOrBlockTask+0x52>
 8006788:	2300      	movs	r3, #0
 800678a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <prvProcessTimerOrBlockTask+0x94>)
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4619      	mov	r1, r3
 800679a:	f7fe fecb 	bl	8005534 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800679e:	f7ff f967 	bl	8005a70 <xTaskResumeAll>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067a8:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <prvProcessTimerOrBlockTask+0x98>)
 80067aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	f3bf 8f6f 	isb	sy
}
 80067b8:	e001      	b.n	80067be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067ba:	f7ff f959 	bl	8005a70 <xTaskResumeAll>
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000b00 	.word	0x20000b00
 80067cc:	20000b04 	.word	0x20000b04
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067dc:	4b0e      	ldr	r3, [pc, #56]	; (8006818 <prvGetNextExpireTime+0x44>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <prvGetNextExpireTime+0x16>
 80067e6:	2201      	movs	r2, #1
 80067e8:	e000      	b.n	80067ec <prvGetNextExpireTime+0x18>
 80067ea:	2200      	movs	r2, #0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <prvGetNextExpireTime+0x44>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e001      	b.n	8006808 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20000afc 	.word	0x20000afc

0800681c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006824:	f7ff f9c0 	bl	8005ba8 <xTaskGetTickCount>
 8006828:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <prvSampleTimeNow+0x3c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	429a      	cmp	r2, r3
 8006832:	d205      	bcs.n	8006840 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006834:	f000 f91a 	bl	8006a6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e002      	b.n	8006846 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006846:	4a04      	ldr	r2, [pc, #16]	; (8006858 <prvSampleTimeNow+0x3c>)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000b0c 	.word	0x20000b0c

0800685c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	429a      	cmp	r2, r3
 8006880:	d812      	bhi.n	80068a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	429a      	cmp	r2, r3
 800688e:	d302      	bcc.n	8006896 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e01b      	b.n	80068ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006896:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <prvInsertTimerInActiveList+0x7c>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3304      	adds	r3, #4
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7fe f8f5 	bl	8004a90 <vListInsert>
 80068a6:	e012      	b.n	80068ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d206      	bcs.n	80068be <prvInsertTimerInActiveList+0x62>
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d302      	bcc.n	80068be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e007      	b.n	80068ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068be:	4b07      	ldr	r3, [pc, #28]	; (80068dc <prvInsertTimerInActiveList+0x80>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4619      	mov	r1, r3
 80068c8:	4610      	mov	r0, r2
 80068ca:	f7fe f8e1 	bl	8004a90 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068ce:	697b      	ldr	r3, [r7, #20]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000b00 	.word	0x20000b00
 80068dc:	20000afc 	.word	0x20000afc

080068e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08c      	sub	sp, #48	; 0x30
 80068e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068e6:	e0ae      	b.n	8006a46 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f2c0 80aa 	blt.w	8006a44 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	3304      	adds	r3, #4
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe f8fe 	bl	8004b02 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff ff87 	bl	800681c <prvSampleTimeNow>
 800690e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b09      	cmp	r3, #9
 8006914:	f200 8097 	bhi.w	8006a46 <prvProcessReceivedCommands+0x166>
 8006918:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <prvProcessReceivedCommands+0x40>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	08006949 	.word	0x08006949
 8006924:	08006949 	.word	0x08006949
 8006928:	08006949 	.word	0x08006949
 800692c:	080069bd 	.word	0x080069bd
 8006930:	080069d1 	.word	0x080069d1
 8006934:	08006a1b 	.word	0x08006a1b
 8006938:	08006949 	.word	0x08006949
 800693c:	08006949 	.word	0x08006949
 8006940:	080069bd 	.word	0x080069bd
 8006944:	080069d1 	.word	0x080069d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	18d1      	adds	r1, r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006968:	f7ff ff78 	bl	800685c <prvInsertTimerInActiveList>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d069      	beq.n	8006a46 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006978:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d05e      	beq.n	8006a46 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	441a      	add	r2, r3
 8006990:	2300      	movs	r3, #0
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	2300      	movs	r3, #0
 8006996:	2100      	movs	r1, #0
 8006998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800699a:	f7ff fe21 	bl	80065e0 <xTimerGenericCommand>
 800699e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d14f      	bne.n	8006a46 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	61bb      	str	r3, [r7, #24]
}
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069c2:	f023 0301 	bic.w	r3, r3, #1
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80069ce:	e03a      	b.n	8006a46 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069d6:	f043 0301 	orr.w	r3, r3, #1
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	617b      	str	r3, [r7, #20]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	18d1      	adds	r1, r2, r3
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a14:	f7ff ff22 	bl	800685c <prvInsertTimerInActiveList>
					break;
 8006a18:	e015      	b.n	8006a46 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d103      	bne.n	8006a30 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8006a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a2a:	f000 fbe5 	bl	80071f8 <vPortFree>
 8006a2e:	e00a      	b.n	8006a46 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a36:	f023 0301 	bic.w	r3, r3, #1
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a42:	e000      	b.n	8006a46 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a46:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <prvProcessReceivedCommands+0x188>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f107 0108 	add.w	r1, r7, #8
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe fb55 	bl	8005100 <xQueueReceive>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f47f af45 	bne.w	80068e8 <prvProcessReceivedCommands+0x8>
	}
}
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
 8006a62:	3728      	adds	r7, #40	; 0x28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000b04 	.word	0x20000b04

08006a6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a72:	e048      	b.n	8006b06 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a74:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <prvSwitchTimerLists+0xc0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a7e:	4b2b      	ldr	r3, [pc, #172]	; (8006b2c <prvSwitchTimerLists+0xc0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe f838 	bl	8004b02 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d02e      	beq.n	8006b06 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4413      	add	r3, r2
 8006ab0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d90e      	bls.n	8006ad8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ac6:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <prvSwitchTimerLists+0xc0>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3304      	adds	r3, #4
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f7fd ffdd 	bl	8004a90 <vListInsert>
 8006ad6:	e016      	b.n	8006b06 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ad8:	2300      	movs	r3, #0
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	2300      	movs	r3, #0
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff fd7c 	bl	80065e0 <xTimerGenericCommand>
 8006ae8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	603b      	str	r3, [r7, #0]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <prvSwitchTimerLists+0xc0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1b1      	bne.n	8006a74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <prvSwitchTimerLists+0xc0>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <prvSwitchTimerLists+0xc4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a04      	ldr	r2, [pc, #16]	; (8006b2c <prvSwitchTimerLists+0xc0>)
 8006b1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b1e:	4a04      	ldr	r2, [pc, #16]	; (8006b30 <prvSwitchTimerLists+0xc4>)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	6013      	str	r3, [r2, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000afc 	.word	0x20000afc
 8006b30:	20000b00 	.word	0x20000b00

08006b34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b3a:	f000 f96b 	bl	8006e14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b3e:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d120      	bne.n	8006b88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b46:	4814      	ldr	r0, [pc, #80]	; (8006b98 <prvCheckForValidListAndQueue+0x64>)
 8006b48:	f7fd ff51 	bl	80049ee <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b4c:	4813      	ldr	r0, [pc, #76]	; (8006b9c <prvCheckForValidListAndQueue+0x68>)
 8006b4e:	f7fd ff4e 	bl	80049ee <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <prvCheckForValidListAndQueue+0x6c>)
 8006b54:	4a10      	ldr	r2, [pc, #64]	; (8006b98 <prvCheckForValidListAndQueue+0x64>)
 8006b56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b58:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <prvCheckForValidListAndQueue+0x70>)
 8006b5a:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <prvCheckForValidListAndQueue+0x68>)
 8006b5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <prvCheckForValidListAndQueue+0x74>)
 8006b64:	4a11      	ldr	r2, [pc, #68]	; (8006bac <prvCheckForValidListAndQueue+0x78>)
 8006b66:	210c      	movs	r1, #12
 8006b68:	200a      	movs	r0, #10
 8006b6a:	f7fe f85d 	bl	8004c28 <xQueueGenericCreateStatic>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	490b      	ldr	r1, [pc, #44]	; (8006bb0 <prvCheckForValidListAndQueue+0x7c>)
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fcac 	bl	80054e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b88:	f000 f974 	bl	8006e74 <vPortExitCritical>
}
 8006b8c:	bf00      	nop
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000b04 	.word	0x20000b04
 8006b98:	20000ad4 	.word	0x20000ad4
 8006b9c:	20000ae8 	.word	0x20000ae8
 8006ba0:	20000afc 	.word	0x20000afc
 8006ba4:	20000b00 	.word	0x20000b00
 8006ba8:	20000b88 	.word	0x20000b88
 8006bac:	20000b10 	.word	0x20000b10
 8006bb0:	08007684 	.word	0x08007684

08006bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3b04      	subs	r3, #4
 8006bc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3b04      	subs	r3, #4
 8006bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f023 0201 	bic.w	r2, r3, #1
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b04      	subs	r3, #4
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006be4:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <pxPortInitialiseStack+0x64>)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3b14      	subs	r3, #20
 8006bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3b04      	subs	r3, #4
 8006bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f06f 0202 	mvn.w	r2, #2
 8006c02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3b20      	subs	r3, #32
 8006c08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	08006c1d 	.word	0x08006c1d

08006c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c26:	4b12      	ldr	r3, [pc, #72]	; (8006c70 <prvTaskExitError+0x54>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c2e:	d00a      	beq.n	8006c46 <prvTaskExitError+0x2a>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	60fb      	str	r3, [r7, #12]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <prvTaskExitError+0x28>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60bb      	str	r3, [r7, #8]
}
 8006c58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c5a:	bf00      	nop
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0fc      	beq.n	8006c5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	2000000c 	.word	0x2000000c
	...

08006c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <pxCurrentTCBConst2>)
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	6808      	ldr	r0, [r1, #0]
 8006c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8a:	f380 8809 	msr	PSP, r0
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8811 	msr	BASEPRI, r0
 8006c9a:	4770      	bx	lr
 8006c9c:	f3af 8000 	nop.w

08006ca0 <pxCurrentTCBConst2>:
 8006ca0:	200009a4 	.word	0x200009a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ca8:	4808      	ldr	r0, [pc, #32]	; (8006ccc <prvPortStartFirstTask+0x24>)
 8006caa:	6800      	ldr	r0, [r0, #0]
 8006cac:	6800      	ldr	r0, [r0, #0]
 8006cae:	f380 8808 	msr	MSP, r0
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f380 8814 	msr	CONTROL, r0
 8006cba:	b662      	cpsie	i
 8006cbc:	b661      	cpsie	f
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	df00      	svc	0
 8006cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cca:	bf00      	nop
 8006ccc:	e000ed08 	.word	0xe000ed08

08006cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cd6:	4b46      	ldr	r3, [pc, #280]	; (8006df0 <xPortStartScheduler+0x120>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a46      	ldr	r2, [pc, #280]	; (8006df4 <xPortStartScheduler+0x124>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d10a      	bne.n	8006cf6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	613b      	str	r3, [r7, #16]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cf6:	4b3e      	ldr	r3, [pc, #248]	; (8006df0 <xPortStartScheduler+0x120>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a3f      	ldr	r2, [pc, #252]	; (8006df8 <xPortStartScheduler+0x128>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d10a      	bne.n	8006d16 <xPortStartScheduler+0x46>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	60fb      	str	r3, [r7, #12]
}
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d16:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <xPortStartScheduler+0x12c>)
 8006d18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	22ff      	movs	r2, #255	; 0xff
 8006d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	4b31      	ldr	r3, [pc, #196]	; (8006e00 <xPortStartScheduler+0x130>)
 8006d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d3e:	4b31      	ldr	r3, [pc, #196]	; (8006e04 <xPortStartScheduler+0x134>)
 8006d40:	2207      	movs	r2, #7
 8006d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d44:	e009      	b.n	8006d5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d46:	4b2f      	ldr	r3, [pc, #188]	; (8006e04 <xPortStartScheduler+0x134>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	4a2d      	ldr	r2, [pc, #180]	; (8006e04 <xPortStartScheduler+0x134>)
 8006d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b80      	cmp	r3, #128	; 0x80
 8006d64:	d0ef      	beq.n	8006d46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d66:	4b27      	ldr	r3, [pc, #156]	; (8006e04 <xPortStartScheduler+0x134>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f1c3 0307 	rsb	r3, r3, #7
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d00a      	beq.n	8006d88 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	60bb      	str	r3, [r7, #8]
}
 8006d84:	bf00      	nop
 8006d86:	e7fe      	b.n	8006d86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d88:	4b1e      	ldr	r3, [pc, #120]	; (8006e04 <xPortStartScheduler+0x134>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <xPortStartScheduler+0x134>)
 8006d90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d92:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <xPortStartScheduler+0x134>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d9a:	4a1a      	ldr	r2, [pc, #104]	; (8006e04 <xPortStartScheduler+0x134>)
 8006d9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006da6:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <xPortStartScheduler+0x138>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <xPortStartScheduler+0x138>)
 8006dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006db2:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <xPortStartScheduler+0x138>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a14      	ldr	r2, [pc, #80]	; (8006e08 <xPortStartScheduler+0x138>)
 8006db8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006dbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006dbe:	f000 f8dd 	bl	8006f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006dc2:	4b12      	ldr	r3, [pc, #72]	; (8006e0c <xPortStartScheduler+0x13c>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006dc8:	f000 f8fc 	bl	8006fc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006dcc:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <xPortStartScheduler+0x140>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a0f      	ldr	r2, [pc, #60]	; (8006e10 <xPortStartScheduler+0x140>)
 8006dd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006dd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dd8:	f7ff ff66 	bl	8006ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ddc:	f7fe ffac 	bl	8005d38 <vTaskSwitchContext>
	prvTaskExitError();
 8006de0:	f7ff ff1c 	bl	8006c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	e000ed00 	.word	0xe000ed00
 8006df4:	410fc271 	.word	0x410fc271
 8006df8:	410fc270 	.word	0x410fc270
 8006dfc:	e000e400 	.word	0xe000e400
 8006e00:	20000bd0 	.word	0x20000bd0
 8006e04:	20000bd4 	.word	0x20000bd4
 8006e08:	e000ed20 	.word	0xe000ed20
 8006e0c:	2000000c 	.word	0x2000000c
 8006e10:	e000ef34 	.word	0xe000ef34

08006e14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	607b      	str	r3, [r7, #4]
}
 8006e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <vPortEnterCritical+0x58>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3301      	adds	r3, #1
 8006e34:	4a0d      	ldr	r2, [pc, #52]	; (8006e6c <vPortEnterCritical+0x58>)
 8006e36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e38:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <vPortEnterCritical+0x58>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d10f      	bne.n	8006e60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <vPortEnterCritical+0x5c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	603b      	str	r3, [r7, #0]
}
 8006e5c:	bf00      	nop
 8006e5e:	e7fe      	b.n	8006e5e <vPortEnterCritical+0x4a>
	}
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	2000000c 	.word	0x2000000c
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e7a:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <vPortExitCritical+0x50>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <vPortExitCritical+0x24>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	607b      	str	r3, [r7, #4]
}
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <vPortExitCritical+0x50>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <vPortExitCritical+0x50>)
 8006ea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ea2:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <vPortExitCritical+0x50>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d105      	bne.n	8006eb6 <vPortExitCritical+0x42>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	f383 8811 	msr	BASEPRI, r3
}
 8006eb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	2000000c 	.word	0x2000000c
	...

08006ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ed0:	f3ef 8009 	mrs	r0, PSP
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <pxCurrentTCBConst>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	f01e 0f10 	tst.w	lr, #16
 8006ee0:	bf08      	it	eq
 8006ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eea:	6010      	str	r0, [r2, #0]
 8006eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ef4:	f380 8811 	msr	BASEPRI, r0
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f7fe ff1a 	bl	8005d38 <vTaskSwitchContext>
 8006f04:	f04f 0000 	mov.w	r0, #0
 8006f08:	f380 8811 	msr	BASEPRI, r0
 8006f0c:	bc09      	pop	{r0, r3}
 8006f0e:	6819      	ldr	r1, [r3, #0]
 8006f10:	6808      	ldr	r0, [r1, #0]
 8006f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f16:	f01e 0f10 	tst.w	lr, #16
 8006f1a:	bf08      	it	eq
 8006f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f20:	f380 8809 	msr	PSP, r0
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	f3af 8000 	nop.w

08006f30 <pxCurrentTCBConst>:
 8006f30:	200009a4 	.word	0x200009a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop

08006f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	607b      	str	r3, [r7, #4]
}
 8006f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f52:	f7fe fe39 	bl	8005bc8 <xTaskIncrementTick>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <SysTick_Handler+0x40>)
 8006f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	2300      	movs	r3, #0
 8006f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	f383 8811 	msr	BASEPRI, r3
}
 8006f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <vPortSetupTimerInterrupt+0x34>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f86:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <vPortSetupTimerInterrupt+0x38>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f8c:	4b0a      	ldr	r3, [pc, #40]	; (8006fb8 <vPortSetupTimerInterrupt+0x3c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <vPortSetupTimerInterrupt+0x40>)
 8006f92:	fba2 2303 	umull	r2, r3, r2, r3
 8006f96:	099b      	lsrs	r3, r3, #6
 8006f98:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <vPortSetupTimerInterrupt+0x44>)
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f9e:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <vPortSetupTimerInterrupt+0x34>)
 8006fa0:	2207      	movs	r2, #7
 8006fa2:	601a      	str	r2, [r3, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	e000e010 	.word	0xe000e010
 8006fb4:	e000e018 	.word	0xe000e018
 8006fb8:	20000000 	.word	0x20000000
 8006fbc:	10624dd3 	.word	0x10624dd3
 8006fc0:	e000e014 	.word	0xe000e014

08006fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fd4 <vPortEnableVFP+0x10>
 8006fc8:	6801      	ldr	r1, [r0, #0]
 8006fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fce:	6001      	str	r1, [r0, #0]
 8006fd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fd2:	bf00      	nop
 8006fd4:	e000ed88 	.word	0xe000ed88

08006fd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fde:	f3ef 8305 	mrs	r3, IPSR
 8006fe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b0f      	cmp	r3, #15
 8006fe8:	d914      	bls.n	8007014 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fea:	4a17      	ldr	r2, [pc, #92]	; (8007048 <vPortValidateInterruptPriority+0x70>)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ff4:	4b15      	ldr	r3, [pc, #84]	; (800704c <vPortValidateInterruptPriority+0x74>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	7afa      	ldrb	r2, [r7, #11]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d20a      	bcs.n	8007014 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	607b      	str	r3, [r7, #4]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007014:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <vPortValidateInterruptPriority+0x78>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800701c:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <vPortValidateInterruptPriority+0x7c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d90a      	bls.n	800703a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	603b      	str	r3, [r7, #0]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <vPortValidateInterruptPriority+0x60>
	}
 800703a:	bf00      	nop
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	e000e3f0 	.word	0xe000e3f0
 800704c:	20000bd0 	.word	0x20000bd0
 8007050:	e000ed0c 	.word	0xe000ed0c
 8007054:	20000bd4 	.word	0x20000bd4

08007058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	; 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007064:	f7fe fcf6 	bl	8005a54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007068:	4b5d      	ldr	r3, [pc, #372]	; (80071e0 <pvPortMalloc+0x188>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007070:	f000 f924 	bl	80072bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007074:	4b5b      	ldr	r3, [pc, #364]	; (80071e4 <pvPortMalloc+0x18c>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4013      	ands	r3, r2
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 8093 	bne.w	80071a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01d      	beq.n	80070c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007088:	2208      	movs	r2, #8
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4413      	add	r3, r2
 800708e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	2b00      	cmp	r3, #0
 8007098:	d014      	beq.n	80070c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f023 0307 	bic.w	r3, r3, #7
 80070a0:	3308      	adds	r3, #8
 80070a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <pvPortMalloc+0x6c>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	617b      	str	r3, [r7, #20]
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d06e      	beq.n	80071a8 <pvPortMalloc+0x150>
 80070ca:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <pvPortMalloc+0x190>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d869      	bhi.n	80071a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070d4:	4b45      	ldr	r3, [pc, #276]	; (80071ec <pvPortMalloc+0x194>)
 80070d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070d8:	4b44      	ldr	r3, [pc, #272]	; (80071ec <pvPortMalloc+0x194>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070de:	e004      	b.n	80070ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d903      	bls.n	80070fc <pvPortMalloc+0xa4>
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f1      	bne.n	80070e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070fc:	4b38      	ldr	r3, [pc, #224]	; (80071e0 <pvPortMalloc+0x188>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007102:	429a      	cmp	r2, r3
 8007104:	d050      	beq.n	80071a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2208      	movs	r2, #8
 800710c:	4413      	add	r3, r2
 800710e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	2308      	movs	r3, #8
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	429a      	cmp	r2, r3
 8007126:	d91f      	bls.n	8007168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <pvPortMalloc+0xf8>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	613b      	str	r3, [r7, #16]
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007162:	69b8      	ldr	r0, [r7, #24]
 8007164:	f000 f90c 	bl	8007380 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007168:	4b1f      	ldr	r3, [pc, #124]	; (80071e8 <pvPortMalloc+0x190>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <pvPortMalloc+0x190>)
 8007174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <pvPortMalloc+0x190>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <pvPortMalloc+0x198>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d203      	bcs.n	800718a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007182:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <pvPortMalloc+0x190>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1a      	ldr	r2, [pc, #104]	; (80071f0 <pvPortMalloc+0x198>)
 8007188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	4b15      	ldr	r3, [pc, #84]	; (80071e4 <pvPortMalloc+0x18c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	431a      	orrs	r2, r3
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800719e:	4b15      	ldr	r3, [pc, #84]	; (80071f4 <pvPortMalloc+0x19c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	4a13      	ldr	r2, [pc, #76]	; (80071f4 <pvPortMalloc+0x19c>)
 80071a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071a8:	f7fe fc62 	bl	8005a70 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80071b2:	f7f9 f9ba 	bl	800052a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <pvPortMalloc+0x17e>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	60fb      	str	r3, [r7, #12]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <pvPortMalloc+0x17c>
	return pvReturn;
 80071d6:	69fb      	ldr	r3, [r7, #28]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3728      	adds	r7, #40	; 0x28
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20008be0 	.word	0x20008be0
 80071e4:	20008bf4 	.word	0x20008bf4
 80071e8:	20008be4 	.word	0x20008be4
 80071ec:	20008bd8 	.word	0x20008bd8
 80071f0:	20008be8 	.word	0x20008be8
 80071f4:	20008bec 	.word	0x20008bec

080071f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d04d      	beq.n	80072a6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800720a:	2308      	movs	r3, #8
 800720c:	425b      	negs	r3, r3
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	4413      	add	r3, r2
 8007212:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <vPortFree+0xb8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4013      	ands	r3, r2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <vPortFree+0x44>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60fb      	str	r3, [r7, #12]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <vPortFree+0x62>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60bb      	str	r3, [r7, #8]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <vPortFree+0xb8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4013      	ands	r3, r2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01e      	beq.n	80072a6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d11a      	bne.n	80072a6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <vPortFree+0xb8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	43db      	mvns	r3, r3
 800727a:	401a      	ands	r2, r3
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007280:	f7fe fbe8 	bl	8005a54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <vPortFree+0xbc>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4413      	add	r3, r2
 800728e:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <vPortFree+0xbc>)
 8007290:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007292:	6938      	ldr	r0, [r7, #16]
 8007294:	f000 f874 	bl	8007380 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <vPortFree+0xc0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	4a06      	ldr	r2, [pc, #24]	; (80072b8 <vPortFree+0xc0>)
 80072a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072a2:	f7fe fbe5 	bl	8005a70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072a6:	bf00      	nop
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20008bf4 	.word	0x20008bf4
 80072b4:	20008be4 	.word	0x20008be4
 80072b8:	20008bf0 	.word	0x20008bf0

080072bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072c8:	4b27      	ldr	r3, [pc, #156]	; (8007368 <prvHeapInit+0xac>)
 80072ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3307      	adds	r3, #7
 80072da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0307 	bic.w	r3, r3, #7
 80072e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	4a1f      	ldr	r2, [pc, #124]	; (8007368 <prvHeapInit+0xac>)
 80072ec:	4413      	add	r3, r2
 80072ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072f4:	4a1d      	ldr	r2, [pc, #116]	; (800736c <prvHeapInit+0xb0>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072fa:	4b1c      	ldr	r3, [pc, #112]	; (800736c <prvHeapInit+0xb0>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	4413      	add	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007308:	2208      	movs	r2, #8
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0307 	bic.w	r3, r3, #7
 8007316:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4a15      	ldr	r2, [pc, #84]	; (8007370 <prvHeapInit+0xb4>)
 800731c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800731e:	4b14      	ldr	r3, [pc, #80]	; (8007370 <prvHeapInit+0xb4>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2200      	movs	r2, #0
 8007324:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007326:	4b12      	ldr	r3, [pc, #72]	; (8007370 <prvHeapInit+0xb4>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <prvHeapInit+0xb4>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <prvHeapInit+0xb8>)
 800734a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	4a09      	ldr	r2, [pc, #36]	; (8007378 <prvHeapInit+0xbc>)
 8007352:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007354:	4b09      	ldr	r3, [pc, #36]	; (800737c <prvHeapInit+0xc0>)
 8007356:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800735a:	601a      	str	r2, [r3, #0]
}
 800735c:	bf00      	nop
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	20000bd8 	.word	0x20000bd8
 800736c:	20008bd8 	.word	0x20008bd8
 8007370:	20008be0 	.word	0x20008be0
 8007374:	20008be8 	.word	0x20008be8
 8007378:	20008be4 	.word	0x20008be4
 800737c:	20008bf4 	.word	0x20008bf4

08007380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007388:	4b28      	ldr	r3, [pc, #160]	; (800742c <prvInsertBlockIntoFreeList+0xac>)
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	e002      	b.n	8007394 <prvInsertBlockIntoFreeList+0x14>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d8f7      	bhi.n	800738e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	4413      	add	r3, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d108      	bne.n	80073c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	441a      	add	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	441a      	add	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d118      	bne.n	8007408 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	4b15      	ldr	r3, [pc, #84]	; (8007430 <prvInsertBlockIntoFreeList+0xb0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d00d      	beq.n	80073fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	441a      	add	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	e008      	b.n	8007410 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073fe:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <prvInsertBlockIntoFreeList+0xb0>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e003      	b.n	8007410 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d002      	beq.n	800741e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800741e:	bf00      	nop
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	20008bd8 	.word	0x20008bd8
 8007430:	20008be0 	.word	0x20008be0

08007434 <__libc_init_array>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	4d0d      	ldr	r5, [pc, #52]	; (800746c <__libc_init_array+0x38>)
 8007438:	4c0d      	ldr	r4, [pc, #52]	; (8007470 <__libc_init_array+0x3c>)
 800743a:	1b64      	subs	r4, r4, r5
 800743c:	10a4      	asrs	r4, r4, #2
 800743e:	2600      	movs	r6, #0
 8007440:	42a6      	cmp	r6, r4
 8007442:	d109      	bne.n	8007458 <__libc_init_array+0x24>
 8007444:	4d0b      	ldr	r5, [pc, #44]	; (8007474 <__libc_init_array+0x40>)
 8007446:	4c0c      	ldr	r4, [pc, #48]	; (8007478 <__libc_init_array+0x44>)
 8007448:	f000 f8f0 	bl	800762c <_init>
 800744c:	1b64      	subs	r4, r4, r5
 800744e:	10a4      	asrs	r4, r4, #2
 8007450:	2600      	movs	r6, #0
 8007452:	42a6      	cmp	r6, r4
 8007454:	d105      	bne.n	8007462 <__libc_init_array+0x2e>
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	f855 3b04 	ldr.w	r3, [r5], #4
 800745c:	4798      	blx	r3
 800745e:	3601      	adds	r6, #1
 8007460:	e7ee      	b.n	8007440 <__libc_init_array+0xc>
 8007462:	f855 3b04 	ldr.w	r3, [r5], #4
 8007466:	4798      	blx	r3
 8007468:	3601      	adds	r6, #1
 800746a:	e7f2      	b.n	8007452 <__libc_init_array+0x1e>
 800746c:	0800770c 	.word	0x0800770c
 8007470:	0800770c 	.word	0x0800770c
 8007474:	0800770c 	.word	0x0800770c
 8007478:	08007710 	.word	0x08007710

0800747c <memcpy>:
 800747c:	440a      	add	r2, r1
 800747e:	4291      	cmp	r1, r2
 8007480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007484:	d100      	bne.n	8007488 <memcpy+0xc>
 8007486:	4770      	bx	lr
 8007488:	b510      	push	{r4, lr}
 800748a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007492:	4291      	cmp	r1, r2
 8007494:	d1f9      	bne.n	800748a <memcpy+0xe>
 8007496:	bd10      	pop	{r4, pc}

08007498 <memset>:
 8007498:	4402      	add	r2, r0
 800749a:	4603      	mov	r3, r0
 800749c:	4293      	cmp	r3, r2
 800749e:	d100      	bne.n	80074a2 <memset+0xa>
 80074a0:	4770      	bx	lr
 80074a2:	f803 1b01 	strb.w	r1, [r3], #1
 80074a6:	e7f9      	b.n	800749c <memset+0x4>

080074a8 <_free_r>:
 80074a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074aa:	2900      	cmp	r1, #0
 80074ac:	d044      	beq.n	8007538 <_free_r+0x90>
 80074ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b2:	9001      	str	r0, [sp, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f1a1 0404 	sub.w	r4, r1, #4
 80074ba:	bfb8      	it	lt
 80074bc:	18e4      	addlt	r4, r4, r3
 80074be:	f000 f8a9 	bl	8007614 <__malloc_lock>
 80074c2:	4a1e      	ldr	r2, [pc, #120]	; (800753c <_free_r+0x94>)
 80074c4:	9801      	ldr	r0, [sp, #4]
 80074c6:	6813      	ldr	r3, [r2, #0]
 80074c8:	b933      	cbnz	r3, 80074d8 <_free_r+0x30>
 80074ca:	6063      	str	r3, [r4, #4]
 80074cc:	6014      	str	r4, [r2, #0]
 80074ce:	b003      	add	sp, #12
 80074d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074d4:	f000 b8a4 	b.w	8007620 <__malloc_unlock>
 80074d8:	42a3      	cmp	r3, r4
 80074da:	d908      	bls.n	80074ee <_free_r+0x46>
 80074dc:	6825      	ldr	r5, [r4, #0]
 80074de:	1961      	adds	r1, r4, r5
 80074e0:	428b      	cmp	r3, r1
 80074e2:	bf01      	itttt	eq
 80074e4:	6819      	ldreq	r1, [r3, #0]
 80074e6:	685b      	ldreq	r3, [r3, #4]
 80074e8:	1949      	addeq	r1, r1, r5
 80074ea:	6021      	streq	r1, [r4, #0]
 80074ec:	e7ed      	b.n	80074ca <_free_r+0x22>
 80074ee:	461a      	mov	r2, r3
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	b10b      	cbz	r3, 80074f8 <_free_r+0x50>
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	d9fa      	bls.n	80074ee <_free_r+0x46>
 80074f8:	6811      	ldr	r1, [r2, #0]
 80074fa:	1855      	adds	r5, r2, r1
 80074fc:	42a5      	cmp	r5, r4
 80074fe:	d10b      	bne.n	8007518 <_free_r+0x70>
 8007500:	6824      	ldr	r4, [r4, #0]
 8007502:	4421      	add	r1, r4
 8007504:	1854      	adds	r4, r2, r1
 8007506:	42a3      	cmp	r3, r4
 8007508:	6011      	str	r1, [r2, #0]
 800750a:	d1e0      	bne.n	80074ce <_free_r+0x26>
 800750c:	681c      	ldr	r4, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	6053      	str	r3, [r2, #4]
 8007512:	4421      	add	r1, r4
 8007514:	6011      	str	r1, [r2, #0]
 8007516:	e7da      	b.n	80074ce <_free_r+0x26>
 8007518:	d902      	bls.n	8007520 <_free_r+0x78>
 800751a:	230c      	movs	r3, #12
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	e7d6      	b.n	80074ce <_free_r+0x26>
 8007520:	6825      	ldr	r5, [r4, #0]
 8007522:	1961      	adds	r1, r4, r5
 8007524:	428b      	cmp	r3, r1
 8007526:	bf04      	itt	eq
 8007528:	6819      	ldreq	r1, [r3, #0]
 800752a:	685b      	ldreq	r3, [r3, #4]
 800752c:	6063      	str	r3, [r4, #4]
 800752e:	bf04      	itt	eq
 8007530:	1949      	addeq	r1, r1, r5
 8007532:	6021      	streq	r1, [r4, #0]
 8007534:	6054      	str	r4, [r2, #4]
 8007536:	e7ca      	b.n	80074ce <_free_r+0x26>
 8007538:	b003      	add	sp, #12
 800753a:	bd30      	pop	{r4, r5, pc}
 800753c:	20008bf8 	.word	0x20008bf8

08007540 <cleanup_glue>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	460c      	mov	r4, r1
 8007544:	6809      	ldr	r1, [r1, #0]
 8007546:	4605      	mov	r5, r0
 8007548:	b109      	cbz	r1, 800754e <cleanup_glue+0xe>
 800754a:	f7ff fff9 	bl	8007540 <cleanup_glue>
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007556:	f7ff bfa7 	b.w	80074a8 <_free_r>
	...

0800755c <_reclaim_reent>:
 800755c:	4b2c      	ldr	r3, [pc, #176]	; (8007610 <_reclaim_reent+0xb4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4283      	cmp	r3, r0
 8007562:	b570      	push	{r4, r5, r6, lr}
 8007564:	4604      	mov	r4, r0
 8007566:	d051      	beq.n	800760c <_reclaim_reent+0xb0>
 8007568:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800756a:	b143      	cbz	r3, 800757e <_reclaim_reent+0x22>
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d14a      	bne.n	8007608 <_reclaim_reent+0xac>
 8007572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007574:	6819      	ldr	r1, [r3, #0]
 8007576:	b111      	cbz	r1, 800757e <_reclaim_reent+0x22>
 8007578:	4620      	mov	r0, r4
 800757a:	f7ff ff95 	bl	80074a8 <_free_r>
 800757e:	6961      	ldr	r1, [r4, #20]
 8007580:	b111      	cbz	r1, 8007588 <_reclaim_reent+0x2c>
 8007582:	4620      	mov	r0, r4
 8007584:	f7ff ff90 	bl	80074a8 <_free_r>
 8007588:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800758a:	b111      	cbz	r1, 8007592 <_reclaim_reent+0x36>
 800758c:	4620      	mov	r0, r4
 800758e:	f7ff ff8b 	bl	80074a8 <_free_r>
 8007592:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007594:	b111      	cbz	r1, 800759c <_reclaim_reent+0x40>
 8007596:	4620      	mov	r0, r4
 8007598:	f7ff ff86 	bl	80074a8 <_free_r>
 800759c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800759e:	b111      	cbz	r1, 80075a6 <_reclaim_reent+0x4a>
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff ff81 	bl	80074a8 <_free_r>
 80075a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80075a8:	b111      	cbz	r1, 80075b0 <_reclaim_reent+0x54>
 80075aa:	4620      	mov	r0, r4
 80075ac:	f7ff ff7c 	bl	80074a8 <_free_r>
 80075b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80075b2:	b111      	cbz	r1, 80075ba <_reclaim_reent+0x5e>
 80075b4:	4620      	mov	r0, r4
 80075b6:	f7ff ff77 	bl	80074a8 <_free_r>
 80075ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80075bc:	b111      	cbz	r1, 80075c4 <_reclaim_reent+0x68>
 80075be:	4620      	mov	r0, r4
 80075c0:	f7ff ff72 	bl	80074a8 <_free_r>
 80075c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075c6:	b111      	cbz	r1, 80075ce <_reclaim_reent+0x72>
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7ff ff6d 	bl	80074a8 <_free_r>
 80075ce:	69a3      	ldr	r3, [r4, #24]
 80075d0:	b1e3      	cbz	r3, 800760c <_reclaim_reent+0xb0>
 80075d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075d4:	4620      	mov	r0, r4
 80075d6:	4798      	blx	r3
 80075d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80075da:	b1b9      	cbz	r1, 800760c <_reclaim_reent+0xb0>
 80075dc:	4620      	mov	r0, r4
 80075de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075e2:	f7ff bfad 	b.w	8007540 <cleanup_glue>
 80075e6:	5949      	ldr	r1, [r1, r5]
 80075e8:	b941      	cbnz	r1, 80075fc <_reclaim_reent+0xa0>
 80075ea:	3504      	adds	r5, #4
 80075ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ee:	2d80      	cmp	r5, #128	; 0x80
 80075f0:	68d9      	ldr	r1, [r3, #12]
 80075f2:	d1f8      	bne.n	80075e6 <_reclaim_reent+0x8a>
 80075f4:	4620      	mov	r0, r4
 80075f6:	f7ff ff57 	bl	80074a8 <_free_r>
 80075fa:	e7ba      	b.n	8007572 <_reclaim_reent+0x16>
 80075fc:	680e      	ldr	r6, [r1, #0]
 80075fe:	4620      	mov	r0, r4
 8007600:	f7ff ff52 	bl	80074a8 <_free_r>
 8007604:	4631      	mov	r1, r6
 8007606:	e7ef      	b.n	80075e8 <_reclaim_reent+0x8c>
 8007608:	2500      	movs	r5, #0
 800760a:	e7ef      	b.n	80075ec <_reclaim_reent+0x90>
 800760c:	bd70      	pop	{r4, r5, r6, pc}
 800760e:	bf00      	nop
 8007610:	20000010 	.word	0x20000010

08007614 <__malloc_lock>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__malloc_lock+0x8>)
 8007616:	f7f9 bc46 	b.w	8000ea6 <__retarget_lock_acquire_recursive>
 800761a:	bf00      	nop
 800761c:	20000954 	.word	0x20000954

08007620 <__malloc_unlock>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__malloc_unlock+0x8>)
 8007622:	f7f9 bc54 	b.w	8000ece <__retarget_lock_release_recursive>
 8007626:	bf00      	nop
 8007628:	20000954 	.word	0x20000954

0800762c <_init>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr

08007638 <_fini>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr
