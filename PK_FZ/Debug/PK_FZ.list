
PK_FZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004604  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080047d4  080047d4  000147d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c4  080048c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048cc  080048cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080048d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004024  20000074  08004948  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004098  08004948  00024098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9f8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245c  00000000  00000000  0002da9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002fef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  00030b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233e1  00000000  00000000  00031620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfc7  00000000  00000000  00054a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2126  00000000  00000000  000629c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134aee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037bc  00000000  00000000  00134b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080047bc 	.word	0x080047bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080047bc 	.word	0x080047bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000090 	.word	0x20000090
 80005e4:	200000e4 	.word	0x200000e4

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fac9 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f827 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8bd 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f891 	bl	8000720 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <main+0x50>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fec2 	bl	800239e <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <main+0x54>)
 800061e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000620:	f001 feb6 	bl	8002390 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_0_GPIO_Port,LED_0_Pin);
 8000624:	2120      	movs	r1, #32
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <main+0x58>)
 8000628:	f000 fdd5 	bl	80011d6 <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000630:	f000 fb1a 	bl	8000c68 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_0_GPIO_Port,LED_0_Pin);
 8000634:	e7f6      	b.n	8000624 <main+0x3c>
 8000636:	bf00      	nop
 8000638:	080047e0 	.word	0x080047e0
 800063c:	20000328 	.word	0x20000328
 8000640:	40020000 	.word	0x40020000

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 f91c 	bl	8003890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <SystemClock_Config+0xd4>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <SystemClock_Config+0xd8>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b8:	2310      	movs	r3, #16
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8e4 	bl	80018a0 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006de:	f000 f8d5 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fd84 	bl	800120c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070a:	f000 f8bf 	bl	800088c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f001 fb40 	bl	8001ddc <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f893 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200002e4 	.word	0x200002e4
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2c      	ldr	r2, [pc, #176]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000800:	f000 fcd0 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0xd8>)
 800081c:	f000 fb2e 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_0_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000838:	f000 fb20 	bl	8000e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar()
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

}
 8000854:	bf00      	nop
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_0_GPIO_Port,LED_0_Pin);
 8000868:	2120      	movs	r1, #32
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <StartDefaultTask+0x24>)
 800086c:	f000 fcb3 	bl	80011d6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000870:	2064      	movs	r0, #100	; 0x64
 8000872:	f000 f9f9 	bl	8000c68 <HAL_Delay>
	printf("Hello world!");
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <StartDefaultTask+0x28>)
 8000878:	f003 f812 	bl	80038a0 <iprintf>
    osDelay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f001 fdda 	bl	8002436 <osDelay>
  {
 8000882:	e7f1      	b.n	8000868 <StartDefaultTask+0x8>
 8000884:	40020000 	.word	0x40020000
 8000888:	080047fc 	.word	0x080047fc

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_MspInit+0x54>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <HAL_MspInit+0x54>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x54>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_MspInit+0x54>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_MspInit+0x54>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_MspInit+0x54>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	f06f 0001 	mvn.w	r0, #1
 80008de:	f000 faa4 	bl	8000e2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	; (8000974 <HAL_UART_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12b      	bne.n	800096a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x88>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800094a:	230c      	movs	r3, #12
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_UART_MspInit+0x8c>)
 8000966:	f000 fa89 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40004400 	.word	0x40004400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f93a 	bl	8000c28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009b4:	f002 fac2 	bl	8002f3c <xTaskGetSchedulerState>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d001      	beq.n	80009c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009be:	f002 fd03 	bl	80033c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e00a      	b.n	80009ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d8:	f3af 8000 	nop.w
 80009dc:	4601      	mov	r1, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	60ba      	str	r2, [r7, #8]
 80009e4:	b2ca      	uxtb	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	dbf0      	blt.n	80009d8 <_read+0x12>
  }

  return len;
 80009f6:	687b      	ldr	r3, [r7, #4]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e009      	b.n	8000a26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	60ba      	str	r2, [r7, #8]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff18 	bl	8000850 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3301      	adds	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dbf1      	blt.n	8000a12 <_write+0x12>
  }
  return len;
 8000a2e:	687b      	ldr	r3, [r7, #4]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_close>:

int _close(int file)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a60:	605a      	str	r2, [r3, #4]
  return 0;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_isatty>:

int _isatty(int file)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b085      	sub	sp, #20
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f002 feb4 	bl	800383c <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20020000 	.word	0x20020000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	2000032c 	.word	0x2000032c
 8000b08:	20004098 	.word	0x20004098

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b36:	490e      	ldr	r1, [pc, #56]	; (8000b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b4c:	4c0b      	ldr	r4, [pc, #44]	; (8000b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b5a:	f7ff ffd7 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f002 fe73 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fd41 	bl	80005e8 <main>
  bx  lr    
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b74:	080048d4 	.word	0x080048d4
  ldr r2, =_sbss
 8000b78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b7c:	20004098 	.word	0x20004098

08000b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <HAL_Init+0x40>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_Init+0x40>)
 8000b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_Init+0x40>)
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f931 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f000 f808 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f7ff fe6e 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023c00 	.word	0x40023c00

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x54>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x58>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f93b 	bl	8000e62 <HAL_SYSTICK_Config>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00e      	b.n	8000c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d80a      	bhi.n	8000c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c04:	f000 f911 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <HAL_InitTick+0x5c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e000      	b.n	8000c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000004 	.word	0x20000004

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000330 	.word	0x20000330

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000330 	.word	0x20000330

08000c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff ffee 	bl	8000c50 <HAL_GetTick>
 8000c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c80:	d005      	beq.n	8000c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_Delay+0x44>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c8e:	bf00      	nop
 8000c90:	f7ff ffde 	bl	8000c50 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d8f7      	bhi.n	8000c90 <HAL_Delay+0x28>
  {
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff47 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff5c 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffb0 	bl	8000dd0 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e165      	b.n	8001164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8154 	bne.w	800115e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d005      	beq.n	8000ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d130      	bne.n	8000f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	f003 0201 	and.w	r2, r3, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d017      	beq.n	8000f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80ae 	beq.w	800115e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b5d      	ldr	r3, [pc, #372]	; (800117c <HAL_GPIO_Init+0x300>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a5c      	ldr	r2, [pc, #368]	; (800117c <HAL_GPIO_Init+0x300>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b5a      	ldr	r3, [pc, #360]	; (800117c <HAL_GPIO_Init+0x300>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a58      	ldr	r2, [pc, #352]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4f      	ldr	r2, [pc, #316]	; (8001184 <HAL_GPIO_Init+0x308>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d025      	beq.n	8001096 <HAL_GPIO_Init+0x21a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <HAL_GPIO_Init+0x30c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_GPIO_Init+0x216>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_GPIO_Init+0x310>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x212>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_GPIO_Init+0x314>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x20e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4b      	ldr	r2, [pc, #300]	; (8001194 <HAL_GPIO_Init+0x318>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x20a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x31c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x206>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a49      	ldr	r2, [pc, #292]	; (800119c <HAL_GPIO_Init+0x320>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x202>
 800107a:	2306      	movs	r3, #6
 800107c:	e00c      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 800107e:	2307      	movs	r3, #7
 8001080:	e00a      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 8001082:	2305      	movs	r3, #5
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 8001086:	2304      	movs	r3, #4
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_GPIO_Init+0x324>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_GPIO_Init+0x324>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_GPIO_Init+0x324>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x324>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_GPIO_Init+0x324>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <HAL_GPIO_Init+0x324>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_GPIO_Init+0x324>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <HAL_GPIO_Init+0x324>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f ae96 	bls.w	8000e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	40021800 	.word	0x40021800
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e8:	887a      	ldrh	r2, [r7, #2]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	041a      	lsls	r2, r3, #16
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	400b      	ands	r3, r1
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0cc      	b.n	80013ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d90c      	bls.n	8001248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b63      	ldr	r3, [pc, #396]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0b8      	b.n	80013ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d020      	beq.n	8001296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800126a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001278:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001284:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	494d      	ldr	r1, [pc, #308]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d044      	beq.n	800132c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d119      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e07f      	b.n	80013ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d003      	beq.n	80012ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e06f      	b.n	80013ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e067      	b.n	80013ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f023 0203 	bic.w	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4934      	ldr	r1, [pc, #208]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fc:	f7ff fca8 	bl	8000c50 <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	e00a      	b.n	800131a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7ff fca4 	bl	8000c50 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e04f      	b.n	80013ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 020c 	and.w	r2, r3, #12
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d1eb      	bne.n	8001304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d20c      	bcs.n	8001354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e032      	b.n	80013ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d008      	beq.n	8001372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4916      	ldr	r1, [pc, #88]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	4313      	orrs	r3, r2
 8001370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	490e      	ldr	r1, [pc, #56]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	4313      	orrs	r3, r2
 8001390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001392:	f000 f855 	bl	8001440 <HAL_RCC_GetSysClockFreq>
 8001396:	4602      	mov	r2, r0
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	490a      	ldr	r1, [pc, #40]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	5ccb      	ldrb	r3, [r1, r3]
 80013a6:	fa22 f303 	lsr.w	r3, r2, r3
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_RCC_ClockConfig+0x1c8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fc08 	bl	8000bc8 <HAL_InitTick>

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00
 80013c8:	40023800 	.word	0x40023800
 80013cc:	08004814 	.word	0x08004814
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_RCC_GetHCLKFreq+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000000 	.word	0x20000000

080013f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013f4:	f7ff fff0 	bl	80013d8 <HAL_RCC_GetHCLKFreq>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	0a9b      	lsrs	r3, r3, #10
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	4903      	ldr	r1, [pc, #12]	; (8001414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001406:	5ccb      	ldrb	r3, [r1, r3]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	08004824 	.word	0x08004824

08001418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800141c:	f7ff ffdc 	bl	80013d8 <HAL_RCC_GetHCLKFreq>
 8001420:	4602      	mov	r2, r0
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	0b5b      	lsrs	r3, r3, #13
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	4903      	ldr	r1, [pc, #12]	; (800143c <HAL_RCC_GetPCLK2Freq+0x24>)
 800142e:	5ccb      	ldrb	r3, [r1, r3]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	08004824 	.word	0x08004824

08001440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001444:	b0ae      	sub	sp, #184	; 0xb8
 8001446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001466:	4bcb      	ldr	r3, [pc, #812]	; (8001794 <HAL_RCC_GetSysClockFreq+0x354>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b0c      	cmp	r3, #12
 8001470:	f200 8206 	bhi.w	8001880 <HAL_RCC_GetSysClockFreq+0x440>
 8001474:	a201      	add	r2, pc, #4	; (adr r2, 800147c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	080014b1 	.word	0x080014b1
 8001480:	08001881 	.word	0x08001881
 8001484:	08001881 	.word	0x08001881
 8001488:	08001881 	.word	0x08001881
 800148c:	080014b9 	.word	0x080014b9
 8001490:	08001881 	.word	0x08001881
 8001494:	08001881 	.word	0x08001881
 8001498:	08001881 	.word	0x08001881
 800149c:	080014c1 	.word	0x080014c1
 80014a0:	08001881 	.word	0x08001881
 80014a4:	08001881 	.word	0x08001881
 80014a8:	08001881 	.word	0x08001881
 80014ac:	080016b1 	.word	0x080016b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014b0:	4bb9      	ldr	r3, [pc, #740]	; (8001798 <HAL_RCC_GetSysClockFreq+0x358>)
 80014b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014b6:	e1e7      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014b8:	4bb8      	ldr	r3, [pc, #736]	; (800179c <HAL_RCC_GetSysClockFreq+0x35c>)
 80014ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014be:	e1e3      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014c0:	4bb4      	ldr	r3, [pc, #720]	; (8001794 <HAL_RCC_GetSysClockFreq+0x354>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014cc:	4bb1      	ldr	r3, [pc, #708]	; (8001794 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d071      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d8:	4bae      	ldr	r3, [pc, #696]	; (8001794 <HAL_RCC_GetSysClockFreq+0x354>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	2200      	movs	r2, #0
 80014e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014fe:	4622      	mov	r2, r4
 8001500:	462b      	mov	r3, r5
 8001502:	f04f 0000 	mov.w	r0, #0
 8001506:	f04f 0100 	mov.w	r1, #0
 800150a:	0159      	lsls	r1, r3, #5
 800150c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001510:	0150      	lsls	r0, r2, #5
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4621      	mov	r1, r4
 8001518:	1a51      	subs	r1, r2, r1
 800151a:	6439      	str	r1, [r7, #64]	; 0x40
 800151c:	4629      	mov	r1, r5
 800151e:	eb63 0301 	sbc.w	r3, r3, r1
 8001522:	647b      	str	r3, [r7, #68]	; 0x44
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001530:	4649      	mov	r1, r9
 8001532:	018b      	lsls	r3, r1, #6
 8001534:	4641      	mov	r1, r8
 8001536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800153a:	4641      	mov	r1, r8
 800153c:	018a      	lsls	r2, r1, #6
 800153e:	4641      	mov	r1, r8
 8001540:	1a51      	subs	r1, r2, r1
 8001542:	63b9      	str	r1, [r7, #56]	; 0x38
 8001544:	4649      	mov	r1, r9
 8001546:	eb63 0301 	sbc.w	r3, r3, r1
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001558:	4649      	mov	r1, r9
 800155a:	00cb      	lsls	r3, r1, #3
 800155c:	4641      	mov	r1, r8
 800155e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001562:	4641      	mov	r1, r8
 8001564:	00ca      	lsls	r2, r1, #3
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	4603      	mov	r3, r0
 800156c:	4622      	mov	r2, r4
 800156e:	189b      	adds	r3, r3, r2
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
 8001572:	462b      	mov	r3, r5
 8001574:	460a      	mov	r2, r1
 8001576:	eb42 0303 	adc.w	r3, r2, r3
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001588:	4629      	mov	r1, r5
 800158a:	024b      	lsls	r3, r1, #9
 800158c:	4621      	mov	r1, r4
 800158e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001592:	4621      	mov	r1, r4
 8001594:	024a      	lsls	r2, r1, #9
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015ac:	f7fe fe80 	bl	80002b0 <__aeabi_uldivmod>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4613      	mov	r3, r2
 80015b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015ba:	e067      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015bc:	4b75      	ldr	r3, [pc, #468]	; (8001794 <HAL_RCC_GetSysClockFreq+0x354>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	2200      	movs	r2, #0
 80015c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80015d6:	2300      	movs	r3, #0
 80015d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015de:	4622      	mov	r2, r4
 80015e0:	462b      	mov	r3, r5
 80015e2:	f04f 0000 	mov.w	r0, #0
 80015e6:	f04f 0100 	mov.w	r1, #0
 80015ea:	0159      	lsls	r1, r3, #5
 80015ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f0:	0150      	lsls	r0, r2, #5
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4621      	mov	r1, r4
 80015f8:	1a51      	subs	r1, r2, r1
 80015fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80015fc:	4629      	mov	r1, r5
 80015fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001610:	4649      	mov	r1, r9
 8001612:	018b      	lsls	r3, r1, #6
 8001614:	4641      	mov	r1, r8
 8001616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800161a:	4641      	mov	r1, r8
 800161c:	018a      	lsls	r2, r1, #6
 800161e:	4641      	mov	r1, r8
 8001620:	ebb2 0a01 	subs.w	sl, r2, r1
 8001624:	4649      	mov	r1, r9
 8001626:	eb63 0b01 	sbc.w	fp, r3, r1
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001636:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800163a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800163e:	4692      	mov	sl, r2
 8001640:	469b      	mov	fp, r3
 8001642:	4623      	mov	r3, r4
 8001644:	eb1a 0303 	adds.w	r3, sl, r3
 8001648:	623b      	str	r3, [r7, #32]
 800164a:	462b      	mov	r3, r5
 800164c:	eb4b 0303 	adc.w	r3, fp, r3
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800165e:	4629      	mov	r1, r5
 8001660:	028b      	lsls	r3, r1, #10
 8001662:	4621      	mov	r1, r4
 8001664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001668:	4621      	mov	r1, r4
 800166a:	028a      	lsls	r2, r1, #10
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001674:	2200      	movs	r2, #0
 8001676:	673b      	str	r3, [r7, #112]	; 0x70
 8001678:	677a      	str	r2, [r7, #116]	; 0x74
 800167a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800167e:	f7fe fe17 	bl	80002b0 <__aeabi_uldivmod>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4613      	mov	r3, r2
 8001688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800168c:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_RCC_GetSysClockFreq+0x354>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	3301      	adds	r3, #1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800169e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ae:	e0eb      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_RCC_GetSysClockFreq+0x354>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <HAL_RCC_GetSysClockFreq+0x354>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d06b      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	099b      	lsrs	r3, r3, #6
 80016ce:	2200      	movs	r2, #0
 80016d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80016d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016da:	663b      	str	r3, [r7, #96]	; 0x60
 80016dc:	2300      	movs	r3, #0
 80016de:	667b      	str	r3, [r7, #100]	; 0x64
 80016e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016e4:	4622      	mov	r2, r4
 80016e6:	462b      	mov	r3, r5
 80016e8:	f04f 0000 	mov.w	r0, #0
 80016ec:	f04f 0100 	mov.w	r1, #0
 80016f0:	0159      	lsls	r1, r3, #5
 80016f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f6:	0150      	lsls	r0, r2, #5
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4621      	mov	r1, r4
 80016fe:	1a51      	subs	r1, r2, r1
 8001700:	61b9      	str	r1, [r7, #24]
 8001702:	4629      	mov	r1, r5
 8001704:	eb63 0301 	sbc.w	r3, r3, r1
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001716:	4659      	mov	r1, fp
 8001718:	018b      	lsls	r3, r1, #6
 800171a:	4651      	mov	r1, sl
 800171c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001720:	4651      	mov	r1, sl
 8001722:	018a      	lsls	r2, r1, #6
 8001724:	4651      	mov	r1, sl
 8001726:	ebb2 0801 	subs.w	r8, r2, r1
 800172a:	4659      	mov	r1, fp
 800172c:	eb63 0901 	sbc.w	r9, r3, r1
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800173c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001740:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001744:	4690      	mov	r8, r2
 8001746:	4699      	mov	r9, r3
 8001748:	4623      	mov	r3, r4
 800174a:	eb18 0303 	adds.w	r3, r8, r3
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	462b      	mov	r3, r5
 8001752:	eb49 0303 	adc.w	r3, r9, r3
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001764:	4629      	mov	r1, r5
 8001766:	024b      	lsls	r3, r1, #9
 8001768:	4621      	mov	r1, r4
 800176a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800176e:	4621      	mov	r1, r4
 8001770:	024a      	lsls	r2, r1, #9
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800177a:	2200      	movs	r2, #0
 800177c:	65bb      	str	r3, [r7, #88]	; 0x58
 800177e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001780:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001784:	f7fe fd94 	bl	80002b0 <__aeabi_uldivmod>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4613      	mov	r3, r2
 800178e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001792:	e065      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0x420>
 8001794:	40023800 	.word	0x40023800
 8001798:	00f42400 	.word	0x00f42400
 800179c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a0:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <HAL_RCC_GetSysClockFreq+0x458>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	2200      	movs	r2, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	4611      	mov	r1, r2
 80017ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017b0:	653b      	str	r3, [r7, #80]	; 0x50
 80017b2:	2300      	movs	r3, #0
 80017b4:	657b      	str	r3, [r7, #84]	; 0x54
 80017b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017ba:	4642      	mov	r2, r8
 80017bc:	464b      	mov	r3, r9
 80017be:	f04f 0000 	mov.w	r0, #0
 80017c2:	f04f 0100 	mov.w	r1, #0
 80017c6:	0159      	lsls	r1, r3, #5
 80017c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017cc:	0150      	lsls	r0, r2, #5
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4641      	mov	r1, r8
 80017d4:	1a51      	subs	r1, r2, r1
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	4649      	mov	r1, r9
 80017da:	eb63 0301 	sbc.w	r3, r3, r1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017ec:	4659      	mov	r1, fp
 80017ee:	018b      	lsls	r3, r1, #6
 80017f0:	4651      	mov	r1, sl
 80017f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f6:	4651      	mov	r1, sl
 80017f8:	018a      	lsls	r2, r1, #6
 80017fa:	4651      	mov	r1, sl
 80017fc:	1a54      	subs	r4, r2, r1
 80017fe:	4659      	mov	r1, fp
 8001800:	eb63 0501 	sbc.w	r5, r3, r1
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	00eb      	lsls	r3, r5, #3
 800180e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001812:	00e2      	lsls	r2, r4, #3
 8001814:	4614      	mov	r4, r2
 8001816:	461d      	mov	r5, r3
 8001818:	4643      	mov	r3, r8
 800181a:	18e3      	adds	r3, r4, r3
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	464b      	mov	r3, r9
 8001820:	eb45 0303 	adc.w	r3, r5, r3
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001832:	4629      	mov	r1, r5
 8001834:	028b      	lsls	r3, r1, #10
 8001836:	4621      	mov	r1, r4
 8001838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800183c:	4621      	mov	r1, r4
 800183e:	028a      	lsls	r2, r1, #10
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001848:	2200      	movs	r2, #0
 800184a:	64bb      	str	r3, [r7, #72]	; 0x48
 800184c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800184e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001852:	f7fe fd2d 	bl	80002b0 <__aeabi_uldivmod>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4613      	mov	r3, r2
 800185c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_RCC_GetSysClockFreq+0x458>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	0f1b      	lsrs	r3, r3, #28
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800186e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800187e:	e003      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001886:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800188c:	4618      	mov	r0, r3
 800188e:	37b8      	adds	r7, #184	; 0xb8
 8001890:	46bd      	mov	sp, r7
 8001892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	00f42400 	.word	0x00f42400

080018a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e28d      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8083 	beq.w	80019c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018c0:	4b94      	ldr	r3, [pc, #592]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d019      	beq.n	8001900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018cc:	4b91      	ldr	r3, [pc, #580]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d8:	4b8e      	ldr	r3, [pc, #568]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e4:	d00c      	beq.n	8001900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e6:	4b8b      	ldr	r3, [pc, #556]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d112      	bne.n	8001918 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	4b88      	ldr	r3, [pc, #544]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fe:	d10b      	bne.n	8001918 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	4b84      	ldr	r3, [pc, #528]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d05b      	beq.n	80019c4 <HAL_RCC_OscConfig+0x124>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d157      	bne.n	80019c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e25a      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d106      	bne.n	8001930 <HAL_RCC_OscConfig+0x90>
 8001922:	4b7c      	ldr	r3, [pc, #496]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a7b      	ldr	r2, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e01d      	b.n	800196c <HAL_RCC_OscConfig+0xcc>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0xb4>
 800193a:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a75      	ldr	r2, [pc, #468]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a72      	ldr	r2, [pc, #456]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0xcc>
 8001954:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a6e      	ldr	r2, [pc, #440]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b6c      	ldr	r3, [pc, #432]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a6b      	ldr	r2, [pc, #428]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f96c 	bl	8000c50 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff f968 	bl	8000c50 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e21f      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0xdc>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f958 	bl	8000c50 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff f954 	bl	8000c50 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e20b      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x104>
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06f      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d017      	beq.n	8001a0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019de:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d105      	bne.n	80019f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ea:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00b      	beq.n	8001a0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f6:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d11c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a02:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d116      	bne.n	8001a3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <HAL_RCC_OscConfig+0x186>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e1d3      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4937      	ldr	r1, [pc, #220]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	e03a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a44:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <HAL_RCC_OscConfig+0x278>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f901 	bl	8000c50 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a52:	f7ff f8fd 	bl	8000c50 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1b4      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4925      	ldr	r1, [pc, #148]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
 8001a84:	e015      	b.n	8001ab2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_OscConfig+0x278>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f8e0 	bl	8000c50 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a94:	f7ff f8dc 	bl	8000c50 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e193      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d036      	beq.n	8001b2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d016      	beq.n	8001af4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_RCC_OscConfig+0x27c>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff f8c0 	bl	8000c50 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff f8bc 	bl	8000c50 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e173      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x234>
 8001af2:	e01b      	b.n	8001b2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_OscConfig+0x27c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff f8a9 	bl	8000c50 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	e00e      	b.n	8001b20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b02:	f7ff f8a5 	bl	8000c50 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d907      	bls.n	8001b20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e15c      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
 8001b14:	40023800 	.word	0x40023800
 8001b18:	42470000 	.word	0x42470000
 8001b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b20:	4b8a      	ldr	r3, [pc, #552]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ea      	bne.n	8001b02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8097 	beq.w	8001c68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b83      	ldr	r3, [pc, #524]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a7e      	ldr	r2, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b66:	2301      	movs	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b79      	ldr	r3, [pc, #484]	; (8001d50 <HAL_RCC_OscConfig+0x4b0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d118      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x4b0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a75      	ldr	r2, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x4b0>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b82:	f7ff f865 	bl	8000c50 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8a:	f7ff f861 	bl	8000c50 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e118      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	4b6c      	ldr	r3, [pc, #432]	; (8001d50 <HAL_RCC_OscConfig+0x4b0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x31e>
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	4a65      	ldr	r2, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbc:	e01c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x358>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x340>
 8001bc6:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd2:	4b5e      	ldr	r3, [pc, #376]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a5d      	ldr	r2, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x358>
 8001be0:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a59      	ldr	r2, [pc, #356]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	f023 0304 	bic.w	r3, r3, #4
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d015      	beq.n	8001c2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f826 	bl	8000c50 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7ff f822 	bl	8000c50 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e0d7      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1e:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0ee      	beq.n	8001c08 <HAL_RCC_OscConfig+0x368>
 8001c2a:	e014      	b.n	8001c56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff f810 	bl	8000c50 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f80c 	bl	8000c50 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e0c1      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4a:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ee      	bne.n	8001c34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80ad 	beq.w	8001dcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c72:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d060      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d145      	bne.n	8001d12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_RCC_OscConfig+0x4b4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7fe ffe0 	bl	8000c50 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe ffdc 	bl	8000c50 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e093      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	019b      	lsls	r3, r3, #6
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	085b      	lsrs	r3, r3, #1
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	071b      	lsls	r3, r3, #28
 8001cde:	491b      	ldr	r1, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x4b4>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7fe ffb1 	bl	8000c50 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe ffad 	bl	8000c50 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e064      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x452>
 8001d10:	e05c      	b.n	8001dcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x4b4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7fe ff9a 	bl	8000c50 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d20:	f7fe ff96 	bl	8000c50 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e04d      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x4ac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x480>
 8001d3e:	e045      	b.n	8001dcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e040      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40007000 	.word	0x40007000
 8001d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_RCC_OscConfig+0x538>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d030      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d129      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d122      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d88:	4013      	ands	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d119      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10f      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e03f      	b.n	8001e6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fd74 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	; 0x24
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f829 	bl	8001e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e7c:	b0c0      	sub	sp, #256	; 0x100
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e94:	68d9      	ldr	r1, [r3, #12]
 8001e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	ea40 0301 	orr.w	r3, r0, r1
 8001ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ed0:	f021 010c 	bic.w	r1, r1, #12
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef2:	6999      	ldr	r1, [r3, #24]
 8001ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	ea40 0301 	orr.w	r3, r0, r1
 8001efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <UART_SetConfig+0x2cc>)
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d005      	beq.n	8001f18 <UART_SetConfig+0xa0>
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b8d      	ldr	r3, [pc, #564]	; (8002148 <UART_SetConfig+0x2d0>)
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d104      	bne.n	8001f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f18:	f7ff fa7e 	bl	8001418 <HAL_RCC_GetPCLK2Freq>
 8001f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f20:	e003      	b.n	8001f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f22:	f7ff fa65 	bl	80013f0 <HAL_RCC_GetPCLK1Freq>
 8001f26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f34:	f040 810c 	bne.w	8002150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	462b      	mov	r3, r5
 8001f4e:	1891      	adds	r1, r2, r2
 8001f50:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f52:	415b      	adcs	r3, r3
 8001f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	eb12 0801 	adds.w	r8, r2, r1
 8001f60:	4629      	mov	r1, r5
 8001f62:	eb43 0901 	adc.w	r9, r3, r1
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f7a:	4690      	mov	r8, r2
 8001f7c:	4699      	mov	r9, r3
 8001f7e:	4623      	mov	r3, r4
 8001f80:	eb18 0303 	adds.w	r3, r8, r3
 8001f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f88:	462b      	mov	r3, r5
 8001f8a:	eb49 0303 	adc.w	r3, r9, r3
 8001f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	18db      	adds	r3, r3, r3
 8001faa:	653b      	str	r3, [r7, #80]	; 0x50
 8001fac:	4613      	mov	r3, r2
 8001fae:	eb42 0303 	adc.w	r3, r2, r3
 8001fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8001fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fbc:	f7fe f978 	bl	80002b0 <__aeabi_uldivmod>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4b61      	ldr	r3, [pc, #388]	; (800214c <UART_SetConfig+0x2d4>)
 8001fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	011c      	lsls	r4, r3, #4
 8001fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001fe0:	4642      	mov	r2, r8
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	1891      	adds	r1, r2, r2
 8001fe6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001fe8:	415b      	adcs	r3, r3
 8001fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ff0:	4641      	mov	r1, r8
 8001ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8001ff6:	4649      	mov	r1, r9
 8001ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800200c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002010:	4692      	mov	sl, r2
 8002012:	469b      	mov	fp, r3
 8002014:	4643      	mov	r3, r8
 8002016:	eb1a 0303 	adds.w	r3, sl, r3
 800201a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800201e:	464b      	mov	r3, r9
 8002020:	eb4b 0303 	adc.w	r3, fp, r3
 8002024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002034:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800203c:	460b      	mov	r3, r1
 800203e:	18db      	adds	r3, r3, r3
 8002040:	643b      	str	r3, [r7, #64]	; 0x40
 8002042:	4613      	mov	r3, r2
 8002044:	eb42 0303 	adc.w	r3, r2, r3
 8002048:	647b      	str	r3, [r7, #68]	; 0x44
 800204a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800204e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002052:	f7fe f92d 	bl	80002b0 <__aeabi_uldivmod>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4611      	mov	r1, r2
 800205c:	4b3b      	ldr	r3, [pc, #236]	; (800214c <UART_SetConfig+0x2d4>)
 800205e:	fba3 2301 	umull	r2, r3, r3, r1
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2264      	movs	r2, #100	; 0x64
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	1acb      	subs	r3, r1, r3
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002072:	4b36      	ldr	r3, [pc, #216]	; (800214c <UART_SetConfig+0x2d4>)
 8002074:	fba3 2302 	umull	r2, r3, r3, r2
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002080:	441c      	add	r4, r3
 8002082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002086:	2200      	movs	r2, #0
 8002088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800208c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002094:	4642      	mov	r2, r8
 8002096:	464b      	mov	r3, r9
 8002098:	1891      	adds	r1, r2, r2
 800209a:	63b9      	str	r1, [r7, #56]	; 0x38
 800209c:	415b      	adcs	r3, r3
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020a4:	4641      	mov	r1, r8
 80020a6:	1851      	adds	r1, r2, r1
 80020a8:	6339      	str	r1, [r7, #48]	; 0x30
 80020aa:	4649      	mov	r1, r9
 80020ac:	414b      	adcs	r3, r1
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020bc:	4659      	mov	r1, fp
 80020be:	00cb      	lsls	r3, r1, #3
 80020c0:	4651      	mov	r1, sl
 80020c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020c6:	4651      	mov	r1, sl
 80020c8:	00ca      	lsls	r2, r1, #3
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	4642      	mov	r2, r8
 80020d2:	189b      	adds	r3, r3, r2
 80020d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020d8:	464b      	mov	r3, r9
 80020da:	460a      	mov	r2, r1
 80020dc:	eb42 0303 	adc.w	r3, r2, r3
 80020e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80020f8:	460b      	mov	r3, r1
 80020fa:	18db      	adds	r3, r3, r3
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020fe:	4613      	mov	r3, r2
 8002100:	eb42 0303 	adc.w	r3, r2, r3
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800210a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800210e:	f7fe f8cf 	bl	80002b0 <__aeabi_uldivmod>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <UART_SetConfig+0x2d4>)
 8002118:	fba3 1302 	umull	r1, r3, r3, r2
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	2164      	movs	r1, #100	; 0x64
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	3332      	adds	r3, #50	; 0x32
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <UART_SetConfig+0x2d4>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	f003 0207 	and.w	r2, r3, #7
 8002136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4422      	add	r2, r4
 800213e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002140:	e105      	b.n	800234e <UART_SetConfig+0x4d6>
 8002142:	bf00      	nop
 8002144:	40011000 	.word	0x40011000
 8002148:	40011400 	.word	0x40011400
 800214c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002154:	2200      	movs	r2, #0
 8002156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800215a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800215e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002162:	4642      	mov	r2, r8
 8002164:	464b      	mov	r3, r9
 8002166:	1891      	adds	r1, r2, r2
 8002168:	6239      	str	r1, [r7, #32]
 800216a:	415b      	adcs	r3, r3
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
 800216e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002172:	4641      	mov	r1, r8
 8002174:	1854      	adds	r4, r2, r1
 8002176:	4649      	mov	r1, r9
 8002178:	eb43 0501 	adc.w	r5, r3, r1
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	00eb      	lsls	r3, r5, #3
 8002186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800218a:	00e2      	lsls	r2, r4, #3
 800218c:	4614      	mov	r4, r2
 800218e:	461d      	mov	r5, r3
 8002190:	4643      	mov	r3, r8
 8002192:	18e3      	adds	r3, r4, r3
 8002194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002198:	464b      	mov	r3, r9
 800219a:	eb45 0303 	adc.w	r3, r5, r3
 800219e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021be:	4629      	mov	r1, r5
 80021c0:	008b      	lsls	r3, r1, #2
 80021c2:	4621      	mov	r1, r4
 80021c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021c8:	4621      	mov	r1, r4
 80021ca:	008a      	lsls	r2, r1, #2
 80021cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021d0:	f7fe f86e 	bl	80002b0 <__aeabi_uldivmod>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4b60      	ldr	r3, [pc, #384]	; (800235c <UART_SetConfig+0x4e4>)
 80021da:	fba3 2302 	umull	r2, r3, r3, r2
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	011c      	lsls	r4, r3, #4
 80021e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021e6:	2200      	movs	r2, #0
 80021e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80021f4:	4642      	mov	r2, r8
 80021f6:	464b      	mov	r3, r9
 80021f8:	1891      	adds	r1, r2, r2
 80021fa:	61b9      	str	r1, [r7, #24]
 80021fc:	415b      	adcs	r3, r3
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002204:	4641      	mov	r1, r8
 8002206:	1851      	adds	r1, r2, r1
 8002208:	6139      	str	r1, [r7, #16]
 800220a:	4649      	mov	r1, r9
 800220c:	414b      	adcs	r3, r1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800221c:	4659      	mov	r1, fp
 800221e:	00cb      	lsls	r3, r1, #3
 8002220:	4651      	mov	r1, sl
 8002222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002226:	4651      	mov	r1, sl
 8002228:	00ca      	lsls	r2, r1, #3
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	4603      	mov	r3, r0
 8002230:	4642      	mov	r2, r8
 8002232:	189b      	adds	r3, r3, r2
 8002234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002238:	464b      	mov	r3, r9
 800223a:	460a      	mov	r2, r1
 800223c:	eb42 0303 	adc.w	r3, r2, r3
 8002240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	67bb      	str	r3, [r7, #120]	; 0x78
 800224e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800225c:	4649      	mov	r1, r9
 800225e:	008b      	lsls	r3, r1, #2
 8002260:	4641      	mov	r1, r8
 8002262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002266:	4641      	mov	r1, r8
 8002268:	008a      	lsls	r2, r1, #2
 800226a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800226e:	f7fe f81f 	bl	80002b0 <__aeabi_uldivmod>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4b39      	ldr	r3, [pc, #228]	; (800235c <UART_SetConfig+0x4e4>)
 8002278:	fba3 1302 	umull	r1, r3, r3, r2
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	2164      	movs	r1, #100	; 0x64
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	3332      	adds	r3, #50	; 0x32
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <UART_SetConfig+0x4e4>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002296:	441c      	add	r4, r3
 8002298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800229c:	2200      	movs	r2, #0
 800229e:	673b      	str	r3, [r7, #112]	; 0x70
 80022a0:	677a      	str	r2, [r7, #116]	; 0x74
 80022a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022a6:	4642      	mov	r2, r8
 80022a8:	464b      	mov	r3, r9
 80022aa:	1891      	adds	r1, r2, r2
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	415b      	adcs	r3, r3
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022b6:	4641      	mov	r1, r8
 80022b8:	1851      	adds	r1, r2, r1
 80022ba:	6039      	str	r1, [r7, #0]
 80022bc:	4649      	mov	r1, r9
 80022be:	414b      	adcs	r3, r1
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022ce:	4659      	mov	r1, fp
 80022d0:	00cb      	lsls	r3, r1, #3
 80022d2:	4651      	mov	r1, sl
 80022d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022d8:	4651      	mov	r1, sl
 80022da:	00ca      	lsls	r2, r1, #3
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	4603      	mov	r3, r0
 80022e2:	4642      	mov	r2, r8
 80022e4:	189b      	adds	r3, r3, r2
 80022e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80022e8:	464b      	mov	r3, r9
 80022ea:	460a      	mov	r2, r1
 80022ec:	eb42 0303 	adc.w	r3, r2, r3
 80022f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	663b      	str	r3, [r7, #96]	; 0x60
 80022fc:	667a      	str	r2, [r7, #100]	; 0x64
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800230a:	4649      	mov	r1, r9
 800230c:	008b      	lsls	r3, r1, #2
 800230e:	4641      	mov	r1, r8
 8002310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002314:	4641      	mov	r1, r8
 8002316:	008a      	lsls	r2, r1, #2
 8002318:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800231c:	f7fd ffc8 	bl	80002b0 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <UART_SetConfig+0x4e4>)
 8002326:	fba3 1302 	umull	r1, r3, r3, r2
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2164      	movs	r1, #100	; 0x64
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	3332      	adds	r3, #50	; 0x32
 8002338:	4a08      	ldr	r2, [pc, #32]	; (800235c <UART_SetConfig+0x4e4>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	f003 020f 	and.w	r2, r3, #15
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4422      	add	r2, r4
 800234c:	609a      	str	r2, [r3, #8]
}
 800234e:	bf00      	nop
 8002350:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235a:	bf00      	nop
 800235c:	51eb851f 	.word	0x51eb851f

08002360 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800236e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002372:	2b84      	cmp	r3, #132	; 0x84
 8002374:	d005      	beq.n	8002382 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002376:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	3303      	adds	r3, #3
 8002380:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002394:	f000 fade 	bl	8002954 <vTaskStartScheduler>
  
  return osOK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}

0800239e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800239e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a0:	b089      	sub	sp, #36	; 0x24
 80023a2:	af04      	add	r7, sp, #16
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <osThreadCreate+0x54>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01c      	beq.n	80023f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685c      	ldr	r4, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681d      	ldr	r5, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691e      	ldr	r6, [r3, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ffc8 	bl	8002360 <makeFreeRtosPriority>
 80023d0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023da:	9202      	str	r2, [sp, #8]
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	9100      	str	r1, [sp, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4632      	mov	r2, r6
 80023e4:	4629      	mov	r1, r5
 80023e6:	4620      	mov	r0, r4
 80023e8:	f000 f8ed 	bl	80025c6 <xTaskCreateStatic>
 80023ec:	4603      	mov	r3, r0
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e01c      	b.n	800242c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685c      	ldr	r4, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023fe:	b29e      	uxth	r6, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffaa 	bl	8002360 <makeFreeRtosPriority>
 800240c:	4602      	mov	r2, r0
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	9200      	str	r2, [sp, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	4632      	mov	r2, r6
 800241a:	4629      	mov	r1, r5
 800241c:	4620      	mov	r0, r4
 800241e:	f000 f92f 	bl	8002680 <xTaskCreate>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800242c:	68fb      	ldr	r3, [r7, #12]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002436 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <osDelay+0x16>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	e000      	b.n	800244e <osDelay+0x18>
 800244c:	2301      	movs	r3, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fa4c 	bl	80028ec <vTaskDelay>
  
  return osOK;
 8002454:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f103 0208 	add.w	r2, r3, #8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002476:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f103 0208 	add.w	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f103 0208 	add.w	r2, r3, #8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	601a      	str	r2, [r3, #0]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002516:	d103      	bne.n	8002520 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	e00c      	b.n	800253a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3308      	adds	r3, #8
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e002      	b.n	800252e <vListInsert+0x2e>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	d2f6      	bcs.n	8002528 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6892      	ldr	r2, [r2, #8]
 8002588:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6852      	ldr	r2, [r2, #4]
 8002592:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d103      	bne.n	80025a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1e5a      	subs	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b08e      	sub	sp, #56	; 0x38
 80025ca:	af04      	add	r7, sp, #16
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10a      	bne.n	80025f0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025ec:	bf00      	nop
 80025ee:	e7fe      	b.n	80025ee <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <xTaskCreateStatic+0x46>
	__asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	61fb      	str	r3, [r7, #28]
}
 8002608:	bf00      	nop
 800260a:	e7fe      	b.n	800260a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800260c:	2354      	movs	r3, #84	; 0x54
 800260e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b54      	cmp	r3, #84	; 0x54
 8002614:	d00a      	beq.n	800262c <xTaskCreateStatic+0x66>
	__asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	61bb      	str	r3, [r7, #24]
}
 8002628:	bf00      	nop
 800262a:	e7fe      	b.n	800262a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800262c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01e      	beq.n	8002672 <xTaskCreateStatic+0xac>
 8002634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01b      	beq.n	8002672 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002642:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800264c:	2300      	movs	r3, #0
 800264e:	9303      	str	r3, [sp, #12]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	9302      	str	r3, [sp, #8]
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f850 	bl	800270a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800266a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800266c:	f000 f8d4 	bl	8002818 <prvAddNewTaskToReadyList>
 8002670:	e001      	b.n	8002676 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002676:	697b      	ldr	r3, [r7, #20]
	}
 8002678:	4618      	mov	r0, r3
 800267a:	3728      	adds	r7, #40	; 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	; 0x30
 8002684:	af04      	add	r7, sp, #16
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fee7 	bl	8003468 <pvPortMalloc>
 800269a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00e      	beq.n	80026c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026a2:	2054      	movs	r0, #84	; 0x54
 80026a4:	f000 fee0 	bl	8003468 <pvPortMalloc>
 80026a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
 80026b6:	e005      	b.n	80026c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f000 ffa1 	bl	8003600 <vPortFree>
 80026be:	e001      	b.n	80026c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d017      	beq.n	80026fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	2300      	movs	r3, #0
 80026d6:	9303      	str	r3, [sp, #12]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	9302      	str	r3, [sp, #8]
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f80e 	bl	800270a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026ee:	69f8      	ldr	r0, [r7, #28]
 80026f0:	f000 f892 	bl	8002818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026f4:	2301      	movs	r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	e002      	b.n	8002700 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002700:	69bb      	ldr	r3, [r7, #24]
	}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b088      	sub	sp, #32
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002722:	3b01      	subs	r3, #1
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f023 0307 	bic.w	r3, r3, #7
 8002730:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <prvInitialiseNewTask+0x48>
	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	617b      	str	r3, [r7, #20]
}
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01f      	beq.n	8002798 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	e012      	b.n	8002784 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	7819      	ldrb	r1, [r3, #0]
 8002766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	3334      	adds	r3, #52	; 0x34
 800276e:	460a      	mov	r2, r1
 8002770:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d006      	beq.n	800278c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	d9e9      	bls.n	800275e <prvInitialiseNewTask+0x54>
 800278a:	e000      	b.n	800278e <prvInitialiseNewTask+0x84>
			{
				break;
 800278c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002796:	e003      	b.n	80027a0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d901      	bls.n	80027aa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027a6:	2306      	movs	r3, #6
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	2200      	movs	r2, #0
 80027ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	3304      	adds	r3, #4
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe6c 	bl	800249e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	3318      	adds	r3, #24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fe67 	bl	800249e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	f1c3 0207 	rsb	r2, r3, #7
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	2200      	movs	r2, #0
 80027ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	68f9      	ldr	r1, [r7, #12]
 80027f8:	69b8      	ldr	r0, [r7, #24]
 80027fa:	f000 fc23 	bl	8003044 <pxPortInitialiseStack>
 80027fe:	4602      	mov	r2, r0
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002810:	bf00      	nop
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002820:	f000 fd40 	bl	80032a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <prvAddNewTaskToReadyList+0xb8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <prvAddNewTaskToReadyList+0xb8>)
 800282c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800282e:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <prvAddNewTaskToReadyList+0xbc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002836:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <prvAddNewTaskToReadyList+0xbc>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <prvAddNewTaskToReadyList+0xb8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d110      	bne.n	8002866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002844:	f000 fabc 	bl	8002dc0 <prvInitialiseTaskLists>
 8002848:	e00d      	b.n	8002866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <prvAddNewTaskToReadyList+0xc0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <prvAddNewTaskToReadyList+0xbc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	429a      	cmp	r2, r3
 800285e:	d802      	bhi.n	8002866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002860:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <prvAddNewTaskToReadyList+0xbc>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <prvAddNewTaskToReadyList+0xc4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <prvAddNewTaskToReadyList+0xc4>)
 800286e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	2201      	movs	r2, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <prvAddNewTaskToReadyList+0xc8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4313      	orrs	r3, r2
 800287e:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <prvAddNewTaskToReadyList+0xc8>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <prvAddNewTaskToReadyList+0xcc>)
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f7ff fe0d 	bl	80024b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800289e:	f000 fd31 	bl	8003304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <prvAddNewTaskToReadyList+0xc0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00e      	beq.n	80028c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <prvAddNewTaskToReadyList+0xbc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <prvAddNewTaskToReadyList+0xd0>)
 80028ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000434 	.word	0x20000434
 80028d4:	20000334 	.word	0x20000334
 80028d8:	20000440 	.word	0x20000440
 80028dc:	20000450 	.word	0x20000450
 80028e0:	2000043c 	.word	0x2000043c
 80028e4:	20000338 	.word	0x20000338
 80028e8:	e000ed04 	.word	0xe000ed04

080028ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d017      	beq.n	800292e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <vTaskDelay+0x60>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <vTaskDelay+0x30>
	__asm volatile
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	60bb      	str	r3, [r7, #8]
}
 8002918:	bf00      	nop
 800291a:	e7fe      	b.n	800291a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800291c:	f000 f87a 	bl	8002a14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002920:	2100      	movs	r1, #0
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fb28 	bl	8002f78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002928:	f000 f882 	bl	8002a30 <xTaskResumeAll>
 800292c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <vTaskDelay+0x64>)
 8002936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	2000045c 	.word	0x2000045c
 8002950:	e000ed04 	.word	0xe000ed04

08002954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002962:	463a      	mov	r2, r7
 8002964:	1d39      	adds	r1, r7, #4
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fe22 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	9202      	str	r2, [sp, #8]
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2300      	movs	r3, #0
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	460a      	mov	r2, r1
 8002982:	491e      	ldr	r1, [pc, #120]	; (80029fc <vTaskStartScheduler+0xa8>)
 8002984:	481e      	ldr	r0, [pc, #120]	; (8002a00 <vTaskStartScheduler+0xac>)
 8002986:	f7ff fe1e 	bl	80025c6 <xTaskCreateStatic>
 800298a:	4603      	mov	r3, r0
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <vTaskStartScheduler+0xb0>)
 800298e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <vTaskStartScheduler+0xb0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002998:	2301      	movs	r3, #1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e001      	b.n	80029a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d116      	bne.n	80029d6 <vTaskStartScheduler+0x82>
	__asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	613b      	str	r3, [r7, #16]
}
 80029ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <vTaskStartScheduler+0xb4>)
 80029be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <vTaskStartScheduler+0xb8>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <vTaskStartScheduler+0xbc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029d0:	f000 fbc6 	bl	8003160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80029d4:	e00e      	b.n	80029f4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029dc:	d10a      	bne.n	80029f4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	60fb      	str	r3, [r7, #12]
}
 80029f0:	bf00      	nop
 80029f2:	e7fe      	b.n	80029f2 <vTaskStartScheduler+0x9e>
}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	0800480c 	.word	0x0800480c
 8002a00:	08002d91 	.word	0x08002d91
 8002a04:	20000458 	.word	0x20000458
 8002a08:	20000454 	.word	0x20000454
 8002a0c:	20000440 	.word	0x20000440
 8002a10:	20000438 	.word	0x20000438

08002a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <vTaskSuspendAll+0x18>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <vTaskSuspendAll+0x18>)
 8002a20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	2000045c 	.word	0x2000045c

08002a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <xTaskResumeAll+0x114>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <xTaskResumeAll+0x2c>
	__asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	603b      	str	r3, [r7, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	e7fe      	b.n	8002a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a5c:	f000 fc22 	bl	80032a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <xTaskResumeAll+0x114>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	4a37      	ldr	r2, [pc, #220]	; (8002b44 <xTaskResumeAll+0x114>)
 8002a68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <xTaskResumeAll+0x114>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d161      	bne.n	8002b36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a72:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <xTaskResumeAll+0x118>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d05d      	beq.n	8002b36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a7a:	e02e      	b.n	8002ada <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a7c:	4b33      	ldr	r3, [pc, #204]	; (8002b4c <xTaskResumeAll+0x11c>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3318      	adds	r3, #24
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fd72 	bl	8002572 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3304      	adds	r3, #4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fd6d 	bl	8002572 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <xTaskResumeAll+0x120>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	4a2a      	ldr	r2, [pc, #168]	; (8002b50 <xTaskResumeAll+0x120>)
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <xTaskResumeAll+0x124>)
 8002ab8:	441a      	add	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3304      	adds	r3, #4
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f7ff fcf9 	bl	80024b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <xTaskResumeAll+0x128>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d302      	bcc.n	8002ada <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <xTaskResumeAll+0x12c>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <xTaskResumeAll+0x11c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1cc      	bne.n	8002a7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ae8:	f000 fa08 	bl	8002efc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <xTaskResumeAll+0x130>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002af8:	f000 f836 	bl	8002b68 <xTaskIncrementTick>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <xTaskResumeAll+0x12c>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f1      	bne.n	8002af8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <xTaskResumeAll+0x130>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <xTaskResumeAll+0x12c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b22:	2301      	movs	r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <xTaskResumeAll+0x134>)
 8002b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b36:	f000 fbe5 	bl	8003304 <vPortExitCritical>

	return xAlreadyYielded;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	2000045c 	.word	0x2000045c
 8002b48:	20000434 	.word	0x20000434
 8002b4c:	200003f4 	.word	0x200003f4
 8002b50:	2000043c 	.word	0x2000043c
 8002b54:	20000338 	.word	0x20000338
 8002b58:	20000334 	.word	0x20000334
 8002b5c:	20000448 	.word	0x20000448
 8002b60:	20000444 	.word	0x20000444
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b72:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <xTaskIncrementTick+0x144>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 808e 	bne.w	8002c98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <xTaskIncrementTick+0x148>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <xTaskIncrementTick+0x148>)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d120      	bne.n	8002bd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b90:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <xTaskIncrementTick+0x14c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	603b      	str	r3, [r7, #0]
}
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <xTaskIncrementTick+0x46>
 8002bb0:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <xTaskIncrementTick+0x14c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <xTaskIncrementTick+0x150>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a3e      	ldr	r2, [pc, #248]	; (8002cb4 <xTaskIncrementTick+0x14c>)
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4a3e      	ldr	r2, [pc, #248]	; (8002cb8 <xTaskIncrementTick+0x150>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <xTaskIncrementTick+0x154>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <xTaskIncrementTick+0x154>)
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	f000 f995 	bl	8002efc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <xTaskIncrementTick+0x158>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d348      	bcc.n	8002c6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bdc:	4b35      	ldr	r3, [pc, #212]	; (8002cb4 <xTaskIncrementTick+0x14c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002be6:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <xTaskIncrementTick+0x158>)
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bec:	601a      	str	r2, [r3, #0]
					break;
 8002bee:	e03e      	b.n	8002c6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <xTaskIncrementTick+0x14c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d203      	bcs.n	8002c10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c08:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <xTaskIncrementTick+0x158>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c0e:	e02e      	b.n	8002c6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fcac 	bl	8002572 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	3318      	adds	r3, #24
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fca3 	bl	8002572 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	2201      	movs	r2, #1
 8002c32:	409a      	lsls	r2, r3
 8002c34:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <xTaskIncrementTick+0x15c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	4a22      	ldr	r2, [pc, #136]	; (8002cc4 <xTaskIncrementTick+0x15c>)
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <xTaskIncrementTick+0x160>)
 8002c4c:	441a      	add	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3304      	adds	r3, #4
 8002c52:	4619      	mov	r1, r3
 8002c54:	4610      	mov	r0, r2
 8002c56:	f7ff fc2f 	bl	80024b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <xTaskIncrementTick+0x164>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d3b9      	bcc.n	8002bdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c6c:	e7b6      	b.n	8002bdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <xTaskIncrementTick+0x164>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c74:	4914      	ldr	r1, [pc, #80]	; (8002cc8 <xTaskIncrementTick+0x160>)
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d901      	bls.n	8002c8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002c86:	2301      	movs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <xTaskIncrementTick+0x168>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002c92:	2301      	movs	r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e004      	b.n	8002ca2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <xTaskIncrementTick+0x16c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <xTaskIncrementTick+0x16c>)
 8002ca0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002ca2:	697b      	ldr	r3, [r7, #20]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000045c 	.word	0x2000045c
 8002cb0:	20000438 	.word	0x20000438
 8002cb4:	200003ec 	.word	0x200003ec
 8002cb8:	200003f0 	.word	0x200003f0
 8002cbc:	2000044c 	.word	0x2000044c
 8002cc0:	20000454 	.word	0x20000454
 8002cc4:	2000043c 	.word	0x2000043c
 8002cc8:	20000338 	.word	0x20000338
 8002ccc:	20000334 	.word	0x20000334
 8002cd0:	20000448 	.word	0x20000448
 8002cd4:	20000444 	.word	0x20000444

08002cd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cde:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <vTaskSwitchContext+0xa4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <vTaskSwitchContext+0xa8>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002cec:	e03f      	b.n	8002d6e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <vTaskSwitchContext+0xa8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cf4:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <vTaskSwitchContext+0xac>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	f1c3 031f 	rsb	r3, r3, #31
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	491f      	ldr	r1, [pc, #124]	; (8002d88 <vTaskSwitchContext+0xb0>)
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	607b      	str	r3, [r7, #4]
}
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <vTaskSwitchContext+0x5a>
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <vTaskSwitchContext+0xb0>)
 8002d40:	4413      	add	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	3308      	adds	r3, #8
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d104      	bne.n	8002d64 <vTaskSwitchContext+0x8c>
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <vTaskSwitchContext+0xb4>)
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	2000045c 	.word	0x2000045c
 8002d80:	20000448 	.word	0x20000448
 8002d84:	2000043c 	.word	0x2000043c
 8002d88:	20000338 	.word	0x20000338
 8002d8c:	20000334 	.word	0x20000334

08002d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002d98:	f000 f852 	bl	8002e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <prvIdleTask+0x28>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d9f9      	bls.n	8002d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <prvIdleTask+0x2c>)
 8002da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002db4:	e7f0      	b.n	8002d98 <prvIdleTask+0x8>
 8002db6:	bf00      	nop
 8002db8:	20000338 	.word	0x20000338
 8002dbc:	e000ed04 	.word	0xe000ed04

08002dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	e00c      	b.n	8002de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <prvInitialiseTaskLists+0x60>)
 8002dd8:	4413      	add	r3, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fb3f 	bl	800245e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3301      	adds	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d9ef      	bls.n	8002dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002dec:	480d      	ldr	r0, [pc, #52]	; (8002e24 <prvInitialiseTaskLists+0x64>)
 8002dee:	f7ff fb36 	bl	800245e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002df2:	480d      	ldr	r0, [pc, #52]	; (8002e28 <prvInitialiseTaskLists+0x68>)
 8002df4:	f7ff fb33 	bl	800245e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002df8:	480c      	ldr	r0, [pc, #48]	; (8002e2c <prvInitialiseTaskLists+0x6c>)
 8002dfa:	f7ff fb30 	bl	800245e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002dfe:	480c      	ldr	r0, [pc, #48]	; (8002e30 <prvInitialiseTaskLists+0x70>)
 8002e00:	f7ff fb2d 	bl	800245e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e04:	480b      	ldr	r0, [pc, #44]	; (8002e34 <prvInitialiseTaskLists+0x74>)
 8002e06:	f7ff fb2a 	bl	800245e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <prvInitialiseTaskLists+0x78>)
 8002e0c:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <prvInitialiseTaskLists+0x64>)
 8002e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <prvInitialiseTaskLists+0x7c>)
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <prvInitialiseTaskLists+0x68>)
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000338 	.word	0x20000338
 8002e24:	200003c4 	.word	0x200003c4
 8002e28:	200003d8 	.word	0x200003d8
 8002e2c:	200003f4 	.word	0x200003f4
 8002e30:	20000408 	.word	0x20000408
 8002e34:	20000420 	.word	0x20000420
 8002e38:	200003ec 	.word	0x200003ec
 8002e3c:	200003f0 	.word	0x200003f0

08002e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e46:	e019      	b.n	8002e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002e48:	f000 fa2c 	bl	80032a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <prvCheckTasksWaitingTermination+0x50>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fb8a 	bl	8002572 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <prvCheckTasksWaitingTermination+0x54>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <prvCheckTasksWaitingTermination+0x54>)
 8002e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <prvCheckTasksWaitingTermination+0x58>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <prvCheckTasksWaitingTermination+0x58>)
 8002e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002e72:	f000 fa47 	bl	8003304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f810 	bl	8002e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <prvCheckTasksWaitingTermination+0x58>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e1      	bne.n	8002e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000408 	.word	0x20000408
 8002e94:	20000434 	.word	0x20000434
 8002e98:	2000041c 	.word	0x2000041c

08002e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d108      	bne.n	8002ec0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fba4 	bl	8003600 <vPortFree>
				vPortFree( pxTCB );
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fba1 	bl	8003600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002ebe:	e018      	b.n	8002ef2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d103      	bne.n	8002ed2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fb98 	bl	8003600 <vPortFree>
	}
 8002ed0:	e00f      	b.n	8002ef2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d00a      	beq.n	8002ef2 <prvDeleteTCB+0x56>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	60fb      	str	r3, [r7, #12]
}
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <prvDeleteTCB+0x54>
	}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <prvResetNextTaskUnblockTime+0x38>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d104      	bne.n	8002f16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <prvResetNextTaskUnblockTime+0x3c>)
 8002f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f14:	e008      	b.n	8002f28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <prvResetNextTaskUnblockTime+0x38>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <prvResetNextTaskUnblockTime+0x3c>)
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	200003ec 	.word	0x200003ec
 8002f38:	20000454 	.word	0x20000454

08002f3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <xTaskGetSchedulerState+0x34>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	e008      	b.n	8002f62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <xTaskGetSchedulerState+0x38>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	e001      	b.n	8002f62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002f62:	687b      	ldr	r3, [r7, #4]
	}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	20000440 	.word	0x20000440
 8002f74:	2000045c 	.word	0x2000045c

08002f78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f82:	4b29      	ldr	r3, [pc, #164]	; (8003028 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f88:	4b28      	ldr	r3, [pc, #160]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff faef 	bl	8002572 <uxListRemove>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4013      	ands	r3, r2
 8002fae:	4a20      	ldr	r2, [pc, #128]	; (8003030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002fb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb8:	d10a      	bne.n	8002fd0 <prvAddCurrentTaskToDelayedList+0x58>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	481a      	ldr	r0, [pc, #104]	; (8003034 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002fca:	f7ff fa75 	bl	80024b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002fce:	e026      	b.n	800301e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d209      	bcs.n	8002ffc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	f7ff fa83 	bl	8002500 <vListInsert>
}
 8002ffa:	e010      	b.n	800301e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3304      	adds	r3, #4
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f7ff fa79 	bl	8002500 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	d202      	bcs.n	800301e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003018:	4a09      	ldr	r2, [pc, #36]	; (8003040 <prvAddCurrentTaskToDelayedList+0xc8>)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6013      	str	r3, [r2, #0]
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000438 	.word	0x20000438
 800302c:	20000334 	.word	0x20000334
 8003030:	2000043c 	.word	0x2000043c
 8003034:	20000420 	.word	0x20000420
 8003038:	200003f0 	.word	0x200003f0
 800303c:	200003ec 	.word	0x200003ec
 8003040:	20000454 	.word	0x20000454

08003044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3b04      	subs	r3, #4
 8003054:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800305c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3b04      	subs	r3, #4
 8003062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3b04      	subs	r3, #4
 8003072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003074:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <pxPortInitialiseStack+0x64>)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3b14      	subs	r3, #20
 800307e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b04      	subs	r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f06f 0202 	mvn.w	r2, #2
 8003092:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3b20      	subs	r3, #32
 8003098:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800309a:	68fb      	ldr	r3, [r7, #12]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	080030ad 	.word	0x080030ad

080030ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <prvTaskExitError+0x54>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030be:	d00a      	beq.n	80030d6 <prvTaskExitError+0x2a>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	60fb      	str	r3, [r7, #12]
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <prvTaskExitError+0x28>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	60bb      	str	r3, [r7, #8]
}
 80030e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80030ea:	bf00      	nop
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0fc      	beq.n	80030ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	2000000c 	.word	0x2000000c
	...

08003110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <pxCurrentTCBConst2>)
 8003112:	6819      	ldr	r1, [r3, #0]
 8003114:	6808      	ldr	r0, [r1, #0]
 8003116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311a:	f380 8809 	msr	PSP, r0
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f04f 0000 	mov.w	r0, #0
 8003126:	f380 8811 	msr	BASEPRI, r0
 800312a:	4770      	bx	lr
 800312c:	f3af 8000 	nop.w

08003130 <pxCurrentTCBConst2>:
 8003130:	20000334 	.word	0x20000334
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop

08003138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003138:	4808      	ldr	r0, [pc, #32]	; (800315c <prvPortStartFirstTask+0x24>)
 800313a:	6800      	ldr	r0, [r0, #0]
 800313c:	6800      	ldr	r0, [r0, #0]
 800313e:	f380 8808 	msr	MSP, r0
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f380 8814 	msr	CONTROL, r0
 800314a:	b662      	cpsie	i
 800314c:	b661      	cpsie	f
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	df00      	svc	0
 8003158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800315a:	bf00      	nop
 800315c:	e000ed08 	.word	0xe000ed08

08003160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003166:	4b46      	ldr	r3, [pc, #280]	; (8003280 <xPortStartScheduler+0x120>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a46      	ldr	r2, [pc, #280]	; (8003284 <xPortStartScheduler+0x124>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10a      	bne.n	8003186 <xPortStartScheduler+0x26>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	613b      	str	r3, [r7, #16]
}
 8003182:	bf00      	nop
 8003184:	e7fe      	b.n	8003184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003186:	4b3e      	ldr	r3, [pc, #248]	; (8003280 <xPortStartScheduler+0x120>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a3f      	ldr	r2, [pc, #252]	; (8003288 <xPortStartScheduler+0x128>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d10a      	bne.n	80031a6 <xPortStartScheduler+0x46>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	60fb      	str	r3, [r7, #12]
}
 80031a2:	bf00      	nop
 80031a4:	e7fe      	b.n	80031a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <xPortStartScheduler+0x12c>)
 80031a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4b31      	ldr	r3, [pc, #196]	; (8003290 <xPortStartScheduler+0x130>)
 80031cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031ce:	4b31      	ldr	r3, [pc, #196]	; (8003294 <xPortStartScheduler+0x134>)
 80031d0:	2207      	movs	r2, #7
 80031d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031d4:	e009      	b.n	80031ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80031d6:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <xPortStartScheduler+0x134>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3b01      	subs	r3, #1
 80031dc:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <xPortStartScheduler+0x134>)
 80031de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d0ef      	beq.n	80031d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031f6:	4b27      	ldr	r3, [pc, #156]	; (8003294 <xPortStartScheduler+0x134>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1c3 0307 	rsb	r3, r3, #7
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d00a      	beq.n	8003218 <xPortStartScheduler+0xb8>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	60bb      	str	r3, [r7, #8]
}
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <xPortStartScheduler+0x134>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <xPortStartScheduler+0x134>)
 8003220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003222:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <xPortStartScheduler+0x134>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800322a:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <xPortStartScheduler+0x134>)
 800322c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <xPortStartScheduler+0x138>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <xPortStartScheduler+0x138>)
 800323c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <xPortStartScheduler+0x138>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <xPortStartScheduler+0x138>)
 8003248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800324c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800324e:	f000 f8dd 	bl	800340c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <xPortStartScheduler+0x13c>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003258:	f000 f8fc 	bl	8003454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <xPortStartScheduler+0x140>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <xPortStartScheduler+0x140>)
 8003262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003268:	f7ff ff66 	bl	8003138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800326c:	f7ff fd34 	bl	8002cd8 <vTaskSwitchContext>
	prvTaskExitError();
 8003270:	f7ff ff1c 	bl	80030ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	e000ed00 	.word	0xe000ed00
 8003284:	410fc271 	.word	0x410fc271
 8003288:	410fc270 	.word	0x410fc270
 800328c:	e000e400 	.word	0xe000e400
 8003290:	20000460 	.word	0x20000460
 8003294:	20000464 	.word	0x20000464
 8003298:	e000ed20 	.word	0xe000ed20
 800329c:	2000000c 	.word	0x2000000c
 80032a0:	e000ef34 	.word	0xe000ef34

080032a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	607b      	str	r3, [r7, #4]
}
 80032bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <vPortEnterCritical+0x58>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <vPortEnterCritical+0x58>)
 80032c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <vPortEnterCritical+0x58>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10f      	bne.n	80032f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <vPortEnterCritical+0x5c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	603b      	str	r3, [r7, #0]
}
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <vPortEnterCritical+0x4a>
	}
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	2000000c 	.word	0x2000000c
 8003300:	e000ed04 	.word	0xe000ed04

08003304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <vPortExitCritical+0x50>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <vPortExitCritical+0x24>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	607b      	str	r3, [r7, #4]
}
 8003324:	bf00      	nop
 8003326:	e7fe      	b.n	8003326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <vPortExitCritical+0x50>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3b01      	subs	r3, #1
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <vPortExitCritical+0x50>)
 8003330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <vPortExitCritical+0x50>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <vPortExitCritical+0x42>
 800333a:	2300      	movs	r3, #0
 800333c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000000c 	.word	0x2000000c
	...

08003360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003360:	f3ef 8009 	mrs	r0, PSP
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <pxCurrentTCBConst>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	f01e 0f10 	tst.w	lr, #16
 8003370:	bf08      	it	eq
 8003372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800337a:	6010      	str	r0, [r2, #0]
 800337c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003384:	f380 8811 	msr	BASEPRI, r0
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f7ff fca2 	bl	8002cd8 <vTaskSwitchContext>
 8003394:	f04f 0000 	mov.w	r0, #0
 8003398:	f380 8811 	msr	BASEPRI, r0
 800339c:	bc09      	pop	{r0, r3}
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	6808      	ldr	r0, [r1, #0]
 80033a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a6:	f01e 0f10 	tst.w	lr, #16
 80033aa:	bf08      	it	eq
 80033ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033b0:	f380 8809 	msr	PSP, r0
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	f3af 8000 	nop.w

080033c0 <pxCurrentTCBConst>:
 80033c0:	20000334 	.word	0x20000334
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop

080033c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	607b      	str	r3, [r7, #4]
}
 80033e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80033e2:	f7ff fbc1 	bl	8002b68 <xTaskIncrementTick>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <xPortSysTickHandler+0x40>)
 80033ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	2300      	movs	r3, #0
 80033f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f383 8811 	msr	BASEPRI, r3
}
 80033fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	e000ed04 	.word	0xe000ed04

0800340c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <vPortSetupTimerInterrupt+0x34>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <vPortSetupTimerInterrupt+0x38>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <vPortSetupTimerInterrupt+0x3c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0a      	ldr	r2, [pc, #40]	; (800344c <vPortSetupTimerInterrupt+0x40>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	4a09      	ldr	r2, [pc, #36]	; (8003450 <vPortSetupTimerInterrupt+0x44>)
 800342a:	3b01      	subs	r3, #1
 800342c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800342e:	4b04      	ldr	r3, [pc, #16]	; (8003440 <vPortSetupTimerInterrupt+0x34>)
 8003430:	2207      	movs	r2, #7
 8003432:	601a      	str	r2, [r3, #0]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000e010 	.word	0xe000e010
 8003444:	e000e018 	.word	0xe000e018
 8003448:	20000000 	.word	0x20000000
 800344c:	10624dd3 	.word	0x10624dd3
 8003450:	e000e014 	.word	0xe000e014

08003454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003464 <vPortEnableVFP+0x10>
 8003458:	6801      	ldr	r1, [r0, #0]
 800345a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800345e:	6001      	str	r1, [r0, #0]
 8003460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003462:	bf00      	nop
 8003464:	e000ed88 	.word	0xe000ed88

08003468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003474:	f7ff face 	bl	8002a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003478:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <pvPortMalloc+0x180>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003480:	f000 f920 	bl	80036c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003484:	4b59      	ldr	r3, [pc, #356]	; (80035ec <pvPortMalloc+0x184>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 8093 	bne.w	80035b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01d      	beq.n	80034d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003498:	2208      	movs	r2, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d014      	beq.n	80034d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f023 0307 	bic.w	r3, r3, #7
 80034b0:	3308      	adds	r3, #8
 80034b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <pvPortMalloc+0x6c>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	617b      	str	r3, [r7, #20]
}
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d06e      	beq.n	80035b8 <pvPortMalloc+0x150>
 80034da:	4b45      	ldr	r3, [pc, #276]	; (80035f0 <pvPortMalloc+0x188>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d869      	bhi.n	80035b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <pvPortMalloc+0x18c>)
 80034e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80034e8:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <pvPortMalloc+0x18c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034ee:	e004      	b.n	80034fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	d903      	bls.n	800350c <pvPortMalloc+0xa4>
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f1      	bne.n	80034f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800350c:	4b36      	ldr	r3, [pc, #216]	; (80035e8 <pvPortMalloc+0x180>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	429a      	cmp	r2, r3
 8003514:	d050      	beq.n	80035b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2208      	movs	r2, #8
 800351c:	4413      	add	r3, r2
 800351e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1ad2      	subs	r2, r2, r3
 8003530:	2308      	movs	r3, #8
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	429a      	cmp	r2, r3
 8003536:	d91f      	bls.n	8003578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <pvPortMalloc+0xf8>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	613b      	str	r3, [r7, #16]
}
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	1ad2      	subs	r2, r2, r3
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003572:	69b8      	ldr	r0, [r7, #24]
 8003574:	f000 f908 	bl	8003788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <pvPortMalloc+0x188>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <pvPortMalloc+0x188>)
 8003584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <pvPortMalloc+0x188>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <pvPortMalloc+0x190>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d203      	bcs.n	800359a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <pvPortMalloc+0x188>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a18      	ldr	r2, [pc, #96]	; (80035f8 <pvPortMalloc+0x190>)
 8003598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <pvPortMalloc+0x184>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <pvPortMalloc+0x194>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a11      	ldr	r2, [pc, #68]	; (80035fc <pvPortMalloc+0x194>)
 80035b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80035b8:	f7ff fa3a 	bl	8002a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <pvPortMalloc+0x174>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	60fb      	str	r3, [r7, #12]
}
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <pvPortMalloc+0x172>
	return pvReturn;
 80035dc:	69fb      	ldr	r3, [r7, #28]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3728      	adds	r7, #40	; 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20004070 	.word	0x20004070
 80035ec:	20004084 	.word	0x20004084
 80035f0:	20004074 	.word	0x20004074
 80035f4:	20004068 	.word	0x20004068
 80035f8:	20004078 	.word	0x20004078
 80035fc:	2000407c 	.word	0x2000407c

08003600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04d      	beq.n	80036ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003612:	2308      	movs	r3, #8
 8003614:	425b      	negs	r3, r3
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4413      	add	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <vPortFree+0xb8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <vPortFree+0x44>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	60fb      	str	r3, [r7, #12]
}
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <vPortFree+0x62>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	60bb      	str	r3, [r7, #8]
}
 800365e:	bf00      	nop
 8003660:	e7fe      	b.n	8003660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <vPortFree+0xb8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01e      	beq.n	80036ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d11a      	bne.n	80036ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <vPortFree+0xb8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003688:	f7ff f9c4 	bl	8002a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <vPortFree+0xbc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4413      	add	r3, r2
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <vPortFree+0xbc>)
 8003698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800369a:	6938      	ldr	r0, [r7, #16]
 800369c:	f000 f874 	bl	8003788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80036a0:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <vPortFree+0xc0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <vPortFree+0xc0>)
 80036a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80036aa:	f7ff f9c1 	bl	8002a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80036ae:	bf00      	nop
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20004084 	.word	0x20004084
 80036bc:	20004074 	.word	0x20004074
 80036c0:	20004080 	.word	0x20004080

080036c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80036ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <prvHeapInit+0xac>)
 80036d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3307      	adds	r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <prvHeapInit+0xac>)
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <prvHeapInit+0xb0>)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003702:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <prvHeapInit+0xb0>)
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	4413      	add	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003710:	2208      	movs	r2, #8
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <prvHeapInit+0xb4>)
 8003724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <prvHeapInit+0xb4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <prvHeapInit+0xb4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	1ad2      	subs	r2, r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <prvHeapInit+0xb4>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a0a      	ldr	r2, [pc, #40]	; (800377c <prvHeapInit+0xb8>)
 8003752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a09      	ldr	r2, [pc, #36]	; (8003780 <prvHeapInit+0xbc>)
 800375a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <prvHeapInit+0xc0>)
 800375e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003762:	601a      	str	r2, [r3, #0]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	20000468 	.word	0x20000468
 8003774:	20004068 	.word	0x20004068
 8003778:	20004070 	.word	0x20004070
 800377c:	20004078 	.word	0x20004078
 8003780:	20004074 	.word	0x20004074
 8003784:	20004084 	.word	0x20004084

08003788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003790:	4b28      	ldr	r3, [pc, #160]	; (8003834 <prvInsertBlockIntoFreeList+0xac>)
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e002      	b.n	800379c <prvInsertBlockIntoFreeList+0x14>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d8f7      	bhi.n	8003796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	4413      	add	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d108      	bne.n	80037ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	441a      	add	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	441a      	add	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d118      	bne.n	8003810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b15      	ldr	r3, [pc, #84]	; (8003838 <prvInsertBlockIntoFreeList+0xb0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d00d      	beq.n	8003806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	e008      	b.n	8003818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <prvInsertBlockIntoFreeList+0xb0>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e003      	b.n	8003818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d002      	beq.n	8003826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20004068 	.word	0x20004068
 8003838:	20004070 	.word	0x20004070

0800383c <__errno>:
 800383c:	4b01      	ldr	r3, [pc, #4]	; (8003844 <__errno+0x8>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000010 	.word	0x20000010

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4d0d      	ldr	r5, [pc, #52]	; (8003880 <__libc_init_array+0x38>)
 800384c:	4c0d      	ldr	r4, [pc, #52]	; (8003884 <__libc_init_array+0x3c>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	2600      	movs	r6, #0
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	4d0b      	ldr	r5, [pc, #44]	; (8003888 <__libc_init_array+0x40>)
 800385a:	4c0c      	ldr	r4, [pc, #48]	; (800388c <__libc_init_array+0x44>)
 800385c:	f000 ffae 	bl	80047bc <_init>
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	2600      	movs	r6, #0
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	f855 3b04 	ldr.w	r3, [r5], #4
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	080048cc 	.word	0x080048cc
 8003884:	080048cc 	.word	0x080048cc
 8003888:	080048cc 	.word	0x080048cc
 800388c:	080048d0 	.word	0x080048d0

08003890 <memset>:
 8003890:	4402      	add	r2, r0
 8003892:	4603      	mov	r3, r0
 8003894:	4293      	cmp	r3, r2
 8003896:	d100      	bne.n	800389a <memset+0xa>
 8003898:	4770      	bx	lr
 800389a:	f803 1b01 	strb.w	r1, [r3], #1
 800389e:	e7f9      	b.n	8003894 <memset+0x4>

080038a0 <iprintf>:
 80038a0:	b40f      	push	{r0, r1, r2, r3}
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <iprintf+0x2c>)
 80038a4:	b513      	push	{r0, r1, r4, lr}
 80038a6:	681c      	ldr	r4, [r3, #0]
 80038a8:	b124      	cbz	r4, 80038b4 <iprintf+0x14>
 80038aa:	69a3      	ldr	r3, [r4, #24]
 80038ac:	b913      	cbnz	r3, 80038b4 <iprintf+0x14>
 80038ae:	4620      	mov	r0, r4
 80038b0:	f000 f866 	bl	8003980 <__sinit>
 80038b4:	ab05      	add	r3, sp, #20
 80038b6:	9a04      	ldr	r2, [sp, #16]
 80038b8:	68a1      	ldr	r1, [r4, #8]
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	4620      	mov	r0, r4
 80038be:	f000 f9bd 	bl	8003c3c <_vfiprintf_r>
 80038c2:	b002      	add	sp, #8
 80038c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c8:	b004      	add	sp, #16
 80038ca:	4770      	bx	lr
 80038cc:	20000010 	.word	0x20000010

080038d0 <std>:
 80038d0:	2300      	movs	r3, #0
 80038d2:	b510      	push	{r4, lr}
 80038d4:	4604      	mov	r4, r0
 80038d6:	e9c0 3300 	strd	r3, r3, [r0]
 80038da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038de:	6083      	str	r3, [r0, #8]
 80038e0:	8181      	strh	r1, [r0, #12]
 80038e2:	6643      	str	r3, [r0, #100]	; 0x64
 80038e4:	81c2      	strh	r2, [r0, #14]
 80038e6:	6183      	str	r3, [r0, #24]
 80038e8:	4619      	mov	r1, r3
 80038ea:	2208      	movs	r2, #8
 80038ec:	305c      	adds	r0, #92	; 0x5c
 80038ee:	f7ff ffcf 	bl	8003890 <memset>
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <std+0x38>)
 80038f4:	6263      	str	r3, [r4, #36]	; 0x24
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <std+0x3c>)
 80038f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <std+0x40>)
 80038fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <std+0x44>)
 8003900:	6224      	str	r4, [r4, #32]
 8003902:	6323      	str	r3, [r4, #48]	; 0x30
 8003904:	bd10      	pop	{r4, pc}
 8003906:	bf00      	nop
 8003908:	080041e5 	.word	0x080041e5
 800390c:	08004207 	.word	0x08004207
 8003910:	0800423f 	.word	0x0800423f
 8003914:	08004263 	.word	0x08004263

08003918 <_cleanup_r>:
 8003918:	4901      	ldr	r1, [pc, #4]	; (8003920 <_cleanup_r+0x8>)
 800391a:	f000 b8af 	b.w	8003a7c <_fwalk_reent>
 800391e:	bf00      	nop
 8003920:	0800453d 	.word	0x0800453d

08003924 <__sfmoreglue>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	2268      	movs	r2, #104	; 0x68
 8003928:	1e4d      	subs	r5, r1, #1
 800392a:	4355      	muls	r5, r2
 800392c:	460e      	mov	r6, r1
 800392e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003932:	f000 f8e5 	bl	8003b00 <_malloc_r>
 8003936:	4604      	mov	r4, r0
 8003938:	b140      	cbz	r0, 800394c <__sfmoreglue+0x28>
 800393a:	2100      	movs	r1, #0
 800393c:	e9c0 1600 	strd	r1, r6, [r0]
 8003940:	300c      	adds	r0, #12
 8003942:	60a0      	str	r0, [r4, #8]
 8003944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003948:	f7ff ffa2 	bl	8003890 <memset>
 800394c:	4620      	mov	r0, r4
 800394e:	bd70      	pop	{r4, r5, r6, pc}

08003950 <__sfp_lock_acquire>:
 8003950:	4801      	ldr	r0, [pc, #4]	; (8003958 <__sfp_lock_acquire+0x8>)
 8003952:	f000 b8b3 	b.w	8003abc <__retarget_lock_acquire_recursive>
 8003956:	bf00      	nop
 8003958:	20004089 	.word	0x20004089

0800395c <__sfp_lock_release>:
 800395c:	4801      	ldr	r0, [pc, #4]	; (8003964 <__sfp_lock_release+0x8>)
 800395e:	f000 b8ae 	b.w	8003abe <__retarget_lock_release_recursive>
 8003962:	bf00      	nop
 8003964:	20004089 	.word	0x20004089

08003968 <__sinit_lock_acquire>:
 8003968:	4801      	ldr	r0, [pc, #4]	; (8003970 <__sinit_lock_acquire+0x8>)
 800396a:	f000 b8a7 	b.w	8003abc <__retarget_lock_acquire_recursive>
 800396e:	bf00      	nop
 8003970:	2000408a 	.word	0x2000408a

08003974 <__sinit_lock_release>:
 8003974:	4801      	ldr	r0, [pc, #4]	; (800397c <__sinit_lock_release+0x8>)
 8003976:	f000 b8a2 	b.w	8003abe <__retarget_lock_release_recursive>
 800397a:	bf00      	nop
 800397c:	2000408a 	.word	0x2000408a

08003980 <__sinit>:
 8003980:	b510      	push	{r4, lr}
 8003982:	4604      	mov	r4, r0
 8003984:	f7ff fff0 	bl	8003968 <__sinit_lock_acquire>
 8003988:	69a3      	ldr	r3, [r4, #24]
 800398a:	b11b      	cbz	r3, 8003994 <__sinit+0x14>
 800398c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003990:	f7ff bff0 	b.w	8003974 <__sinit_lock_release>
 8003994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003998:	6523      	str	r3, [r4, #80]	; 0x50
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <__sinit+0x68>)
 800399c:	4a13      	ldr	r2, [pc, #76]	; (80039ec <__sinit+0x6c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80039a2:	42a3      	cmp	r3, r4
 80039a4:	bf04      	itt	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	61a3      	streq	r3, [r4, #24]
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 f820 	bl	80039f0 <__sfp>
 80039b0:	6060      	str	r0, [r4, #4]
 80039b2:	4620      	mov	r0, r4
 80039b4:	f000 f81c 	bl	80039f0 <__sfp>
 80039b8:	60a0      	str	r0, [r4, #8]
 80039ba:	4620      	mov	r0, r4
 80039bc:	f000 f818 	bl	80039f0 <__sfp>
 80039c0:	2200      	movs	r2, #0
 80039c2:	60e0      	str	r0, [r4, #12]
 80039c4:	2104      	movs	r1, #4
 80039c6:	6860      	ldr	r0, [r4, #4]
 80039c8:	f7ff ff82 	bl	80038d0 <std>
 80039cc:	68a0      	ldr	r0, [r4, #8]
 80039ce:	2201      	movs	r2, #1
 80039d0:	2109      	movs	r1, #9
 80039d2:	f7ff ff7d 	bl	80038d0 <std>
 80039d6:	68e0      	ldr	r0, [r4, #12]
 80039d8:	2202      	movs	r2, #2
 80039da:	2112      	movs	r1, #18
 80039dc:	f7ff ff78 	bl	80038d0 <std>
 80039e0:	2301      	movs	r3, #1
 80039e2:	61a3      	str	r3, [r4, #24]
 80039e4:	e7d2      	b.n	800398c <__sinit+0xc>
 80039e6:	bf00      	nop
 80039e8:	0800482c 	.word	0x0800482c
 80039ec:	08003919 	.word	0x08003919

080039f0 <__sfp>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	4607      	mov	r7, r0
 80039f4:	f7ff ffac 	bl	8003950 <__sfp_lock_acquire>
 80039f8:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <__sfp+0x84>)
 80039fa:	681e      	ldr	r6, [r3, #0]
 80039fc:	69b3      	ldr	r3, [r6, #24]
 80039fe:	b913      	cbnz	r3, 8003a06 <__sfp+0x16>
 8003a00:	4630      	mov	r0, r6
 8003a02:	f7ff ffbd 	bl	8003980 <__sinit>
 8003a06:	3648      	adds	r6, #72	; 0x48
 8003a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	d503      	bpl.n	8003a18 <__sfp+0x28>
 8003a10:	6833      	ldr	r3, [r6, #0]
 8003a12:	b30b      	cbz	r3, 8003a58 <__sfp+0x68>
 8003a14:	6836      	ldr	r6, [r6, #0]
 8003a16:	e7f7      	b.n	8003a08 <__sfp+0x18>
 8003a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a1c:	b9d5      	cbnz	r5, 8003a54 <__sfp+0x64>
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <__sfp+0x88>)
 8003a20:	60e3      	str	r3, [r4, #12]
 8003a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a26:	6665      	str	r5, [r4, #100]	; 0x64
 8003a28:	f000 f847 	bl	8003aba <__retarget_lock_init_recursive>
 8003a2c:	f7ff ff96 	bl	800395c <__sfp_lock_release>
 8003a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a38:	6025      	str	r5, [r4, #0]
 8003a3a:	61a5      	str	r5, [r4, #24]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	4629      	mov	r1, r5
 8003a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a44:	f7ff ff24 	bl	8003890 <memset>
 8003a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a50:	4620      	mov	r0, r4
 8003a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a54:	3468      	adds	r4, #104	; 0x68
 8003a56:	e7d9      	b.n	8003a0c <__sfp+0x1c>
 8003a58:	2104      	movs	r1, #4
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	f7ff ff62 	bl	8003924 <__sfmoreglue>
 8003a60:	4604      	mov	r4, r0
 8003a62:	6030      	str	r0, [r6, #0]
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d1d5      	bne.n	8003a14 <__sfp+0x24>
 8003a68:	f7ff ff78 	bl	800395c <__sfp_lock_release>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	e7ee      	b.n	8003a50 <__sfp+0x60>
 8003a72:	bf00      	nop
 8003a74:	0800482c 	.word	0x0800482c
 8003a78:	ffff0001 	.word	0xffff0001

08003a7c <_fwalk_reent>:
 8003a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a80:	4606      	mov	r6, r0
 8003a82:	4688      	mov	r8, r1
 8003a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a88:	2700      	movs	r7, #0
 8003a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8003a92:	d505      	bpl.n	8003aa0 <_fwalk_reent+0x24>
 8003a94:	6824      	ldr	r4, [r4, #0]
 8003a96:	2c00      	cmp	r4, #0
 8003a98:	d1f7      	bne.n	8003a8a <_fwalk_reent+0xe>
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa0:	89ab      	ldrh	r3, [r5, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d907      	bls.n	8003ab6 <_fwalk_reent+0x3a>
 8003aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	d003      	beq.n	8003ab6 <_fwalk_reent+0x3a>
 8003aae:	4629      	mov	r1, r5
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	47c0      	blx	r8
 8003ab4:	4307      	orrs	r7, r0
 8003ab6:	3568      	adds	r5, #104	; 0x68
 8003ab8:	e7e9      	b.n	8003a8e <_fwalk_reent+0x12>

08003aba <__retarget_lock_init_recursive>:
 8003aba:	4770      	bx	lr

08003abc <__retarget_lock_acquire_recursive>:
 8003abc:	4770      	bx	lr

08003abe <__retarget_lock_release_recursive>:
 8003abe:	4770      	bx	lr

08003ac0 <sbrk_aligned>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	4e0e      	ldr	r6, [pc, #56]	; (8003afc <sbrk_aligned+0x3c>)
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	6831      	ldr	r1, [r6, #0]
 8003ac8:	4605      	mov	r5, r0
 8003aca:	b911      	cbnz	r1, 8003ad2 <sbrk_aligned+0x12>
 8003acc:	f000 fb7a 	bl	80041c4 <_sbrk_r>
 8003ad0:	6030      	str	r0, [r6, #0]
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 fb75 	bl	80041c4 <_sbrk_r>
 8003ada:	1c43      	adds	r3, r0, #1
 8003adc:	d00a      	beq.n	8003af4 <sbrk_aligned+0x34>
 8003ade:	1cc4      	adds	r4, r0, #3
 8003ae0:	f024 0403 	bic.w	r4, r4, #3
 8003ae4:	42a0      	cmp	r0, r4
 8003ae6:	d007      	beq.n	8003af8 <sbrk_aligned+0x38>
 8003ae8:	1a21      	subs	r1, r4, r0
 8003aea:	4628      	mov	r0, r5
 8003aec:	f000 fb6a 	bl	80041c4 <_sbrk_r>
 8003af0:	3001      	adds	r0, #1
 8003af2:	d101      	bne.n	8003af8 <sbrk_aligned+0x38>
 8003af4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003af8:	4620      	mov	r0, r4
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	20004090 	.word	0x20004090

08003b00 <_malloc_r>:
 8003b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b04:	1ccd      	adds	r5, r1, #3
 8003b06:	f025 0503 	bic.w	r5, r5, #3
 8003b0a:	3508      	adds	r5, #8
 8003b0c:	2d0c      	cmp	r5, #12
 8003b0e:	bf38      	it	cc
 8003b10:	250c      	movcc	r5, #12
 8003b12:	2d00      	cmp	r5, #0
 8003b14:	4607      	mov	r7, r0
 8003b16:	db01      	blt.n	8003b1c <_malloc_r+0x1c>
 8003b18:	42a9      	cmp	r1, r5
 8003b1a:	d905      	bls.n	8003b28 <_malloc_r+0x28>
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	2600      	movs	r6, #0
 8003b22:	4630      	mov	r0, r6
 8003b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b28:	4e2e      	ldr	r6, [pc, #184]	; (8003be4 <_malloc_r+0xe4>)
 8003b2a:	f000 fdbb 	bl	80046a4 <__malloc_lock>
 8003b2e:	6833      	ldr	r3, [r6, #0]
 8003b30:	461c      	mov	r4, r3
 8003b32:	bb34      	cbnz	r4, 8003b82 <_malloc_r+0x82>
 8003b34:	4629      	mov	r1, r5
 8003b36:	4638      	mov	r0, r7
 8003b38:	f7ff ffc2 	bl	8003ac0 <sbrk_aligned>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	4604      	mov	r4, r0
 8003b40:	d14d      	bne.n	8003bde <_malloc_r+0xde>
 8003b42:	6834      	ldr	r4, [r6, #0]
 8003b44:	4626      	mov	r6, r4
 8003b46:	2e00      	cmp	r6, #0
 8003b48:	d140      	bne.n	8003bcc <_malloc_r+0xcc>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	4631      	mov	r1, r6
 8003b4e:	4638      	mov	r0, r7
 8003b50:	eb04 0803 	add.w	r8, r4, r3
 8003b54:	f000 fb36 	bl	80041c4 <_sbrk_r>
 8003b58:	4580      	cmp	r8, r0
 8003b5a:	d13a      	bne.n	8003bd2 <_malloc_r+0xd2>
 8003b5c:	6821      	ldr	r1, [r4, #0]
 8003b5e:	3503      	adds	r5, #3
 8003b60:	1a6d      	subs	r5, r5, r1
 8003b62:	f025 0503 	bic.w	r5, r5, #3
 8003b66:	3508      	adds	r5, #8
 8003b68:	2d0c      	cmp	r5, #12
 8003b6a:	bf38      	it	cc
 8003b6c:	250c      	movcc	r5, #12
 8003b6e:	4629      	mov	r1, r5
 8003b70:	4638      	mov	r0, r7
 8003b72:	f7ff ffa5 	bl	8003ac0 <sbrk_aligned>
 8003b76:	3001      	adds	r0, #1
 8003b78:	d02b      	beq.n	8003bd2 <_malloc_r+0xd2>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	442b      	add	r3, r5
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	e00e      	b.n	8003ba0 <_malloc_r+0xa0>
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	1b52      	subs	r2, r2, r5
 8003b86:	d41e      	bmi.n	8003bc6 <_malloc_r+0xc6>
 8003b88:	2a0b      	cmp	r2, #11
 8003b8a:	d916      	bls.n	8003bba <_malloc_r+0xba>
 8003b8c:	1961      	adds	r1, r4, r5
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	6025      	str	r5, [r4, #0]
 8003b92:	bf18      	it	ne
 8003b94:	6059      	strne	r1, [r3, #4]
 8003b96:	6863      	ldr	r3, [r4, #4]
 8003b98:	bf08      	it	eq
 8003b9a:	6031      	streq	r1, [r6, #0]
 8003b9c:	5162      	str	r2, [r4, r5]
 8003b9e:	604b      	str	r3, [r1, #4]
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f104 060b 	add.w	r6, r4, #11
 8003ba6:	f000 fd83 	bl	80046b0 <__malloc_unlock>
 8003baa:	f026 0607 	bic.w	r6, r6, #7
 8003bae:	1d23      	adds	r3, r4, #4
 8003bb0:	1af2      	subs	r2, r6, r3
 8003bb2:	d0b6      	beq.n	8003b22 <_malloc_r+0x22>
 8003bb4:	1b9b      	subs	r3, r3, r6
 8003bb6:	50a3      	str	r3, [r4, r2]
 8003bb8:	e7b3      	b.n	8003b22 <_malloc_r+0x22>
 8003bba:	6862      	ldr	r2, [r4, #4]
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	bf0c      	ite	eq
 8003bc0:	6032      	streq	r2, [r6, #0]
 8003bc2:	605a      	strne	r2, [r3, #4]
 8003bc4:	e7ec      	b.n	8003ba0 <_malloc_r+0xa0>
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	6864      	ldr	r4, [r4, #4]
 8003bca:	e7b2      	b.n	8003b32 <_malloc_r+0x32>
 8003bcc:	4634      	mov	r4, r6
 8003bce:	6876      	ldr	r6, [r6, #4]
 8003bd0:	e7b9      	b.n	8003b46 <_malloc_r+0x46>
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	f000 fd6a 	bl	80046b0 <__malloc_unlock>
 8003bdc:	e7a1      	b.n	8003b22 <_malloc_r+0x22>
 8003bde:	6025      	str	r5, [r4, #0]
 8003be0:	e7de      	b.n	8003ba0 <_malloc_r+0xa0>
 8003be2:	bf00      	nop
 8003be4:	2000408c 	.word	0x2000408c

08003be8 <__sfputc_r>:
 8003be8:	6893      	ldr	r3, [r2, #8]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	b410      	push	{r4}
 8003bf0:	6093      	str	r3, [r2, #8]
 8003bf2:	da08      	bge.n	8003c06 <__sfputc_r+0x1e>
 8003bf4:	6994      	ldr	r4, [r2, #24]
 8003bf6:	42a3      	cmp	r3, r4
 8003bf8:	db01      	blt.n	8003bfe <__sfputc_r+0x16>
 8003bfa:	290a      	cmp	r1, #10
 8003bfc:	d103      	bne.n	8003c06 <__sfputc_r+0x1e>
 8003bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c02:	f000 bb33 	b.w	800426c <__swbuf_r>
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	1c58      	adds	r0, r3, #1
 8003c0a:	6010      	str	r0, [r2, #0]
 8003c0c:	7019      	strb	r1, [r3, #0]
 8003c0e:	4608      	mov	r0, r1
 8003c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <__sfputs_r>:
 8003c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c18:	4606      	mov	r6, r0
 8003c1a:	460f      	mov	r7, r1
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	18d5      	adds	r5, r2, r3
 8003c20:	42ac      	cmp	r4, r5
 8003c22:	d101      	bne.n	8003c28 <__sfputs_r+0x12>
 8003c24:	2000      	movs	r0, #0
 8003c26:	e007      	b.n	8003c38 <__sfputs_r+0x22>
 8003c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2c:	463a      	mov	r2, r7
 8003c2e:	4630      	mov	r0, r6
 8003c30:	f7ff ffda 	bl	8003be8 <__sfputc_r>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d1f3      	bne.n	8003c20 <__sfputs_r+0xa>
 8003c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c3c <_vfiprintf_r>:
 8003c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c40:	460d      	mov	r5, r1
 8003c42:	b09d      	sub	sp, #116	; 0x74
 8003c44:	4614      	mov	r4, r2
 8003c46:	4698      	mov	r8, r3
 8003c48:	4606      	mov	r6, r0
 8003c4a:	b118      	cbz	r0, 8003c54 <_vfiprintf_r+0x18>
 8003c4c:	6983      	ldr	r3, [r0, #24]
 8003c4e:	b90b      	cbnz	r3, 8003c54 <_vfiprintf_r+0x18>
 8003c50:	f7ff fe96 	bl	8003980 <__sinit>
 8003c54:	4b89      	ldr	r3, [pc, #548]	; (8003e7c <_vfiprintf_r+0x240>)
 8003c56:	429d      	cmp	r5, r3
 8003c58:	d11b      	bne.n	8003c92 <_vfiprintf_r+0x56>
 8003c5a:	6875      	ldr	r5, [r6, #4]
 8003c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c5e:	07d9      	lsls	r1, r3, #31
 8003c60:	d405      	bmi.n	8003c6e <_vfiprintf_r+0x32>
 8003c62:	89ab      	ldrh	r3, [r5, #12]
 8003c64:	059a      	lsls	r2, r3, #22
 8003c66:	d402      	bmi.n	8003c6e <_vfiprintf_r+0x32>
 8003c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c6a:	f7ff ff27 	bl	8003abc <__retarget_lock_acquire_recursive>
 8003c6e:	89ab      	ldrh	r3, [r5, #12]
 8003c70:	071b      	lsls	r3, r3, #28
 8003c72:	d501      	bpl.n	8003c78 <_vfiprintf_r+0x3c>
 8003c74:	692b      	ldr	r3, [r5, #16]
 8003c76:	b9eb      	cbnz	r3, 8003cb4 <_vfiprintf_r+0x78>
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 fb5a 	bl	8004334 <__swsetup_r>
 8003c80:	b1c0      	cbz	r0, 8003cb4 <_vfiprintf_r+0x78>
 8003c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c84:	07dc      	lsls	r4, r3, #31
 8003c86:	d50e      	bpl.n	8003ca6 <_vfiprintf_r+0x6a>
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c8c:	b01d      	add	sp, #116	; 0x74
 8003c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c92:	4b7b      	ldr	r3, [pc, #492]	; (8003e80 <_vfiprintf_r+0x244>)
 8003c94:	429d      	cmp	r5, r3
 8003c96:	d101      	bne.n	8003c9c <_vfiprintf_r+0x60>
 8003c98:	68b5      	ldr	r5, [r6, #8]
 8003c9a:	e7df      	b.n	8003c5c <_vfiprintf_r+0x20>
 8003c9c:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <_vfiprintf_r+0x248>)
 8003c9e:	429d      	cmp	r5, r3
 8003ca0:	bf08      	it	eq
 8003ca2:	68f5      	ldreq	r5, [r6, #12]
 8003ca4:	e7da      	b.n	8003c5c <_vfiprintf_r+0x20>
 8003ca6:	89ab      	ldrh	r3, [r5, #12]
 8003ca8:	0598      	lsls	r0, r3, #22
 8003caa:	d4ed      	bmi.n	8003c88 <_vfiprintf_r+0x4c>
 8003cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cae:	f7ff ff06 	bl	8003abe <__retarget_lock_release_recursive>
 8003cb2:	e7e9      	b.n	8003c88 <_vfiprintf_r+0x4c>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb8:	2320      	movs	r3, #32
 8003cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cc2:	2330      	movs	r3, #48	; 0x30
 8003cc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e88 <_vfiprintf_r+0x24c>
 8003cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ccc:	f04f 0901 	mov.w	r9, #1
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	469a      	mov	sl, r3
 8003cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cd8:	b10a      	cbz	r2, 8003cde <_vfiprintf_r+0xa2>
 8003cda:	2a25      	cmp	r2, #37	; 0x25
 8003cdc:	d1f9      	bne.n	8003cd2 <_vfiprintf_r+0x96>
 8003cde:	ebba 0b04 	subs.w	fp, sl, r4
 8003ce2:	d00b      	beq.n	8003cfc <_vfiprintf_r+0xc0>
 8003ce4:	465b      	mov	r3, fp
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	4629      	mov	r1, r5
 8003cea:	4630      	mov	r0, r6
 8003cec:	f7ff ff93 	bl	8003c16 <__sfputs_r>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	f000 80aa 	beq.w	8003e4a <_vfiprintf_r+0x20e>
 8003cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cf8:	445a      	add	r2, fp
 8003cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8003cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a2 	beq.w	8003e4a <_vfiprintf_r+0x20e>
 8003d06:	2300      	movs	r3, #0
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d10:	f10a 0a01 	add.w	sl, sl, #1
 8003d14:	9304      	str	r3, [sp, #16]
 8003d16:	9307      	str	r3, [sp, #28]
 8003d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8003d1e:	4654      	mov	r4, sl
 8003d20:	2205      	movs	r2, #5
 8003d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d26:	4858      	ldr	r0, [pc, #352]	; (8003e88 <_vfiprintf_r+0x24c>)
 8003d28:	f7fc fa72 	bl	8000210 <memchr>
 8003d2c:	9a04      	ldr	r2, [sp, #16]
 8003d2e:	b9d8      	cbnz	r0, 8003d68 <_vfiprintf_r+0x12c>
 8003d30:	06d1      	lsls	r1, r2, #27
 8003d32:	bf44      	itt	mi
 8003d34:	2320      	movmi	r3, #32
 8003d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d3a:	0713      	lsls	r3, r2, #28
 8003d3c:	bf44      	itt	mi
 8003d3e:	232b      	movmi	r3, #43	; 0x2b
 8003d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d44:	f89a 3000 	ldrb.w	r3, [sl]
 8003d48:	2b2a      	cmp	r3, #42	; 0x2a
 8003d4a:	d015      	beq.n	8003d78 <_vfiprintf_r+0x13c>
 8003d4c:	9a07      	ldr	r2, [sp, #28]
 8003d4e:	4654      	mov	r4, sl
 8003d50:	2000      	movs	r0, #0
 8003d52:	f04f 0c0a 	mov.w	ip, #10
 8003d56:	4621      	mov	r1, r4
 8003d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d5c:	3b30      	subs	r3, #48	; 0x30
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	d94e      	bls.n	8003e00 <_vfiprintf_r+0x1c4>
 8003d62:	b1b0      	cbz	r0, 8003d92 <_vfiprintf_r+0x156>
 8003d64:	9207      	str	r2, [sp, #28]
 8003d66:	e014      	b.n	8003d92 <_vfiprintf_r+0x156>
 8003d68:	eba0 0308 	sub.w	r3, r0, r8
 8003d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8003d70:	4313      	orrs	r3, r2
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	46a2      	mov	sl, r4
 8003d76:	e7d2      	b.n	8003d1e <_vfiprintf_r+0xe2>
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	1d19      	adds	r1, r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	9103      	str	r1, [sp, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bfbb      	ittet	lt
 8003d84:	425b      	neglt	r3, r3
 8003d86:	f042 0202 	orrlt.w	r2, r2, #2
 8003d8a:	9307      	strge	r3, [sp, #28]
 8003d8c:	9307      	strlt	r3, [sp, #28]
 8003d8e:	bfb8      	it	lt
 8003d90:	9204      	strlt	r2, [sp, #16]
 8003d92:	7823      	ldrb	r3, [r4, #0]
 8003d94:	2b2e      	cmp	r3, #46	; 0x2e
 8003d96:	d10c      	bne.n	8003db2 <_vfiprintf_r+0x176>
 8003d98:	7863      	ldrb	r3, [r4, #1]
 8003d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d9c:	d135      	bne.n	8003e0a <_vfiprintf_r+0x1ce>
 8003d9e:	9b03      	ldr	r3, [sp, #12]
 8003da0:	1d1a      	adds	r2, r3, #4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	9203      	str	r2, [sp, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bfb8      	it	lt
 8003daa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003dae:	3402      	adds	r4, #2
 8003db0:	9305      	str	r3, [sp, #20]
 8003db2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e98 <_vfiprintf_r+0x25c>
 8003db6:	7821      	ldrb	r1, [r4, #0]
 8003db8:	2203      	movs	r2, #3
 8003dba:	4650      	mov	r0, sl
 8003dbc:	f7fc fa28 	bl	8000210 <memchr>
 8003dc0:	b140      	cbz	r0, 8003dd4 <_vfiprintf_r+0x198>
 8003dc2:	2340      	movs	r3, #64	; 0x40
 8003dc4:	eba0 000a 	sub.w	r0, r0, sl
 8003dc8:	fa03 f000 	lsl.w	r0, r3, r0
 8003dcc:	9b04      	ldr	r3, [sp, #16]
 8003dce:	4303      	orrs	r3, r0
 8003dd0:	3401      	adds	r4, #1
 8003dd2:	9304      	str	r3, [sp, #16]
 8003dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd8:	482c      	ldr	r0, [pc, #176]	; (8003e8c <_vfiprintf_r+0x250>)
 8003dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dde:	2206      	movs	r2, #6
 8003de0:	f7fc fa16 	bl	8000210 <memchr>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d03f      	beq.n	8003e68 <_vfiprintf_r+0x22c>
 8003de8:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <_vfiprintf_r+0x254>)
 8003dea:	bb1b      	cbnz	r3, 8003e34 <_vfiprintf_r+0x1f8>
 8003dec:	9b03      	ldr	r3, [sp, #12]
 8003dee:	3307      	adds	r3, #7
 8003df0:	f023 0307 	bic.w	r3, r3, #7
 8003df4:	3308      	adds	r3, #8
 8003df6:	9303      	str	r3, [sp, #12]
 8003df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfa:	443b      	add	r3, r7
 8003dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dfe:	e767      	b.n	8003cd0 <_vfiprintf_r+0x94>
 8003e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e04:	460c      	mov	r4, r1
 8003e06:	2001      	movs	r0, #1
 8003e08:	e7a5      	b.n	8003d56 <_vfiprintf_r+0x11a>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	3401      	adds	r4, #1
 8003e0e:	9305      	str	r3, [sp, #20]
 8003e10:	4619      	mov	r1, r3
 8003e12:	f04f 0c0a 	mov.w	ip, #10
 8003e16:	4620      	mov	r0, r4
 8003e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e1c:	3a30      	subs	r2, #48	; 0x30
 8003e1e:	2a09      	cmp	r2, #9
 8003e20:	d903      	bls.n	8003e2a <_vfiprintf_r+0x1ee>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0c5      	beq.n	8003db2 <_vfiprintf_r+0x176>
 8003e26:	9105      	str	r1, [sp, #20]
 8003e28:	e7c3      	b.n	8003db2 <_vfiprintf_r+0x176>
 8003e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e2e:	4604      	mov	r4, r0
 8003e30:	2301      	movs	r3, #1
 8003e32:	e7f0      	b.n	8003e16 <_vfiprintf_r+0x1da>
 8003e34:	ab03      	add	r3, sp, #12
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	462a      	mov	r2, r5
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <_vfiprintf_r+0x258>)
 8003e3c:	a904      	add	r1, sp, #16
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f3af 8000 	nop.w
 8003e44:	4607      	mov	r7, r0
 8003e46:	1c78      	adds	r0, r7, #1
 8003e48:	d1d6      	bne.n	8003df8 <_vfiprintf_r+0x1bc>
 8003e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e4c:	07d9      	lsls	r1, r3, #31
 8003e4e:	d405      	bmi.n	8003e5c <_vfiprintf_r+0x220>
 8003e50:	89ab      	ldrh	r3, [r5, #12]
 8003e52:	059a      	lsls	r2, r3, #22
 8003e54:	d402      	bmi.n	8003e5c <_vfiprintf_r+0x220>
 8003e56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e58:	f7ff fe31 	bl	8003abe <__retarget_lock_release_recursive>
 8003e5c:	89ab      	ldrh	r3, [r5, #12]
 8003e5e:	065b      	lsls	r3, r3, #25
 8003e60:	f53f af12 	bmi.w	8003c88 <_vfiprintf_r+0x4c>
 8003e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e66:	e711      	b.n	8003c8c <_vfiprintf_r+0x50>
 8003e68:	ab03      	add	r3, sp, #12
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	462a      	mov	r2, r5
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <_vfiprintf_r+0x258>)
 8003e70:	a904      	add	r1, sp, #16
 8003e72:	4630      	mov	r0, r6
 8003e74:	f000 f880 	bl	8003f78 <_printf_i>
 8003e78:	e7e4      	b.n	8003e44 <_vfiprintf_r+0x208>
 8003e7a:	bf00      	nop
 8003e7c:	08004850 	.word	0x08004850
 8003e80:	08004870 	.word	0x08004870
 8003e84:	08004830 	.word	0x08004830
 8003e88:	08004890 	.word	0x08004890
 8003e8c:	0800489a 	.word	0x0800489a
 8003e90:	00000000 	.word	0x00000000
 8003e94:	08003c17 	.word	0x08003c17
 8003e98:	08004896 	.word	0x08004896

08003e9c <_printf_common>:
 8003e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea0:	4616      	mov	r6, r2
 8003ea2:	4699      	mov	r9, r3
 8003ea4:	688a      	ldr	r2, [r1, #8]
 8003ea6:	690b      	ldr	r3, [r1, #16]
 8003ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003eac:	4293      	cmp	r3, r2
 8003eae:	bfb8      	it	lt
 8003eb0:	4613      	movlt	r3, r2
 8003eb2:	6033      	str	r3, [r6, #0]
 8003eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eb8:	4607      	mov	r7, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	b10a      	cbz	r2, 8003ec2 <_printf_common+0x26>
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	6033      	str	r3, [r6, #0]
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	0699      	lsls	r1, r3, #26
 8003ec6:	bf42      	ittt	mi
 8003ec8:	6833      	ldrmi	r3, [r6, #0]
 8003eca:	3302      	addmi	r3, #2
 8003ecc:	6033      	strmi	r3, [r6, #0]
 8003ece:	6825      	ldr	r5, [r4, #0]
 8003ed0:	f015 0506 	ands.w	r5, r5, #6
 8003ed4:	d106      	bne.n	8003ee4 <_printf_common+0x48>
 8003ed6:	f104 0a19 	add.w	sl, r4, #25
 8003eda:	68e3      	ldr	r3, [r4, #12]
 8003edc:	6832      	ldr	r2, [r6, #0]
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	42ab      	cmp	r3, r5
 8003ee2:	dc26      	bgt.n	8003f32 <_printf_common+0x96>
 8003ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ee8:	1e13      	subs	r3, r2, #0
 8003eea:	6822      	ldr	r2, [r4, #0]
 8003eec:	bf18      	it	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	0692      	lsls	r2, r2, #26
 8003ef2:	d42b      	bmi.n	8003f4c <_printf_common+0xb0>
 8003ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ef8:	4649      	mov	r1, r9
 8003efa:	4638      	mov	r0, r7
 8003efc:	47c0      	blx	r8
 8003efe:	3001      	adds	r0, #1
 8003f00:	d01e      	beq.n	8003f40 <_printf_common+0xa4>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	68e5      	ldr	r5, [r4, #12]
 8003f06:	6832      	ldr	r2, [r6, #0]
 8003f08:	f003 0306 	and.w	r3, r3, #6
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	bf08      	it	eq
 8003f10:	1aad      	subeq	r5, r5, r2
 8003f12:	68a3      	ldr	r3, [r4, #8]
 8003f14:	6922      	ldr	r2, [r4, #16]
 8003f16:	bf0c      	ite	eq
 8003f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f1c:	2500      	movne	r5, #0
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	bfc4      	itt	gt
 8003f22:	1a9b      	subgt	r3, r3, r2
 8003f24:	18ed      	addgt	r5, r5, r3
 8003f26:	2600      	movs	r6, #0
 8003f28:	341a      	adds	r4, #26
 8003f2a:	42b5      	cmp	r5, r6
 8003f2c:	d11a      	bne.n	8003f64 <_printf_common+0xc8>
 8003f2e:	2000      	movs	r0, #0
 8003f30:	e008      	b.n	8003f44 <_printf_common+0xa8>
 8003f32:	2301      	movs	r3, #1
 8003f34:	4652      	mov	r2, sl
 8003f36:	4649      	mov	r1, r9
 8003f38:	4638      	mov	r0, r7
 8003f3a:	47c0      	blx	r8
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d103      	bne.n	8003f48 <_printf_common+0xac>
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f48:	3501      	adds	r5, #1
 8003f4a:	e7c6      	b.n	8003eda <_printf_common+0x3e>
 8003f4c:	18e1      	adds	r1, r4, r3
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	2030      	movs	r0, #48	; 0x30
 8003f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f56:	4422      	add	r2, r4
 8003f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f60:	3302      	adds	r3, #2
 8003f62:	e7c7      	b.n	8003ef4 <_printf_common+0x58>
 8003f64:	2301      	movs	r3, #1
 8003f66:	4622      	mov	r2, r4
 8003f68:	4649      	mov	r1, r9
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	47c0      	blx	r8
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d0e6      	beq.n	8003f40 <_printf_common+0xa4>
 8003f72:	3601      	adds	r6, #1
 8003f74:	e7d9      	b.n	8003f2a <_printf_common+0x8e>
	...

08003f78 <_printf_i>:
 8003f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7c:	7e0f      	ldrb	r7, [r1, #24]
 8003f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f80:	2f78      	cmp	r7, #120	; 0x78
 8003f82:	4691      	mov	r9, r2
 8003f84:	4680      	mov	r8, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	469a      	mov	sl, r3
 8003f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f8e:	d807      	bhi.n	8003fa0 <_printf_i+0x28>
 8003f90:	2f62      	cmp	r7, #98	; 0x62
 8003f92:	d80a      	bhi.n	8003faa <_printf_i+0x32>
 8003f94:	2f00      	cmp	r7, #0
 8003f96:	f000 80d8 	beq.w	800414a <_printf_i+0x1d2>
 8003f9a:	2f58      	cmp	r7, #88	; 0x58
 8003f9c:	f000 80a3 	beq.w	80040e6 <_printf_i+0x16e>
 8003fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fa8:	e03a      	b.n	8004020 <_printf_i+0xa8>
 8003faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fae:	2b15      	cmp	r3, #21
 8003fb0:	d8f6      	bhi.n	8003fa0 <_printf_i+0x28>
 8003fb2:	a101      	add	r1, pc, #4	; (adr r1, 8003fb8 <_printf_i+0x40>)
 8003fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fb8:	08004011 	.word	0x08004011
 8003fbc:	08004025 	.word	0x08004025
 8003fc0:	08003fa1 	.word	0x08003fa1
 8003fc4:	08003fa1 	.word	0x08003fa1
 8003fc8:	08003fa1 	.word	0x08003fa1
 8003fcc:	08003fa1 	.word	0x08003fa1
 8003fd0:	08004025 	.word	0x08004025
 8003fd4:	08003fa1 	.word	0x08003fa1
 8003fd8:	08003fa1 	.word	0x08003fa1
 8003fdc:	08003fa1 	.word	0x08003fa1
 8003fe0:	08003fa1 	.word	0x08003fa1
 8003fe4:	08004131 	.word	0x08004131
 8003fe8:	08004055 	.word	0x08004055
 8003fec:	08004113 	.word	0x08004113
 8003ff0:	08003fa1 	.word	0x08003fa1
 8003ff4:	08003fa1 	.word	0x08003fa1
 8003ff8:	08004153 	.word	0x08004153
 8003ffc:	08003fa1 	.word	0x08003fa1
 8004000:	08004055 	.word	0x08004055
 8004004:	08003fa1 	.word	0x08003fa1
 8004008:	08003fa1 	.word	0x08003fa1
 800400c:	0800411b 	.word	0x0800411b
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	1d1a      	adds	r2, r3, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	602a      	str	r2, [r5, #0]
 8004018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800401c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004020:	2301      	movs	r3, #1
 8004022:	e0a3      	b.n	800416c <_printf_i+0x1f4>
 8004024:	6820      	ldr	r0, [r4, #0]
 8004026:	6829      	ldr	r1, [r5, #0]
 8004028:	0606      	lsls	r6, r0, #24
 800402a:	f101 0304 	add.w	r3, r1, #4
 800402e:	d50a      	bpl.n	8004046 <_printf_i+0xce>
 8004030:	680e      	ldr	r6, [r1, #0]
 8004032:	602b      	str	r3, [r5, #0]
 8004034:	2e00      	cmp	r6, #0
 8004036:	da03      	bge.n	8004040 <_printf_i+0xc8>
 8004038:	232d      	movs	r3, #45	; 0x2d
 800403a:	4276      	negs	r6, r6
 800403c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004040:	485e      	ldr	r0, [pc, #376]	; (80041bc <_printf_i+0x244>)
 8004042:	230a      	movs	r3, #10
 8004044:	e019      	b.n	800407a <_printf_i+0x102>
 8004046:	680e      	ldr	r6, [r1, #0]
 8004048:	602b      	str	r3, [r5, #0]
 800404a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800404e:	bf18      	it	ne
 8004050:	b236      	sxthne	r6, r6
 8004052:	e7ef      	b.n	8004034 <_printf_i+0xbc>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	1d19      	adds	r1, r3, #4
 800405a:	6029      	str	r1, [r5, #0]
 800405c:	0601      	lsls	r1, r0, #24
 800405e:	d501      	bpl.n	8004064 <_printf_i+0xec>
 8004060:	681e      	ldr	r6, [r3, #0]
 8004062:	e002      	b.n	800406a <_printf_i+0xf2>
 8004064:	0646      	lsls	r6, r0, #25
 8004066:	d5fb      	bpl.n	8004060 <_printf_i+0xe8>
 8004068:	881e      	ldrh	r6, [r3, #0]
 800406a:	4854      	ldr	r0, [pc, #336]	; (80041bc <_printf_i+0x244>)
 800406c:	2f6f      	cmp	r7, #111	; 0x6f
 800406e:	bf0c      	ite	eq
 8004070:	2308      	moveq	r3, #8
 8004072:	230a      	movne	r3, #10
 8004074:	2100      	movs	r1, #0
 8004076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800407a:	6865      	ldr	r5, [r4, #4]
 800407c:	60a5      	str	r5, [r4, #8]
 800407e:	2d00      	cmp	r5, #0
 8004080:	bfa2      	ittt	ge
 8004082:	6821      	ldrge	r1, [r4, #0]
 8004084:	f021 0104 	bicge.w	r1, r1, #4
 8004088:	6021      	strge	r1, [r4, #0]
 800408a:	b90e      	cbnz	r6, 8004090 <_printf_i+0x118>
 800408c:	2d00      	cmp	r5, #0
 800408e:	d04d      	beq.n	800412c <_printf_i+0x1b4>
 8004090:	4615      	mov	r5, r2
 8004092:	fbb6 f1f3 	udiv	r1, r6, r3
 8004096:	fb03 6711 	mls	r7, r3, r1, r6
 800409a:	5dc7      	ldrb	r7, [r0, r7]
 800409c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040a0:	4637      	mov	r7, r6
 80040a2:	42bb      	cmp	r3, r7
 80040a4:	460e      	mov	r6, r1
 80040a6:	d9f4      	bls.n	8004092 <_printf_i+0x11a>
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d10b      	bne.n	80040c4 <_printf_i+0x14c>
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	07de      	lsls	r6, r3, #31
 80040b0:	d508      	bpl.n	80040c4 <_printf_i+0x14c>
 80040b2:	6923      	ldr	r3, [r4, #16]
 80040b4:	6861      	ldr	r1, [r4, #4]
 80040b6:	4299      	cmp	r1, r3
 80040b8:	bfde      	ittt	le
 80040ba:	2330      	movle	r3, #48	; 0x30
 80040bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040c4:	1b52      	subs	r2, r2, r5
 80040c6:	6122      	str	r2, [r4, #16]
 80040c8:	f8cd a000 	str.w	sl, [sp]
 80040cc:	464b      	mov	r3, r9
 80040ce:	aa03      	add	r2, sp, #12
 80040d0:	4621      	mov	r1, r4
 80040d2:	4640      	mov	r0, r8
 80040d4:	f7ff fee2 	bl	8003e9c <_printf_common>
 80040d8:	3001      	adds	r0, #1
 80040da:	d14c      	bne.n	8004176 <_printf_i+0x1fe>
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e0:	b004      	add	sp, #16
 80040e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e6:	4835      	ldr	r0, [pc, #212]	; (80041bc <_printf_i+0x244>)
 80040e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040ec:	6829      	ldr	r1, [r5, #0]
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80040f4:	6029      	str	r1, [r5, #0]
 80040f6:	061d      	lsls	r5, r3, #24
 80040f8:	d514      	bpl.n	8004124 <_printf_i+0x1ac>
 80040fa:	07df      	lsls	r7, r3, #31
 80040fc:	bf44      	itt	mi
 80040fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004102:	6023      	strmi	r3, [r4, #0]
 8004104:	b91e      	cbnz	r6, 800410e <_printf_i+0x196>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	f023 0320 	bic.w	r3, r3, #32
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	2310      	movs	r3, #16
 8004110:	e7b0      	b.n	8004074 <_printf_i+0xfc>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	f043 0320 	orr.w	r3, r3, #32
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	2378      	movs	r3, #120	; 0x78
 800411c:	4828      	ldr	r0, [pc, #160]	; (80041c0 <_printf_i+0x248>)
 800411e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004122:	e7e3      	b.n	80040ec <_printf_i+0x174>
 8004124:	0659      	lsls	r1, r3, #25
 8004126:	bf48      	it	mi
 8004128:	b2b6      	uxthmi	r6, r6
 800412a:	e7e6      	b.n	80040fa <_printf_i+0x182>
 800412c:	4615      	mov	r5, r2
 800412e:	e7bb      	b.n	80040a8 <_printf_i+0x130>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	6826      	ldr	r6, [r4, #0]
 8004134:	6961      	ldr	r1, [r4, #20]
 8004136:	1d18      	adds	r0, r3, #4
 8004138:	6028      	str	r0, [r5, #0]
 800413a:	0635      	lsls	r5, r6, #24
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	d501      	bpl.n	8004144 <_printf_i+0x1cc>
 8004140:	6019      	str	r1, [r3, #0]
 8004142:	e002      	b.n	800414a <_printf_i+0x1d2>
 8004144:	0670      	lsls	r0, r6, #25
 8004146:	d5fb      	bpl.n	8004140 <_printf_i+0x1c8>
 8004148:	8019      	strh	r1, [r3, #0]
 800414a:	2300      	movs	r3, #0
 800414c:	6123      	str	r3, [r4, #16]
 800414e:	4615      	mov	r5, r2
 8004150:	e7ba      	b.n	80040c8 <_printf_i+0x150>
 8004152:	682b      	ldr	r3, [r5, #0]
 8004154:	1d1a      	adds	r2, r3, #4
 8004156:	602a      	str	r2, [r5, #0]
 8004158:	681d      	ldr	r5, [r3, #0]
 800415a:	6862      	ldr	r2, [r4, #4]
 800415c:	2100      	movs	r1, #0
 800415e:	4628      	mov	r0, r5
 8004160:	f7fc f856 	bl	8000210 <memchr>
 8004164:	b108      	cbz	r0, 800416a <_printf_i+0x1f2>
 8004166:	1b40      	subs	r0, r0, r5
 8004168:	6060      	str	r0, [r4, #4]
 800416a:	6863      	ldr	r3, [r4, #4]
 800416c:	6123      	str	r3, [r4, #16]
 800416e:	2300      	movs	r3, #0
 8004170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004174:	e7a8      	b.n	80040c8 <_printf_i+0x150>
 8004176:	6923      	ldr	r3, [r4, #16]
 8004178:	462a      	mov	r2, r5
 800417a:	4649      	mov	r1, r9
 800417c:	4640      	mov	r0, r8
 800417e:	47d0      	blx	sl
 8004180:	3001      	adds	r0, #1
 8004182:	d0ab      	beq.n	80040dc <_printf_i+0x164>
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	079b      	lsls	r3, r3, #30
 8004188:	d413      	bmi.n	80041b2 <_printf_i+0x23a>
 800418a:	68e0      	ldr	r0, [r4, #12]
 800418c:	9b03      	ldr	r3, [sp, #12]
 800418e:	4298      	cmp	r0, r3
 8004190:	bfb8      	it	lt
 8004192:	4618      	movlt	r0, r3
 8004194:	e7a4      	b.n	80040e0 <_printf_i+0x168>
 8004196:	2301      	movs	r3, #1
 8004198:	4632      	mov	r2, r6
 800419a:	4649      	mov	r1, r9
 800419c:	4640      	mov	r0, r8
 800419e:	47d0      	blx	sl
 80041a0:	3001      	adds	r0, #1
 80041a2:	d09b      	beq.n	80040dc <_printf_i+0x164>
 80041a4:	3501      	adds	r5, #1
 80041a6:	68e3      	ldr	r3, [r4, #12]
 80041a8:	9903      	ldr	r1, [sp, #12]
 80041aa:	1a5b      	subs	r3, r3, r1
 80041ac:	42ab      	cmp	r3, r5
 80041ae:	dcf2      	bgt.n	8004196 <_printf_i+0x21e>
 80041b0:	e7eb      	b.n	800418a <_printf_i+0x212>
 80041b2:	2500      	movs	r5, #0
 80041b4:	f104 0619 	add.w	r6, r4, #25
 80041b8:	e7f5      	b.n	80041a6 <_printf_i+0x22e>
 80041ba:	bf00      	nop
 80041bc:	080048a1 	.word	0x080048a1
 80041c0:	080048b2 	.word	0x080048b2

080041c4 <_sbrk_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d06      	ldr	r5, [pc, #24]	; (80041e0 <_sbrk_r+0x1c>)
 80041c8:	2300      	movs	r3, #0
 80041ca:	4604      	mov	r4, r0
 80041cc:	4608      	mov	r0, r1
 80041ce:	602b      	str	r3, [r5, #0]
 80041d0:	f7fc fc66 	bl	8000aa0 <_sbrk>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d102      	bne.n	80041de <_sbrk_r+0x1a>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	b103      	cbz	r3, 80041de <_sbrk_r+0x1a>
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	20004094 	.word	0x20004094

080041e4 <__sread>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	460c      	mov	r4, r1
 80041e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ec:	f000 fab2 	bl	8004754 <_read_r>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	bfab      	itete	ge
 80041f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041f6:	89a3      	ldrhlt	r3, [r4, #12]
 80041f8:	181b      	addge	r3, r3, r0
 80041fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041fe:	bfac      	ite	ge
 8004200:	6563      	strge	r3, [r4, #84]	; 0x54
 8004202:	81a3      	strhlt	r3, [r4, #12]
 8004204:	bd10      	pop	{r4, pc}

08004206 <__swrite>:
 8004206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800420a:	461f      	mov	r7, r3
 800420c:	898b      	ldrh	r3, [r1, #12]
 800420e:	05db      	lsls	r3, r3, #23
 8004210:	4605      	mov	r5, r0
 8004212:	460c      	mov	r4, r1
 8004214:	4616      	mov	r6, r2
 8004216:	d505      	bpl.n	8004224 <__swrite+0x1e>
 8004218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421c:	2302      	movs	r3, #2
 800421e:	2200      	movs	r2, #0
 8004220:	f000 f9c8 	bl	80045b4 <_lseek_r>
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800422a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800422e:	81a3      	strh	r3, [r4, #12]
 8004230:	4632      	mov	r2, r6
 8004232:	463b      	mov	r3, r7
 8004234:	4628      	mov	r0, r5
 8004236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800423a:	f000 b869 	b.w	8004310 <_write_r>

0800423e <__sseek>:
 800423e:	b510      	push	{r4, lr}
 8004240:	460c      	mov	r4, r1
 8004242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004246:	f000 f9b5 	bl	80045b4 <_lseek_r>
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	bf15      	itete	ne
 8004250:	6560      	strne	r0, [r4, #84]	; 0x54
 8004252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800425a:	81a3      	strheq	r3, [r4, #12]
 800425c:	bf18      	it	ne
 800425e:	81a3      	strhne	r3, [r4, #12]
 8004260:	bd10      	pop	{r4, pc}

08004262 <__sclose>:
 8004262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004266:	f000 b8d3 	b.w	8004410 <_close_r>
	...

0800426c <__swbuf_r>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	460e      	mov	r6, r1
 8004270:	4614      	mov	r4, r2
 8004272:	4605      	mov	r5, r0
 8004274:	b118      	cbz	r0, 800427e <__swbuf_r+0x12>
 8004276:	6983      	ldr	r3, [r0, #24]
 8004278:	b90b      	cbnz	r3, 800427e <__swbuf_r+0x12>
 800427a:	f7ff fb81 	bl	8003980 <__sinit>
 800427e:	4b21      	ldr	r3, [pc, #132]	; (8004304 <__swbuf_r+0x98>)
 8004280:	429c      	cmp	r4, r3
 8004282:	d12b      	bne.n	80042dc <__swbuf_r+0x70>
 8004284:	686c      	ldr	r4, [r5, #4]
 8004286:	69a3      	ldr	r3, [r4, #24]
 8004288:	60a3      	str	r3, [r4, #8]
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	071a      	lsls	r2, r3, #28
 800428e:	d52f      	bpl.n	80042f0 <__swbuf_r+0x84>
 8004290:	6923      	ldr	r3, [r4, #16]
 8004292:	b36b      	cbz	r3, 80042f0 <__swbuf_r+0x84>
 8004294:	6923      	ldr	r3, [r4, #16]
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	1ac0      	subs	r0, r0, r3
 800429a:	6963      	ldr	r3, [r4, #20]
 800429c:	b2f6      	uxtb	r6, r6
 800429e:	4283      	cmp	r3, r0
 80042a0:	4637      	mov	r7, r6
 80042a2:	dc04      	bgt.n	80042ae <__swbuf_r+0x42>
 80042a4:	4621      	mov	r1, r4
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 f948 	bl	800453c <_fflush_r>
 80042ac:	bb30      	cbnz	r0, 80042fc <__swbuf_r+0x90>
 80042ae:	68a3      	ldr	r3, [r4, #8]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	60a3      	str	r3, [r4, #8]
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	6022      	str	r2, [r4, #0]
 80042ba:	701e      	strb	r6, [r3, #0]
 80042bc:	6963      	ldr	r3, [r4, #20]
 80042be:	3001      	adds	r0, #1
 80042c0:	4283      	cmp	r3, r0
 80042c2:	d004      	beq.n	80042ce <__swbuf_r+0x62>
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	07db      	lsls	r3, r3, #31
 80042c8:	d506      	bpl.n	80042d8 <__swbuf_r+0x6c>
 80042ca:	2e0a      	cmp	r6, #10
 80042cc:	d104      	bne.n	80042d8 <__swbuf_r+0x6c>
 80042ce:	4621      	mov	r1, r4
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 f933 	bl	800453c <_fflush_r>
 80042d6:	b988      	cbnz	r0, 80042fc <__swbuf_r+0x90>
 80042d8:	4638      	mov	r0, r7
 80042da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <__swbuf_r+0x9c>)
 80042de:	429c      	cmp	r4, r3
 80042e0:	d101      	bne.n	80042e6 <__swbuf_r+0x7a>
 80042e2:	68ac      	ldr	r4, [r5, #8]
 80042e4:	e7cf      	b.n	8004286 <__swbuf_r+0x1a>
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <__swbuf_r+0xa0>)
 80042e8:	429c      	cmp	r4, r3
 80042ea:	bf08      	it	eq
 80042ec:	68ec      	ldreq	r4, [r5, #12]
 80042ee:	e7ca      	b.n	8004286 <__swbuf_r+0x1a>
 80042f0:	4621      	mov	r1, r4
 80042f2:	4628      	mov	r0, r5
 80042f4:	f000 f81e 	bl	8004334 <__swsetup_r>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d0cb      	beq.n	8004294 <__swbuf_r+0x28>
 80042fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004300:	e7ea      	b.n	80042d8 <__swbuf_r+0x6c>
 8004302:	bf00      	nop
 8004304:	08004850 	.word	0x08004850
 8004308:	08004870 	.word	0x08004870
 800430c:	08004830 	.word	0x08004830

08004310 <_write_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4d07      	ldr	r5, [pc, #28]	; (8004330 <_write_r+0x20>)
 8004314:	4604      	mov	r4, r0
 8004316:	4608      	mov	r0, r1
 8004318:	4611      	mov	r1, r2
 800431a:	2200      	movs	r2, #0
 800431c:	602a      	str	r2, [r5, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f7fc fb6e 	bl	8000a00 <_write>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d102      	bne.n	800432e <_write_r+0x1e>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	b103      	cbz	r3, 800432e <_write_r+0x1e>
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	20004094 	.word	0x20004094

08004334 <__swsetup_r>:
 8004334:	4b32      	ldr	r3, [pc, #200]	; (8004400 <__swsetup_r+0xcc>)
 8004336:	b570      	push	{r4, r5, r6, lr}
 8004338:	681d      	ldr	r5, [r3, #0]
 800433a:	4606      	mov	r6, r0
 800433c:	460c      	mov	r4, r1
 800433e:	b125      	cbz	r5, 800434a <__swsetup_r+0x16>
 8004340:	69ab      	ldr	r3, [r5, #24]
 8004342:	b913      	cbnz	r3, 800434a <__swsetup_r+0x16>
 8004344:	4628      	mov	r0, r5
 8004346:	f7ff fb1b 	bl	8003980 <__sinit>
 800434a:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <__swsetup_r+0xd0>)
 800434c:	429c      	cmp	r4, r3
 800434e:	d10f      	bne.n	8004370 <__swsetup_r+0x3c>
 8004350:	686c      	ldr	r4, [r5, #4]
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004358:	0719      	lsls	r1, r3, #28
 800435a:	d42c      	bmi.n	80043b6 <__swsetup_r+0x82>
 800435c:	06dd      	lsls	r5, r3, #27
 800435e:	d411      	bmi.n	8004384 <__swsetup_r+0x50>
 8004360:	2309      	movs	r3, #9
 8004362:	6033      	str	r3, [r6, #0]
 8004364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004368:	81a3      	strh	r3, [r4, #12]
 800436a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800436e:	e03e      	b.n	80043ee <__swsetup_r+0xba>
 8004370:	4b25      	ldr	r3, [pc, #148]	; (8004408 <__swsetup_r+0xd4>)
 8004372:	429c      	cmp	r4, r3
 8004374:	d101      	bne.n	800437a <__swsetup_r+0x46>
 8004376:	68ac      	ldr	r4, [r5, #8]
 8004378:	e7eb      	b.n	8004352 <__swsetup_r+0x1e>
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <__swsetup_r+0xd8>)
 800437c:	429c      	cmp	r4, r3
 800437e:	bf08      	it	eq
 8004380:	68ec      	ldreq	r4, [r5, #12]
 8004382:	e7e6      	b.n	8004352 <__swsetup_r+0x1e>
 8004384:	0758      	lsls	r0, r3, #29
 8004386:	d512      	bpl.n	80043ae <__swsetup_r+0x7a>
 8004388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800438a:	b141      	cbz	r1, 800439e <__swsetup_r+0x6a>
 800438c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004390:	4299      	cmp	r1, r3
 8004392:	d002      	beq.n	800439a <__swsetup_r+0x66>
 8004394:	4630      	mov	r0, r6
 8004396:	f000 f991 	bl	80046bc <_free_r>
 800439a:	2300      	movs	r3, #0
 800439c:	6363      	str	r3, [r4, #52]	; 0x34
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043a4:	81a3      	strh	r3, [r4, #12]
 80043a6:	2300      	movs	r3, #0
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	f043 0308 	orr.w	r3, r3, #8
 80043b4:	81a3      	strh	r3, [r4, #12]
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	b94b      	cbnz	r3, 80043ce <__swsetup_r+0x9a>
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c4:	d003      	beq.n	80043ce <__swsetup_r+0x9a>
 80043c6:	4621      	mov	r1, r4
 80043c8:	4630      	mov	r0, r6
 80043ca:	f000 f92b 	bl	8004624 <__smakebuf_r>
 80043ce:	89a0      	ldrh	r0, [r4, #12]
 80043d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043d4:	f010 0301 	ands.w	r3, r0, #1
 80043d8:	d00a      	beq.n	80043f0 <__swsetup_r+0xbc>
 80043da:	2300      	movs	r3, #0
 80043dc:	60a3      	str	r3, [r4, #8]
 80043de:	6963      	ldr	r3, [r4, #20]
 80043e0:	425b      	negs	r3, r3
 80043e2:	61a3      	str	r3, [r4, #24]
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	b943      	cbnz	r3, 80043fa <__swsetup_r+0xc6>
 80043e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043ec:	d1ba      	bne.n	8004364 <__swsetup_r+0x30>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	0781      	lsls	r1, r0, #30
 80043f2:	bf58      	it	pl
 80043f4:	6963      	ldrpl	r3, [r4, #20]
 80043f6:	60a3      	str	r3, [r4, #8]
 80043f8:	e7f4      	b.n	80043e4 <__swsetup_r+0xb0>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e7f7      	b.n	80043ee <__swsetup_r+0xba>
 80043fe:	bf00      	nop
 8004400:	20000010 	.word	0x20000010
 8004404:	08004850 	.word	0x08004850
 8004408:	08004870 	.word	0x08004870
 800440c:	08004830 	.word	0x08004830

08004410 <_close_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4d06      	ldr	r5, [pc, #24]	; (800442c <_close_r+0x1c>)
 8004414:	2300      	movs	r3, #0
 8004416:	4604      	mov	r4, r0
 8004418:	4608      	mov	r0, r1
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	f7fc fb0c 	bl	8000a38 <_close>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d102      	bne.n	800442a <_close_r+0x1a>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	b103      	cbz	r3, 800442a <_close_r+0x1a>
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	20004094 	.word	0x20004094

08004430 <__sflush_r>:
 8004430:	898a      	ldrh	r2, [r1, #12]
 8004432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004436:	4605      	mov	r5, r0
 8004438:	0710      	lsls	r0, r2, #28
 800443a:	460c      	mov	r4, r1
 800443c:	d458      	bmi.n	80044f0 <__sflush_r+0xc0>
 800443e:	684b      	ldr	r3, [r1, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	dc05      	bgt.n	8004450 <__sflush_r+0x20>
 8004444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	dc02      	bgt.n	8004450 <__sflush_r+0x20>
 800444a:	2000      	movs	r0, #0
 800444c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004452:	2e00      	cmp	r6, #0
 8004454:	d0f9      	beq.n	800444a <__sflush_r+0x1a>
 8004456:	2300      	movs	r3, #0
 8004458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800445c:	682f      	ldr	r7, [r5, #0]
 800445e:	602b      	str	r3, [r5, #0]
 8004460:	d032      	beq.n	80044c8 <__sflush_r+0x98>
 8004462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004464:	89a3      	ldrh	r3, [r4, #12]
 8004466:	075a      	lsls	r2, r3, #29
 8004468:	d505      	bpl.n	8004476 <__sflush_r+0x46>
 800446a:	6863      	ldr	r3, [r4, #4]
 800446c:	1ac0      	subs	r0, r0, r3
 800446e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004470:	b10b      	cbz	r3, 8004476 <__sflush_r+0x46>
 8004472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004474:	1ac0      	subs	r0, r0, r3
 8004476:	2300      	movs	r3, #0
 8004478:	4602      	mov	r2, r0
 800447a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800447c:	6a21      	ldr	r1, [r4, #32]
 800447e:	4628      	mov	r0, r5
 8004480:	47b0      	blx	r6
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	d106      	bne.n	8004496 <__sflush_r+0x66>
 8004488:	6829      	ldr	r1, [r5, #0]
 800448a:	291d      	cmp	r1, #29
 800448c:	d82c      	bhi.n	80044e8 <__sflush_r+0xb8>
 800448e:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <__sflush_r+0x108>)
 8004490:	40ca      	lsrs	r2, r1
 8004492:	07d6      	lsls	r6, r2, #31
 8004494:	d528      	bpl.n	80044e8 <__sflush_r+0xb8>
 8004496:	2200      	movs	r2, #0
 8004498:	6062      	str	r2, [r4, #4]
 800449a:	04d9      	lsls	r1, r3, #19
 800449c:	6922      	ldr	r2, [r4, #16]
 800449e:	6022      	str	r2, [r4, #0]
 80044a0:	d504      	bpl.n	80044ac <__sflush_r+0x7c>
 80044a2:	1c42      	adds	r2, r0, #1
 80044a4:	d101      	bne.n	80044aa <__sflush_r+0x7a>
 80044a6:	682b      	ldr	r3, [r5, #0]
 80044a8:	b903      	cbnz	r3, 80044ac <__sflush_r+0x7c>
 80044aa:	6560      	str	r0, [r4, #84]	; 0x54
 80044ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ae:	602f      	str	r7, [r5, #0]
 80044b0:	2900      	cmp	r1, #0
 80044b2:	d0ca      	beq.n	800444a <__sflush_r+0x1a>
 80044b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044b8:	4299      	cmp	r1, r3
 80044ba:	d002      	beq.n	80044c2 <__sflush_r+0x92>
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 f8fd 	bl	80046bc <_free_r>
 80044c2:	2000      	movs	r0, #0
 80044c4:	6360      	str	r0, [r4, #52]	; 0x34
 80044c6:	e7c1      	b.n	800444c <__sflush_r+0x1c>
 80044c8:	6a21      	ldr	r1, [r4, #32]
 80044ca:	2301      	movs	r3, #1
 80044cc:	4628      	mov	r0, r5
 80044ce:	47b0      	blx	r6
 80044d0:	1c41      	adds	r1, r0, #1
 80044d2:	d1c7      	bne.n	8004464 <__sflush_r+0x34>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0c4      	beq.n	8004464 <__sflush_r+0x34>
 80044da:	2b1d      	cmp	r3, #29
 80044dc:	d001      	beq.n	80044e2 <__sflush_r+0xb2>
 80044de:	2b16      	cmp	r3, #22
 80044e0:	d101      	bne.n	80044e6 <__sflush_r+0xb6>
 80044e2:	602f      	str	r7, [r5, #0]
 80044e4:	e7b1      	b.n	800444a <__sflush_r+0x1a>
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	e7ad      	b.n	800444c <__sflush_r+0x1c>
 80044f0:	690f      	ldr	r7, [r1, #16]
 80044f2:	2f00      	cmp	r7, #0
 80044f4:	d0a9      	beq.n	800444a <__sflush_r+0x1a>
 80044f6:	0793      	lsls	r3, r2, #30
 80044f8:	680e      	ldr	r6, [r1, #0]
 80044fa:	bf08      	it	eq
 80044fc:	694b      	ldreq	r3, [r1, #20]
 80044fe:	600f      	str	r7, [r1, #0]
 8004500:	bf18      	it	ne
 8004502:	2300      	movne	r3, #0
 8004504:	eba6 0807 	sub.w	r8, r6, r7
 8004508:	608b      	str	r3, [r1, #8]
 800450a:	f1b8 0f00 	cmp.w	r8, #0
 800450e:	dd9c      	ble.n	800444a <__sflush_r+0x1a>
 8004510:	6a21      	ldr	r1, [r4, #32]
 8004512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004514:	4643      	mov	r3, r8
 8004516:	463a      	mov	r2, r7
 8004518:	4628      	mov	r0, r5
 800451a:	47b0      	blx	r6
 800451c:	2800      	cmp	r0, #0
 800451e:	dc06      	bgt.n	800452e <__sflush_r+0xfe>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800452c:	e78e      	b.n	800444c <__sflush_r+0x1c>
 800452e:	4407      	add	r7, r0
 8004530:	eba8 0800 	sub.w	r8, r8, r0
 8004534:	e7e9      	b.n	800450a <__sflush_r+0xda>
 8004536:	bf00      	nop
 8004538:	20400001 	.word	0x20400001

0800453c <_fflush_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	690b      	ldr	r3, [r1, #16]
 8004540:	4605      	mov	r5, r0
 8004542:	460c      	mov	r4, r1
 8004544:	b913      	cbnz	r3, 800454c <_fflush_r+0x10>
 8004546:	2500      	movs	r5, #0
 8004548:	4628      	mov	r0, r5
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	b118      	cbz	r0, 8004556 <_fflush_r+0x1a>
 800454e:	6983      	ldr	r3, [r0, #24]
 8004550:	b90b      	cbnz	r3, 8004556 <_fflush_r+0x1a>
 8004552:	f7ff fa15 	bl	8003980 <__sinit>
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <_fflush_r+0x6c>)
 8004558:	429c      	cmp	r4, r3
 800455a:	d11b      	bne.n	8004594 <_fflush_r+0x58>
 800455c:	686c      	ldr	r4, [r5, #4]
 800455e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ef      	beq.n	8004546 <_fflush_r+0xa>
 8004566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004568:	07d0      	lsls	r0, r2, #31
 800456a:	d404      	bmi.n	8004576 <_fflush_r+0x3a>
 800456c:	0599      	lsls	r1, r3, #22
 800456e:	d402      	bmi.n	8004576 <_fflush_r+0x3a>
 8004570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004572:	f7ff faa3 	bl	8003abc <__retarget_lock_acquire_recursive>
 8004576:	4628      	mov	r0, r5
 8004578:	4621      	mov	r1, r4
 800457a:	f7ff ff59 	bl	8004430 <__sflush_r>
 800457e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004580:	07da      	lsls	r2, r3, #31
 8004582:	4605      	mov	r5, r0
 8004584:	d4e0      	bmi.n	8004548 <_fflush_r+0xc>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	059b      	lsls	r3, r3, #22
 800458a:	d4dd      	bmi.n	8004548 <_fflush_r+0xc>
 800458c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800458e:	f7ff fa96 	bl	8003abe <__retarget_lock_release_recursive>
 8004592:	e7d9      	b.n	8004548 <_fflush_r+0xc>
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <_fflush_r+0x70>)
 8004596:	429c      	cmp	r4, r3
 8004598:	d101      	bne.n	800459e <_fflush_r+0x62>
 800459a:	68ac      	ldr	r4, [r5, #8]
 800459c:	e7df      	b.n	800455e <_fflush_r+0x22>
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <_fflush_r+0x74>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	bf08      	it	eq
 80045a4:	68ec      	ldreq	r4, [r5, #12]
 80045a6:	e7da      	b.n	800455e <_fflush_r+0x22>
 80045a8:	08004850 	.word	0x08004850
 80045ac:	08004870 	.word	0x08004870
 80045b0:	08004830 	.word	0x08004830

080045b4 <_lseek_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4d07      	ldr	r5, [pc, #28]	; (80045d4 <_lseek_r+0x20>)
 80045b8:	4604      	mov	r4, r0
 80045ba:	4608      	mov	r0, r1
 80045bc:	4611      	mov	r1, r2
 80045be:	2200      	movs	r2, #0
 80045c0:	602a      	str	r2, [r5, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f7fc fa5f 	bl	8000a86 <_lseek>
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	d102      	bne.n	80045d2 <_lseek_r+0x1e>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	b103      	cbz	r3, 80045d2 <_lseek_r+0x1e>
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	bd38      	pop	{r3, r4, r5, pc}
 80045d4:	20004094 	.word	0x20004094

080045d8 <__swhatbuf_r>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	460e      	mov	r6, r1
 80045dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e0:	2900      	cmp	r1, #0
 80045e2:	b096      	sub	sp, #88	; 0x58
 80045e4:	4614      	mov	r4, r2
 80045e6:	461d      	mov	r5, r3
 80045e8:	da08      	bge.n	80045fc <__swhatbuf_r+0x24>
 80045ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	602a      	str	r2, [r5, #0]
 80045f2:	061a      	lsls	r2, r3, #24
 80045f4:	d410      	bmi.n	8004618 <__swhatbuf_r+0x40>
 80045f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045fa:	e00e      	b.n	800461a <__swhatbuf_r+0x42>
 80045fc:	466a      	mov	r2, sp
 80045fe:	f000 f8bb 	bl	8004778 <_fstat_r>
 8004602:	2800      	cmp	r0, #0
 8004604:	dbf1      	blt.n	80045ea <__swhatbuf_r+0x12>
 8004606:	9a01      	ldr	r2, [sp, #4]
 8004608:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800460c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004610:	425a      	negs	r2, r3
 8004612:	415a      	adcs	r2, r3
 8004614:	602a      	str	r2, [r5, #0]
 8004616:	e7ee      	b.n	80045f6 <__swhatbuf_r+0x1e>
 8004618:	2340      	movs	r3, #64	; 0x40
 800461a:	2000      	movs	r0, #0
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	b016      	add	sp, #88	; 0x58
 8004620:	bd70      	pop	{r4, r5, r6, pc}
	...

08004624 <__smakebuf_r>:
 8004624:	898b      	ldrh	r3, [r1, #12]
 8004626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004628:	079d      	lsls	r5, r3, #30
 800462a:	4606      	mov	r6, r0
 800462c:	460c      	mov	r4, r1
 800462e:	d507      	bpl.n	8004640 <__smakebuf_r+0x1c>
 8004630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	6123      	str	r3, [r4, #16]
 8004638:	2301      	movs	r3, #1
 800463a:	6163      	str	r3, [r4, #20]
 800463c:	b002      	add	sp, #8
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	ab01      	add	r3, sp, #4
 8004642:	466a      	mov	r2, sp
 8004644:	f7ff ffc8 	bl	80045d8 <__swhatbuf_r>
 8004648:	9900      	ldr	r1, [sp, #0]
 800464a:	4605      	mov	r5, r0
 800464c:	4630      	mov	r0, r6
 800464e:	f7ff fa57 	bl	8003b00 <_malloc_r>
 8004652:	b948      	cbnz	r0, 8004668 <__smakebuf_r+0x44>
 8004654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004658:	059a      	lsls	r2, r3, #22
 800465a:	d4ef      	bmi.n	800463c <__smakebuf_r+0x18>
 800465c:	f023 0303 	bic.w	r3, r3, #3
 8004660:	f043 0302 	orr.w	r3, r3, #2
 8004664:	81a3      	strh	r3, [r4, #12]
 8004666:	e7e3      	b.n	8004630 <__smakebuf_r+0xc>
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <__smakebuf_r+0x7c>)
 800466a:	62b3      	str	r3, [r6, #40]	; 0x28
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	6020      	str	r0, [r4, #0]
 8004670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004674:	81a3      	strh	r3, [r4, #12]
 8004676:	9b00      	ldr	r3, [sp, #0]
 8004678:	6163      	str	r3, [r4, #20]
 800467a:	9b01      	ldr	r3, [sp, #4]
 800467c:	6120      	str	r0, [r4, #16]
 800467e:	b15b      	cbz	r3, 8004698 <__smakebuf_r+0x74>
 8004680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004684:	4630      	mov	r0, r6
 8004686:	f000 f889 	bl	800479c <_isatty_r>
 800468a:	b128      	cbz	r0, 8004698 <__smakebuf_r+0x74>
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	81a3      	strh	r3, [r4, #12]
 8004698:	89a0      	ldrh	r0, [r4, #12]
 800469a:	4305      	orrs	r5, r0
 800469c:	81a5      	strh	r5, [r4, #12]
 800469e:	e7cd      	b.n	800463c <__smakebuf_r+0x18>
 80046a0:	08003919 	.word	0x08003919

080046a4 <__malloc_lock>:
 80046a4:	4801      	ldr	r0, [pc, #4]	; (80046ac <__malloc_lock+0x8>)
 80046a6:	f7ff ba09 	b.w	8003abc <__retarget_lock_acquire_recursive>
 80046aa:	bf00      	nop
 80046ac:	20004088 	.word	0x20004088

080046b0 <__malloc_unlock>:
 80046b0:	4801      	ldr	r0, [pc, #4]	; (80046b8 <__malloc_unlock+0x8>)
 80046b2:	f7ff ba04 	b.w	8003abe <__retarget_lock_release_recursive>
 80046b6:	bf00      	nop
 80046b8:	20004088 	.word	0x20004088

080046bc <_free_r>:
 80046bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046be:	2900      	cmp	r1, #0
 80046c0:	d044      	beq.n	800474c <_free_r+0x90>
 80046c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c6:	9001      	str	r0, [sp, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f1a1 0404 	sub.w	r4, r1, #4
 80046ce:	bfb8      	it	lt
 80046d0:	18e4      	addlt	r4, r4, r3
 80046d2:	f7ff ffe7 	bl	80046a4 <__malloc_lock>
 80046d6:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <_free_r+0x94>)
 80046d8:	9801      	ldr	r0, [sp, #4]
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	b933      	cbnz	r3, 80046ec <_free_r+0x30>
 80046de:	6063      	str	r3, [r4, #4]
 80046e0:	6014      	str	r4, [r2, #0]
 80046e2:	b003      	add	sp, #12
 80046e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046e8:	f7ff bfe2 	b.w	80046b0 <__malloc_unlock>
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d908      	bls.n	8004702 <_free_r+0x46>
 80046f0:	6825      	ldr	r5, [r4, #0]
 80046f2:	1961      	adds	r1, r4, r5
 80046f4:	428b      	cmp	r3, r1
 80046f6:	bf01      	itttt	eq
 80046f8:	6819      	ldreq	r1, [r3, #0]
 80046fa:	685b      	ldreq	r3, [r3, #4]
 80046fc:	1949      	addeq	r1, r1, r5
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	e7ed      	b.n	80046de <_free_r+0x22>
 8004702:	461a      	mov	r2, r3
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	b10b      	cbz	r3, 800470c <_free_r+0x50>
 8004708:	42a3      	cmp	r3, r4
 800470a:	d9fa      	bls.n	8004702 <_free_r+0x46>
 800470c:	6811      	ldr	r1, [r2, #0]
 800470e:	1855      	adds	r5, r2, r1
 8004710:	42a5      	cmp	r5, r4
 8004712:	d10b      	bne.n	800472c <_free_r+0x70>
 8004714:	6824      	ldr	r4, [r4, #0]
 8004716:	4421      	add	r1, r4
 8004718:	1854      	adds	r4, r2, r1
 800471a:	42a3      	cmp	r3, r4
 800471c:	6011      	str	r1, [r2, #0]
 800471e:	d1e0      	bne.n	80046e2 <_free_r+0x26>
 8004720:	681c      	ldr	r4, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	6053      	str	r3, [r2, #4]
 8004726:	4421      	add	r1, r4
 8004728:	6011      	str	r1, [r2, #0]
 800472a:	e7da      	b.n	80046e2 <_free_r+0x26>
 800472c:	d902      	bls.n	8004734 <_free_r+0x78>
 800472e:	230c      	movs	r3, #12
 8004730:	6003      	str	r3, [r0, #0]
 8004732:	e7d6      	b.n	80046e2 <_free_r+0x26>
 8004734:	6825      	ldr	r5, [r4, #0]
 8004736:	1961      	adds	r1, r4, r5
 8004738:	428b      	cmp	r3, r1
 800473a:	bf04      	itt	eq
 800473c:	6819      	ldreq	r1, [r3, #0]
 800473e:	685b      	ldreq	r3, [r3, #4]
 8004740:	6063      	str	r3, [r4, #4]
 8004742:	bf04      	itt	eq
 8004744:	1949      	addeq	r1, r1, r5
 8004746:	6021      	streq	r1, [r4, #0]
 8004748:	6054      	str	r4, [r2, #4]
 800474a:	e7ca      	b.n	80046e2 <_free_r+0x26>
 800474c:	b003      	add	sp, #12
 800474e:	bd30      	pop	{r4, r5, pc}
 8004750:	2000408c 	.word	0x2000408c

08004754 <_read_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d07      	ldr	r5, [pc, #28]	; (8004774 <_read_r+0x20>)
 8004758:	4604      	mov	r4, r0
 800475a:	4608      	mov	r0, r1
 800475c:	4611      	mov	r1, r2
 800475e:	2200      	movs	r2, #0
 8004760:	602a      	str	r2, [r5, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f7fc f92f 	bl	80009c6 <_read>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_read_r+0x1e>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_read_r+0x1e>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	20004094 	.word	0x20004094

08004778 <_fstat_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4d07      	ldr	r5, [pc, #28]	; (8004798 <_fstat_r+0x20>)
 800477c:	2300      	movs	r3, #0
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	4611      	mov	r1, r2
 8004784:	602b      	str	r3, [r5, #0]
 8004786:	f7fc f963 	bl	8000a50 <_fstat>
 800478a:	1c43      	adds	r3, r0, #1
 800478c:	d102      	bne.n	8004794 <_fstat_r+0x1c>
 800478e:	682b      	ldr	r3, [r5, #0]
 8004790:	b103      	cbz	r3, 8004794 <_fstat_r+0x1c>
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	bd38      	pop	{r3, r4, r5, pc}
 8004796:	bf00      	nop
 8004798:	20004094 	.word	0x20004094

0800479c <_isatty_r>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	4d06      	ldr	r5, [pc, #24]	; (80047b8 <_isatty_r+0x1c>)
 80047a0:	2300      	movs	r3, #0
 80047a2:	4604      	mov	r4, r0
 80047a4:	4608      	mov	r0, r1
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	f7fc f962 	bl	8000a70 <_isatty>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d102      	bne.n	80047b6 <_isatty_r+0x1a>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	b103      	cbz	r3, 80047b6 <_isatty_r+0x1a>
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
 80047b8:	20004094 	.word	0x20004094

080047bc <_init>:
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	bf00      	nop
 80047c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c2:	bc08      	pop	{r3}
 80047c4:	469e      	mov	lr, r3
 80047c6:	4770      	bx	lr

080047c8 <_fini>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	bf00      	nop
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr
